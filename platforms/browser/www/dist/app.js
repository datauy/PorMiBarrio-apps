window.VERSION = "1.0.2";var pmb_im={controllers:angular.module("pmb_im.controllers",[]),services:angular.module("pmb_im.services",[])};pmb_im.app=angular.module("pmb_im",["ionic","ionic.wizard","ion-autocomplete","leaflet-directive","pmb_im.controllers","pmb_im.services","ngCordova","ionic-cache-src"]).constant("ApiImEndpoint",{url:"http://www.montevideo.gub.uy"}).constant("ApiDataEndpoint",{url:"/data"}).run(["$ionicPlatform","$rootScope","$cordovaKeyboard","$cordovaNetwork","DBService",function(e,t,n,o,r){t.VERSION=window.VERSION,e.ready(function(){ionic.Platform.isFullScreen=!0;var e=r.initDB();e.info().then(console.log.bind(console));try{cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0)}catch(t){}try{window.Keyboard.hideKeyboardAccessoryBar(!0)}catch(t){}try{Keyboard.hideKeyboardAccessoryBar(!0)}catch(t){}try{StatusBar.hide()}catch(t){}})}]).config(["$stateProvider","$urlRouterProvider","$compileProvider","$ionicConfigProvider",function(e,t,n,o){n.debugInfoEnabled(!1),e.state("app",{cache:!1,url:"/app","abstract":!0,templateUrl:"templates/menu.html",controller:"MapController"}).state("app.map",{cache:!1,url:"/map/",views:{menuContent:{templateUrl:"templates/map.html",controller:"PMBCtrl"}}}).state("app.intro",{cache:!1,url:"/intro",views:{menuContent:{templateUrl:"templates/intro.html",controller:"IntroCtrl"}}}),t.otherwise("/app/intro")}]),pmb_im.controllers.controller("AutoCompleteCtrl",["$scope","leafletData","locationAPI",function(e,t,n){e.ionAutocompleteElement=angular.element(document.getElementsByClassName("ion-autocomplete")),e.ionAutocompleteElement.bind("touchend click focus",e.onClick),e.onClick=function(){e.ionAutocompleteElement.controller("ionAutocomplete").showModal()},e.searchLocation=function(e){if(e)return n.searchLocationByStr(e)}}]),pmb_im.controllers.controller("IntroCtrl",["$scope","$state","$cordovaGeolocation","$stateParams","$ionicPlatform","$ionicPopup","LocationsService","DBService",function(e,t,n,o,r,a,i,l){e.geolocate=function(){var e={timeout:3500,enableHighAccuracy:!0};n.getCurrentPosition(e).then(function(e){i.save_initial_position(e),t.go("app.map")},function(e){t.go("app.map")})},e.$on("$ionicView.enter",function(){null!=i.council_modal&&(i.council_modal.hide(),i.council_modal.remove()),e.geolocate()})}]),pmb_im.controllers.controller("MapController",["$scope","$sce","_","$cordovaCamera","$cordovaFileTransfer","$cordovaGeolocation","$compile","$state","$stateParams","$ionicModal","$ionicPopup","leafletData","ConfigService","PMBService","LocationsService","ReportService","FaqService","CategoriesService","AuthService","UserService","DBService","$timeout","$location","ErrorService","$ionicSlideBoxDelegate","$ionicScrollDelegate","$cordovaNetwork","PopUpService","$ionicPlatform","ConnectivityService","$cordovaInAppBrowser","$interval","$cordovaKeyboard","MapService","ModalService",function(e,t,n,o,r,a,i,s,c,u,d,p,m,_,f,g,h,y,v,b,w,E,k,B,I,C,M,S,P,R,O,A,N,x,T){e.featureReports={},e.reportsByState={},e.reportsVisible={},e.baseURL=m.baseURL,e.user_cached_image="",e.report_detail_id=null,e.one_value_popup=null,e.abuse_name=null,e.abuse_email=null,e.abuse_subject=null,e.abuse_message=null,e.allCategoriesFromBoyArea=null,document.addEventListener("deviceready",function(){R.isOnline()?(e.check_user_logged(),e.send_offline_reports()):e.set_offline_user()}),e.$on("$ionicView.beforeEnter",function(){T.checkNoModalIsOpen(),e.set_network_events();A(function(){e.send_offline_reports()},6e4);null!=document.getElementById("foot_bar")&&(document.getElementById("foot_bar").style.display="block"),R.isOnline()?e.create_online_map():e.create_offline_map()}),e.openWebsite=function(e){var t={location:"no",clearcache:"yes",toolbar:"no"};O.open(e,"_blank",t).then(function(e){})["catch"](function(e){})},e.set_network_events=function(){ionic.Platform.isWebView()?(e.$on("$cordovaNetwork:online",function(t,n){e.check_user_logged(),e.send_offline_reports(),e.create_online_map()}),e.$on("$cordovaNetwork:offline",function(t,n){e.create_offline_map(),e.set_offline_user()})):(window.addEventListener("online",function(t){e.check_user_logged(),e.send_offline_reports(),e.create_online_map()},!1),window.addEventListener("offline",function(t){e.create_offline_map(),e.set_offline_user()},!1))},e.send_offline_reports_from_menu=function(){R.isOnline()?(e.send_offline_reports(),e.list_offline_reports()):S.show_alert("Error de conexión","Para poder enviar los reportes pendientes debe estar conectado a internet.")},e.send_offline_reports=function(){if(R.isOnline()){var e=w.getAllReports();e.then(function(e){null!=e&&e.total_rows>0&&e.rows.forEach(function(e){var t=e.doc,n=_.report(t);null==t.file?n.success(function(e,n,o,r){B.http_data_response_is_successful_ajax(e)&&w.deleteReport(t._id)}).error(function(e,t,n,o){}):n.then(function(e){var n=JSON.parse(e.response);B.http_data_response_is_successful_ajax(n)&&w.deleteReport(t._id)},function(e){},function(e){})})})["catch"](function(e){})}},e.send_offline_report=function(e){var t=_.report(e);null==e.file?t.success(function(e,t,n,o){return!!B.http_data_response_is_successful_ajax(e)}).error(function(e,t,n,o){return!1}):t.then(function(e){var t=JSON.parse(e.response);return!!B.http_data_response_is_successful_ajax(t)},function(e){return!1},function(e){})},e.create_offline_map=function(){return null==e.map&&void(e.map={defaults:{tileLayer:"./offline_tiles/{z}/{x}/{y}.png",minZoom:16,maxZoom:16,zoomControlPosition:"topleft"},markers:{},events:{map:{enable:["context"],logic:"emit"}}})},e.create_online_map=function(){return(null==e.map||"./offline_tiles/{z}/{x}/{y}.png"!=e.map.defaults.tileLayer)&&(e.map={defaults:{tileLayer:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",minZoom:12,maxZoom:18,zoomControlPosition:"topleft"},markers:{},events:{map:{enable:["context"],logic:"emit"}},center:{}},e.loadPinsLayer(),""!=f.new_report_lat?e.map.center={lat:f.new_report_lat,lng:f.new_report_lng,zoom:16}:e.map.center={lat:-34.901113,lng:-56.164531,zoom:16},void p.getMap().then(function(t){t.on("moveend",e.hideOffScreenPins)}))};e.new_report_from_latlon=function(t,n){f.new_report_lat=t,f.new_report_lng=n,f.initial_lat=t,f.initial_lng=n,e.new_report(1)},e.new_report=function(t){if(e.set_active_option("button-report"),e.hide_special_divs(),1==t)if(f.initial_lat=f.new_report_lat,f.initial_lng=f.new_report_lat,document.getElementById("spinner").style.display="block",R.isOnline())e.report=g._new(),e.report.lat=f.new_report_lat,e.report.lon=f.new_report_lng,y.all().then(function(t){B.http_response_is_successful_popup(t)?(w.saveCategories(t.data),e.show_report_form(t.data.categories)):document.getElementById("spinner").style.display="none"});else{var n=y.getCachedCategories();n.then(function(t){t&&t.categories&&Object.keys(t.categories).length>0?(e.report=g._new(),e.report.lat=f.new_report_lat,e.report.lon=f.new_report_lng,e.show_report_form(t.categories)):(document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet."))})["catch"](function(e){document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet.")})}else e.addMapControls()},e.editOfflineReport=function(t){e.set_active_option("button-report"),e.hide_special_divs(),document.getElementById("spinner").style.display="block";var n=y.getCachedCategories();n.then(function(n){n&&n.categories&&Object.keys(n.categories).length>0?(e.report=e.offlineReports[t],e.show_offline_report_form(n.categories)):(document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet."))})["catch"](function(e){document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet.")})},e.deleteOfflineReport=function(t){e.hide_special_divs(),document.getElementById("spinner").style.display="block",e.report=e.offlineReports[t],T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/delete-offline-report.html",{scope:e,animation:"slide-in-up"}).then(function(e){T.activeModal=e,document.getElementById("spinner").style.display="none",document.getElementById("foot_bar").style.display="none",T.show()})},e.updateOfflineReport=function(){var t=new Array;t.push(e.create_field_array("Email","email",e.report.email)),t.push(e.create_field_array("Contraseña","notNull",e.report.password_sign_in)),t.push(e.create_field_array("Seleccione una subcategoría","notNull",e.report.category)),t.push(e.create_field_array("Título","notNull",e.report.title)),t.push(e.create_field_array("Detalles","notNull",e.report.detail)),B.check_fields(t,"error_container")?w.updateReport(e.report).then(function(){e.back_to_map(!0),S.show_alert("Envío pendiente","Se han guardado los cambios al reporte. Se enviará cuando utilice esta aplicación conectado a internet"),e.list_reports(),e.offlineReportsMarkers[e.report._id].openPopup()}):e.back_to_map(!1)},e.cleanOfflineMarkers=function(e){e.eachLayer(function(t){"undefined"!=t._url&&null!=t._url||"Reporte pendiente de envío"==t.options.alt&&e.removeLayer(t)})},e.deleteOfflineReportOk=function(){var t=e.report._id;w.deleteGivenReport(e.report).then(function(){var n=e.offlineReportsMarkers[t];p.getMap().then(function(e){e.removeLayer(n)}),e.back_to_map(!0),e.list_reports()})},e.show_report_form=function(t){e.categories=t,document.getElementById("spinner").style.display="none",document.getElementById("foot_bar").style.display="none",T.checkNoModalIsOpen(),b.isLogged()?(e.report.name=b.name,e.report.email=b.email,e.report.password_sign_in=b.password,e.report.phone=b.phone,u.fromTemplateUrl("templates/pmb-wizard.html",{scope:e,animation:"slide-in-up",hardwareBackButtonClose:!1}).then(function(e){T.activeModal=e,T.activeModal.show()})):u.fromTemplateUrl("templates/pmb-wizard-with-login.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){T.activeModal=e,T.activeModal.show()})},e.show_offline_report_form=function(t){e.categories=t,document.getElementById("spinner").style.display="none",document.getElementById("foot_bar").style.display="none";var n="";b.isLogged()?(e.report.name=b.name,e.report.email=b.email,e.report.password_sign_in=b.password,e.report.phone=b.phone,n="templates/pmb-offline-wizard.html"):n="templates/pmb-offline-wizard.html",T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/pmb-offline-wizard.html",{scope:e,animation:"slide-in-up"}).then(function(t){T.activeModal=t,T.activeModal.show().then(function(){var t=e.report.categorygroup,n=angular.element(document.querySelector("#categoriesSelect"));n.val(t),e.update_subcategories();var o=e.report.category,r="#subcategoriesSelect_"+t,a=angular.element(document.querySelector(r));a.val(o)})})},e.update_subcategories=function(){var t=document.getElementsByClassName("subcategory-active");"undefined"!=t&&t.length>0&&(t[0].className="subcategory-hidden");var n=e.report.categorygroup,o=document.getElementById("subcategoriesSelect_"+n);o.className="subcategory-active",document.getElementById("subcategoriesSelectContainer").style.display="block"},e.abuse=function(){var t=d.show({template:'Nombre: <input type="text" id="abuse_name"><br/>Email: <input type="text" id="abuse_email"><br/>Asunto: <input type="text" id="abuse_subject"><br/>Mensaje<textarea rows="6" id="abuse_message"></textarea><div id="error_container_inside"></div>',title:"Denunciar abuso",subTitle:"Estás reportando por abusiva al siguiente reporte, que contiene información personal, o similar:",scope:e,buttons:[{text:"Cancelar"},{text:"<b>Enviar</b>",type:"button-positive",onTap:function(t){var n=new Array;return e.abuse_email=document.getElementById("abuse_email").value,e.abuse_name=document.getElementById("abuse_name").value,e.abuse_subject=document.getElementById("abuse_subject").value,e.abuse_message=document.getElementById("abuse_message").value,n.push(e.create_field_array("Nombre","notNull",e.abuse_name)),n.push(e.create_field_array("Email","email",e.abuse_email)),n.push(e.create_field_array("Asunto","notNull",e.abuse_subject)),n.push(e.create_field_array("Mensaje","notNull",e.abuse_message)),B.check_fields(n,"error_container_inside")?e.abuse_email:void t.preventDefault()}}]});t.then(function(t){if(t){var n=_.abuse(e.abuse_email,e.report_detail_id,e.abuse_name,abuse_subject,e.abuse_message);n.then(function(t){S.show_alert("Denuncia enviada","Gracias por tus comentarios. ¡Nos pondremos en contacto con usted tan pronto como nos sea posible!"),e.abuse_name=null,e.abuse_email=null,e.abuse_subject=null,e.abuse_message=null})}})},e.send_comment=function(){var t=new Array;t.push(e.create_field_array("Comentario","notNull",e.comment.update)),B.check_fields(t,"error_container_inside")&&(comment_sent=_.comment(e.comment),null==e.comment.photo?comment_sent.success(function(t,n,o,r){e.back_to_map(!0)}).error(function(t,n,o,r){B.show_error_message("error_container_inside",n),e.back_to_map(!1)}):comment_sent.then(function(t){e.back_to_map(!0)},function(e){},function(t){E(function(){e.uploadProgress=t.loaded/t.total*100,document.getElementById("sent_label").innerHTML="Enviado: "+Math.round(e.uploadProgress)+"%"})}))},e.subscribe=function(){if(b.isLogged()){var t=S.confirmPopup("Subscribirse","¿Está seguro que desea recibir un correo a la dirección "+b.email+" cuando se dejen comentarios sobre este problema?");t.then(function(t){if(t){var n=_.subscribe(b.email,e.report_detail_id);n.then(function(e){S.show_alert("Confirme su correo","Se ha enviado un link a la dirección "+b.email+" para confirmar su correo. Luego de esto comenzarán a llegarle las alertas sobre nuevos comentarios.")})}})}else{var t=S.askForOneValuePopUp(e,"Subscribirse","Por favor, ingrese un correo al que desea recibir mensajes cuando se dejen comentarios sobre este problema.","Email","email");t.then(function(t){if(t){e.one_value_popup=t;var n=_.subscribe(e.one_value_popup,e.report_detail_id);n.then(function(t){S.show_alert("Confirme su correo","Se ha enviado un link a la dirección "+e.one_value_popup+" para confirmar su correo. Luego de esto comenzarán a llegarle las alertas sobre nuevos comentarios."),e.one_value_popup=null})}})}},e.hide=function(){if(b.isLogged()){var t=S.confirmPopup("Ocultar","¿Está seguro de que desea ocultar su reporte? Este no aparecerá más ni en la página ni en la aplicación si es ocultado.");t.then(function(t){if(t){var n=_.hide(e.report_detail_id);n.then(function(e){S.show_alert("Ocultar","Se ha ocultado el reporte. No será visible en el futuro.")})}})}},e.confirmReport=function(){if(R.isOnline()){var t=new Array;if(t.push(e.create_field_array("Seleccione una subcategoría","notNull",e.report.category)),t.push(e.create_field_array("Título","notNull",e.report.title)),t.push(e.create_field_array("Detalles","notNull",e.report.detail)),B.check_fields(t,"error_container")){var n=_.report(e.report);if(document.getElementById("spinner-inside-modal").style.display="block",null==e.report.file)n.success(function(t,n,o,r){B.http_data_response_is_successful(t,"error_container")?(e.back_to_map(!0),e.loadPinsLayer()):e.back_to_map(!1)}).error(function(t,n,o,r){B.show_error_message("error_container",n),e.back_to_map(!1)});else{var o=e.report;n.then(function(t){console.log(t);var n=JSON.parse(t.response);B.http_data_response_is_successful(n,"error_container")?(e.back_to_map(!0),e.loadPinsLayer(),p.getMap().then(function(e){var t=o.lat;t-=6e-4,e.setView(new L.LatLng(t,o.lon),18)})):(console.log(n),e.back_to_map(!1))},function(t){console.log(t),e.back_to_map(!0),e.loadPinsLayer(),p.getMap().then(function(e){var t=o.lat;t-=6e-4,e.setView(new L.LatLng(t,o.lon),18)})},function(e){})}}else e.back_to_map(!1)}else e.save_offline_report().then(function(t){e.back_to_map(!0),e.list_reports(),S.show_alert("Envío pendiente","El reporte se ha guardado en su dispositivo y se enviará cuando utilice esta aplicación conectado a internet")})},e.next=function(){I.next()},e.previous=function(){I.previous()},e.confirmReportWithLogin=function(){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var t=new Array;t.push(e.create_field_array("Email","email",e.report.email)),t.push(e.create_field_array("Contraseña","notNull",e.report.password_sign_in)),t.push(e.create_field_array("Seleccione una subcategoría","notNull",e.report.category)),t.push(e.create_field_array("Título","notNull",e.report.title)),t.push(e.create_field_array("Detalles","notNull",e.report.detail)),B.check_fields(t,"error_container")?v.sign_in(e.report.password_sign_in,e.report.email).then(function(t){B.http_response_is_successful(t,"error_container")?(b.save_user_data(t.data.name,e.report.email,e.report.password_sign_in,t.data.identity_document,t.data.phone,t.data.picture_url),t.data.from_body&&(b.from_body=t.data.from_body),w.saveUser(t.data.name,e.report.email,e.report.password_sign_in,t.data.identity_document,t.data.phone,t.data.picture_url),e.set_user_picture(1),e.confirmReport()):e.back_to_map(!1)},function(t){B.show_error_message("error_container",t.statusText),e.back_to_map(!1)}):e.back_to_map(!1)}else e.save_offline_report().then(function(t){e.back_to_map(!0),e.list_reports(),S.show_alert("Envío pendiente","El reporte se ha guardado en su dispositivo y se enviará cuando utilice esta aplicación conectado a internet")})},e.save_offline_report=function(){var t=new Date,n=t.getDate(),o=t.getMonth();o+=1;var r=t.getFullYear();return e.report.date=n+"/"+o+"/"+r,w.saveReport(e.report)},e.back_to_map=function(e){e?(T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block",document.getElementById("spinner-inside-modal").style.display="none"):document.getElementById("spinner-inside-modal").style.display="none"},e.cancelReport=function(){T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block"},e.image=null,e.addImage=function(t,n,r){console.log(t),console.log(n),console.log(r),e.isUserPhoto=n,e.isCommentPhoto=r;var a=Camera.PictureSourceType.CAMERA,i=!1,l=!1;1==t&&(a=Camera.PictureSourceType.PHOTOLIBRARY,i=!1,l=!1);var s={quality:50,destinationType:Camera.DestinationType.FILE_URI,sourceType:a,allowEdit:!1,correctOrientation:i,encodingType:Camera.EncodingType.JPEG,popoverOptions:CameraPopoverOptions,saveToPhotoAlbum:l,mediaType:Camera.MediaType.PICTURE,targetWidth:360,targetHeight:360};console.log(s),o.getPicture(s).then(function(t){function n(t){console.log(t),window.resolveLocalFileSystemURL(t,function(t){console.log("got file: "+t.toURL());var n=t.toURL();1==e.isUserPhoto?e.profile.picture_url=n:1==e.isCommentPhoto?e.comment.file=n:(e.report.file=n,console.log(e.report)),e.imgURI=n},function(){console.log("Error en file entry: "+t),o(t)})}function o(e){window.resolveLocalFileSystemURL(e,r,i)}function r(e){var t=e.fullPath.substr(e.fullPath.lastIndexOf("/")+1),n=l()+t;window.resolveLocalFileSystemURL(cordova.file.dataDirectory,function(t){e.copyTo(t,n,a,i)},i)}function a(t){e.$apply(function(){e.image=t.nativeURL})}function i(e){}function l(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;n<5;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e}console.log(t),n(t)},function(e){console.log(e)})},e.urlForImage=function(){var t="http://placehold.it/200x200";if(e.image){var n=e.image.substr(e.image.lastIndexOf("/")+1);t=cordova.file.dataDirectory+n}return t},e.list_reports=function(){e.hide_special_divs(),e.set_active_option("button-list-reports"),document.getElementById("user-options-menu").style.display="none",R.isOnline()?document.getElementById("report-list-scroll").style.display="block":e.list_offline_reports()},e.list_offline_reports_menu=function(){e.hide_special_divs(),e.list_offline_reports()},e.list_offline_reports=function(){p.getMap().then(function(t){e.cleanOfflineMarkers(t);var n=w.getAllReports(),o='<ion-scroll direction="y" id="offline-report-list-scroll"><div class="scroll"><div id="report-list-offline">';e.offlineReports=new Array,e.offlineReportsMarkers=new Array,n.then(function(n){o+="<h3><b>Reportes guardados en el dispositivo y pendientes de envío:</b></h3>",null!=n&&n.rows.length>0?(n.rows.forEach(function(n){var r=n.doc;e.offlineReports[r._id]=r,o+=e.add_offline_report_div(r);var a={alt:"Reporte pendiente de envío"},l=L.marker([r.lat,r.lon],a).addTo(t),s='<a class="text report-link" ng-click="editOfflineReport(\''+r._id+"')\"><p>"+r.title+'</p></a><p class="offline-pending">(pendiente de envío)</p>',c=i(s)(e);l.bindPopup(c[0]),e.offlineReportsMarkers[r._id]=l}),o+="<br/><h3><a ng-click='send_offline_reports_from_menu()'>- Enviar todos los reportes pendientes</a></h3>"):o+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",o+='</div></div><div class="scroll-bar scroll-bar-v"><div class="scroll-bar-indicator scroll-bar-fade-out"></div></div></ion-scroll>';var r=angular.element(document.querySelector("#offline-report-list-container"));r.html(o);i(r.contents())(e);e.$broadcast("scroll.resize")})["catch"](function(e){o+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",o+='</div></div><div class="scroll-bar scroll-bar-v"><div class="scroll-bar-indicator scroll-bar-fade-out"></div></div></ion-scroll>'}),document.getElementById("offline-report-list-container").style.display="block"})},e.list_reports_and_go=function(t){e.set_active_option("button-list-reports"),document.getElementById("user-options-menu").style.display="none",R.isOnline()?document.getElementById("report-list-scroll").style.display="block":p.getMap().then(function(n){n.eachLayer(function(e){"undefined"!=e._url&&null!=e._url||n.removeLayer(e)});var o=w.getAllReports(),r='<div id="report-list-offline">';e.offlineReports=new Array,e.offlineReportsMarkers=new Array,o.then(function(o){r+="<h3><b>Reportes guardados en el dispositivo y pendientes de envío:</b></h3>",null!=o&&o.rows.length>0?o.rows.forEach(function(o){var a=o.doc;e.offlineReports[a._id]=a,r+=e.add_offline_report_div(a);var l=L.marker([a.lat,a.lon]).addTo(n),s='<a class="text report-link" ng-click="editOfflineReport(\''+a._id+"')\"><p>"+a.title+'</p></a><p class="offline-pending">(pendiente de envío)</p>',c=i(s)(e);l.bindPopup(c[0]),e.offlineReportsMarkers[a._id]=l,a._id==t&&goToOfflineReport(t)}):r+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",r+="</div>";var a=angular.element(document.querySelector("#offline-report-list-container"));a.html(r);i(a.contents())(e)})["catch"](function(e){r+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",r+="</div>"}),document.getElementById("offline-report-list-container").style.display="block"})},e.goToOfflineReport=function(t){var n=e.offlineReports[t];p.getMap().then(function(o){var r=n.lat;r-=.001,e.map.center.lat=r,e.map.center.lng=n.lon,o.setView(new L.LatLng(r,n.lon),16),e.offlineReportsMarkers[t].openPopup()})},e.add_offline_report_div=function(e){var t='<div id="report-container-'+e._id+'" ng-click="goToOfflineReport(\''+e._id+'\')" class="report-inside-list-offline">';return t+='<div class="report-in-list-icon-offline"></div>',t+='<div class="report-in-list-info">',t=t+'<p id="report-title-'+e._id+'" class="report-in-list-title">'+e.title+"</p>",t=t+'<p id="report-category-'+e._id+'" class="report-in-list-category">'+e.category+"</p>",t=t+'<p id="report-date-'+e._id+'" class="report-in-list-date">'+e.date+"</p>",t=t+'<p id="report-date-'+e._id+'" class="report-in-list-actions"><a ng-click="editOfflineReport(\''+e._id+"')\">Editar</a>&nbsp; <a ng-click=\"deleteOfflineReport('"+e._id+"')\">Eliminar</a></p>",t+='<div class="report-mini-icons">',null!=e.file&&"undefined"!=e.file&&(t+='<img class="report-mini-icon" src="./img/icon-camera.png" />'),t+='<img class="report-mini-icon" src="./img/icon-tags.png" />',t+="</div></div></div>"},e.help=function(){R.isOnline()?(document.getElementById("spinner").style.display="block",e.set_active_option("button-faq"),e.hide_special_divs(),h.all().success(function(n){T.checkNoModalIsOpen(),e.faq=t.trustAsHtml(n),document.getElementById("spinner").style.display="none",u.fromTemplateUrl("templates/faq.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){T.activeModal=t,T.activeModal.show().then(function(){var t=angular.element(document.querySelector("#faq-container-div"));i(t.contents())(e)})})})):S.show_alert("Sin conexión a internet","Para ver la ayuda debe estar conectado a internet")},e.scrollMe=function(e){k.hash(e);var t=C.$getByHandle("content");t.anchorScroll()},e.close_faq_modal=function(){T.checkNoModalIsOpen()},e.set_active_option=function(e){document.getElementById("button-report").className="option-inactive",document.getElementById("button-list-reports").className="option-inactive",document.getElementById("button-faq").className="option-inactive",document.getElementById("button-find-me").className="option-inactive",document.getElementById(e).className="option-active"},e.hide_special_divs=function(){document.getElementById("report-list-scroll").style.display="none",document.getElementById("offline-report-list-container").style.display="none",document.getElementById("user-options-menu").style.display="none",document.getElementById("map_crosshair").style.display="none",document.getElementById("map_crosshair_button").style.display="none"},e.viewReportDetails=function(n){e.report_detail_id=n,R.isOnline()?(document.getElementById("spinner").style.display="block",e.hide_special_divs(),g.getById(n).then(function(o){e.report_detail=t.trustAsHtml(o.data.replace("overflow:auto;","").replace('src="/','src="'+m.baseURL).replace("url(/","url("+m.baseURL+m.baseCobrand+"/").replace("url(/","url("+m.baseURL+m.baseCobrand+"/")),document.getElementById("spinner").style.display="none",e.comment={submit_update:1,id:e.report_detail_id,may_show_name:!0,add_alert:!0,fixed:!1,update:"",name:null,form_rznvy:null,photo:null},T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/report-detail.html",{scope:e,animation:"slide-in-up"}).then(function(t){T.activeModal=t,T.activeModal.show().then(function(){var t=angular.element(document.querySelector("#report-detail-container-div"));i(t.contents())(e);if(b.isLogged()){if(document.getElementById("comment_container").style.display="block",e.comment.name=b.name,e.comment.form_rznvy=b.email,null!=b.from_body){var o=e.featureReports[n].feature.geometry.coordinates[0],r=e.featureReports[n].feature.geometry.coordinates[1];_.getAreas(o,r).then(function(t){jsonObject=t.data,e.isBodyAdmin=!1;for(var o in jsonObject){var r=o,a=jsonObject[o];"CIU"==a.type&&b.from_body==r&&(e.isBodyAdmin=!0,e.comment.new_category=e.featureReports[n].feature.properties.category,e.comment.state=e.featureReports[n].feature.properties.state,y.allFromBodyArea(r).then(function(t){jsonAreaObject=t.data,e.allCategoriesFromBoyArea=[];for(var n in jsonAreaObject)e.allCategoriesFromBoyArea.push(n);E(function(){document.getElementById("new_category_select").value=e.comment.new_category},500)}))}})}else e.isBodyAdmin=!1;document.getElementById("comment_container").style.display="block"}else document.getElementById("comment_container").style.display="none"})})},function(e){document.getElementById("spinner").style.display="none",B.show_error_message_popup("ERROR AL CARGAR DATOS DEL REPORTE: "+e.statusText)})):S.show_alert("Sin conexión a internet","Para ver los detalles del reporte, debe estar conectado a internet.")},e.close_report_detail_modal=function(){T.checkNoModalIsOpen(),e.report_detail_id=null},e.locate=function(){a.getCurrentPosition().then(function(t){e.map.center.lat=t.coords.latitude,e.map.center.lng=t.coords.longitude,e.map.center.zoom=15,e.map.markers.now={lat:t.coords.latitude,lng:t.coords.longitude,message:"You Are Here",focus:!0,draggable:!1}},function(e){})},e.addMapControls=function(){document.getElementById("map_crosshair").style.display="block",document.getElementById("map_crosshair_button").style.display="block"},e.startReportFromCrosshairs=function(){p.getMap().then(function(t){var n=t.getCenter();f.save_new_report_position(n.lat,n.lng),e.new_report(1)})},e.getOnlyCategoryIconURL=function(e){var t=e.replace("-proceso","");return t=t.replace("-resuelto","")},e.hideOffScreenPins=function(){p.getMap().then(function(t){var n=t.getBounds(),o=Object.keys(e.reportsByState);e.reportsVisible=[],o.forEach(function(o){e.reportsByState[o].forEach(function(o,r){var a=n.contains(o.getLatLng());a?a&&(t.addLayer(o),e.reportsVisible.push(o.feature)):t.removeLayer(o)})})})},e.removeAllPins=function(){p.getMap().then(function(t){var n=(t.getBounds(),Object.keys(e.reportsByState));e.reportsVisible=[],n.forEach(function(n){e.reportsByState[n].forEach(function(e,n){t.removeLayer(e)})})})},e.loadPinsLayer=function(){document.getElementById("spinner")&&(document.getElementById("spinner").style.display="block"),e.removeAllPins(),e.reportsByState={},g.getAll().then(function(t){var n=t.data.features;e.reports=t.data.features,n.forEach(function(t){if(t.properties){var n=t.geometry.coordinates[0],o=t.geometry.coordinates[1],r=m.baseURL+t.properties.pin_url,a=L.icon({iconUrl:r,iconSize:[29,34],iconAnchor:[14,34],popupAnchor:[14,-8]}),l=L.marker([o,n],{icon:a});if(l.feature=t,e.featureReports[l.feature.properties.id]=l,e.reportsByState["state-"+t.properties.state]||(e.reportsByState["state-"+t.properties.state]=[]),e.reportsByState["state-"+t.properties.state].push(l),t.properties){reportId=t.properties.id,descripcion=t.properties.title,html='<a class="text report-link" ng-click="viewReportDetails('+reportId+')"><p>'+descripcion+"</p></a>";var s=i(html)(e);l.bindPopup(s[0])}}}),document.getElementById("spinner").style.display="none",e.hideOffScreenPins()})},e.addReportsLayer=function(){if(null!=e.jsonLayer)return!1;var t=m.baseURL;buildPopup=function(e,t){var n=e[3],o=e[4],r='<a class="text report-link" ng-click="viewReportDetails('+n+')"><p>'+o+"</p></a>";return r},onEachFeature=function(t,n){var o,r,a;if(t.properties){r=t.properties.id,a=t.properties.title,o='<a class="text report-link" ng-click="viewReportDetails('+r+')"><p>'+a+"</p></a>";var l=i(o)(e);n.bindPopup(l[0])}},l=new L.LayerJSON({url:t+"/ajax_geo?bbox={bbox}",locAsGeoJSON:!0,onEachFeature:onEachFeature}),e.jsonLayer=l,p.getMap().then(function(e){e.addLayer(l)}),l.on("dataloaded",function(t){e.reports=t.data.features}),l.on("layeradd",function(n){n.layer.eachLayer(function(n){var o=L.icon({iconUrl:t+"/"+n.feature.properties.pin_url,iconSize:[29,34],iconAnchor:[14,34],popupAnchor:[0,-8]});n.setIcon(o),void 0===e.featureReports[n.feature.properties.id]&&(e.featureReports[n.feature.properties.id]=n)})})},e.goToReport=function(t){var n=document.getElementsByClassName("report-inside-list-active");n.length>0&&(n[0].className="report-inside-list");var o=document.getElementById("report-container-"+t.properties.id);o.className="report-inside-list-active";var r=e.featureReports[t.properties.id];p.getMap().then(function(e){var t=r.getLatLng(),n=t.lat;n-=6e-4,e.setView(new L.LatLng(n,t.lng),18),r.openPopup()})},e.model=[],e.externalModel=[],e.selectedItems=[],e.preselectedSearchItems=[],e.clickedValueModel="",e.removedValueModel="",e.getTestItems=function(e){var t,n=[];return e&&(t={items:[{id:"1",name:e+"1",view:"view: "+e+"1"},{id:"2",name:e+"2",view:"view: "+e+"2"},{id:"3",name:e+"3",view:"view: "+e+"3"}]},n=t.items),n},e.itemsRemoved=function(t){e.removedValueModel=t},e.user_options=function(){var t=document.getElementById("user-options-menu");if("block"==t.style.display)t.style.display="none";else{var n=b.name;null==n?e.show_anonymous_menu():e.show_user_menu()}},e.show_anonymous_menu=function(){var t=document.getElementById("user-options-menu"),n="<div id='auth_options'><div class='nonauth-link' ng-click='show_login_modal()'>Iniciar sesión</div>";n+="<div class='nonauth-link' ng-click='show_sign_up_modal()'>Registrarse</div></div>",t.innerHTML=n,i(t)(e),t.style.height="120px",t.style.width="150px",
t.style.display="block"},e.show_user_menu=function(){var t=document.getElementById("user-options-menu"),n=b.name+"<div id='auth_options'><div class='user-logged-link' ng-click='show_edit_profile_modal()'>Mi perfil</div>";n+="<div class='user-logged-link' ng-click='change_password()'>Cambiar contraseña</div>",n+="<div class='user-logged-link' ng-click='list_offline_reports_menu()'>Reportes pendientes</div>",n+="<div class='user-logged-link' ng-click='sign_out()'>Cerrar sesión</div></div>",t.innerHTML=n,i(t)(e),t.style.height="220px",t.style.width="200px",t.style.display="block"},e.forgot_password=function(){T.checkNoModalIsOpen(),e.nonauth=new Array,e.nonauth.email="",u.fromTemplateUrl("templates/forgot_password.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("user-options-menu").style.display="none",T.activeModal=e,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.forgot_password_ok=function(){document.getElementById("spinner-inside-modal").style.display="block";var t=new Array;t.push(e.create_field_array("Email","email",e.nonauth.email)),B.check_fields(t,"error_container")?(document.getElementById("spinner-inside-modal").style.display="none",v.password_recovery(e.nonauth.email).then(function(e){"Email successfuly sended"==e.data.message?(T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block",E(function(){S.show_alert("Instrucciones enviadas con éxito","Se han enviado intrucciones para restablecer tu contraseña al correo proporcionado anteriormente.")},1e3)):B.show_error_message("error_container",e.data.message)})):document.getElementById("spinner-inside-modal").style.display="none"},e.change_password=function(){T.checkNoModalIsOpen(),e.nonauth=new Array,e.nonauth.oldPassword="",e.nonauth.newPassword="",e.nonauth.confirmPassword="",u.fromTemplateUrl("templates/change_password.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("user-options-menu").style.display="none",T.activeModal=e,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.change_password_ok=function(){document.getElementById("spinner-inside-modal").style.display="block";var t=new Array;t.push(e.create_field_array("Contraseña actual","notNull",e.nonauth.oldPassword)),t.push(e.create_field_array("Nueva contraseña","notNull",e.nonauth.newPassword)),t.push(e.create_field_array("Confirmar nueva contraseña","notNull",e.nonauth.confirmPassword)),t.push(e.create_field_array_with_twoFields("Nueva contraseña y Confirmar contraseña","equalsTo",e.nonauth.newPassword,e.nonauth.confirmPassword)),B.check_fields(t,"error_container")?v.password_change(b.email,e.nonauth.oldPassword,e.nonauth.newPassword,e.nonauth.confirmPassword).then(function(t){document.getElementById("spinner-inside-modal").style.display="none","Password successfuly changed"==t.data.message?(b.save_user_data(b.name,b.email,e.nonauth.newPassword,b.identity_document,b.phone,b.picture_url),w.saveUser(b.name,b.email,b.password,b.identity_document,b.phone,b.picture_url),T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block"):B.show_error_message("error_container","Se ha producido un error al cambiar su clave, por favor intente más tarde")}):document.getElementById("spinner-inside-modal").style.display="none"},e.create_field_array=function(e,t,n){var o=new Array;return o.name=e,o.type=t,o.value=n,o},e.create_field_array_with_twoFields=function(e,t,n,o){var r=new Array;return r.name=e,r.type=t,r.value=n,r.secondValue=o,r},e.fix_fb_image_link=function(e){if(e.indexOf("http://graph.facebook.com")>=0){var t=e.split("http://graph.facebook.com"),n="http://graph.facebook.com"+t[1];return n}return e},e.sign_in=function(t,n){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var o=new Array;o.push(e.create_field_array("Email","email",t)),o.push(e.create_field_array("Contraseña","notNull",n)),B.check_fields(o,"error_container")?v.sign_in(n,t).then(function(o){B.http_response_is_successful(o,"error_container")?(o.data.picture_url=e.fix_fb_image_link(o.data.picture_url),b.save_user_data(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),w.saveUser(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),o.data.from_body&&(b.from_body=o.data.from_body),document.getElementById("spinner-inside-modal").style.display="none",e.close_login_modal(),e.set_user_picture(1)):document.getElementById("spinner-inside-modal").style.display="none"},function(e){document.getElementById("spinner-inside-modal").style.display="none",B.show_error_message("error_container",e.statusText)}):document.getElementById("spinner-inside-modal").style.display="none"}else S.show_alert("Sin conexión a internet","Para iniciar sesión debe estar conectado a internet")},e.sign_in_ajax=function(t,n){v.sign_in(n,t).then(function(o){return B.http_response_is_successful_ajax(o)?(o.data.picture_url=e.fix_fb_image_link(o.data.picture_url),b.save_user_data(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),w.saveUser(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),o.data.from_body&&(b.from_body=o.data.from_body),e.set_user_picture(1),1):0},function(e){return 0})},e.sign_out=function(){b.erase_user_data(),w.eraseUser(),document.getElementById("spinner").style.display="none",e.set_user_picture(0),document.getElementById("user-options-menu").style.display="none"},e.show_edit_profile_modal=function(){e.profile=new Array,e.profile.email=b.email,e.profile.password="",e.profile.fullname=b.name,e.profile.new_email=b.email,e.profile.id_doc=b.identity_document,e.profile.telephone=b.phone,e.profile.picture_url=null,null!=b.picture_url?(e.actual_photo=b.picture_url,"url(./img/icon-user-anonymous.png)"==e.actual_photo&&(e.actual_photo="./img/icon-user-anonymous.png"),T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/edit_profile_with_photo.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("user-options-menu").style.display="none",T.activeModal=e,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})):(e.actual_photo=null,T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/edit_profile.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),T.activeModal=t,document.getElementById("foot_bar").style.display="none",T.activeModal.show()}))},e.close_edit_profile_modal=function(){document.getElementById("foot_bar").style.display="block",T.checkNoModalIsOpen()},e.edit_profile_ok=function(){e.edit_profile(b.email,b.password,e.profile.fullname,e.profile.new_email,e.profile.id_doc,e.profile.telephone,e.profile.picture_url)},e.edit_profile=function(t,n,o,r,a,i,l){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var s=new Array;if(s.push(e.create_field_array("Correo electrónico","email",r)),s.push(e.create_field_array("Cédula de Identidad","iddoc_uy",a)),s.push(e.create_field_array("Nombre y apellido","two_words",o)),B.check_fields(s,"error_container")){var c=v.edit_user(t,n,o,r,a,i,l);null==l||""==l?c.success(function(t,o,r,a){document.getElementById("sent_label").innerHTML="Enviado: 100%",B.http_data_response_is_successful(t,"error_container")?(b.save_user_data(t.name,t.email,n,t.identity_document,t.phone,t.picture_url),document.getElementById("spinner-inside-modal").style.display="none",e.close_edit_profile_modal(),e.check_user_logged()):document.getElementById("spinner-inside-modal").style.display="none"}).error(function(e,t,n,o){B.show_error_message("error_container",t),document.getElementById("spinner-inside-modal").style.display="none"}):c.then(function(t){var o=JSON.parse(t.response);B.http_data_response_is_successful(o,"error_container")?(b.save_user_data(o.name,o.email,n,o.identity_document,o.phone,o.picture_url),document.getElementById("spinner-inside-modal").style.display="none",e.close_edit_profile_modal(),e.check_user_logged()):document.getElementById("spinner-inside-modal").style.display="none"},function(e){var t="Código: "+e.code;t=t+" Origen: "+e.source,t=t+" Destino: "+e.target,t=t+" http_status: "+e.http_status,t=t+" Body: "+e.body,t=t+" Exception: "+e.exception,B.show_error_message("error_container","Hubo un error en el envío: "+t),document.getElementById("spinner-inside-modal").style.display="none"},function(t){E(function(){e.uploadProgress=t.loaded/t.total*100,document.getElementById("sent_label").innerHTML="Enviado: "+Math.round(e.uploadProgress)+"%"})})}else document.getElementById("spinner-inside-modal").style.display="none"}else S.show_alert("Sin conexión a internet","Para editar su perfil debe estar conectado a internet")},e.show_login_modal=function(){e.nonauth=new Array,e.nonauth.email="",e.nonauth.password="",T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/log_in.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),T.activeModal=t,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.login_ok=function(){e.sign_in(e.nonauth.email,e.nonauth.password)},e.close_login_modal=function(){document.getElementById("foot_bar").style.display="block",T.checkNoModalIsOpen()},e.show_sign_up_modal=function(){e.newuser=new Array,e.newuser.email="",e.newuser.password="",e.newuser.fullname="",e.newuser.id_doc="",e.newuser.telephone="",T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/sign_up.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),T.activeModal=t,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.close_sign_up_modal=function(){document.getElementById("foot_bar").style.display="block",T.checkNoModalIsOpen()},e.sign_up=function(t,n,o,r,a){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var i=new Array;i.push(e.create_field_array("Correo electrónico","email",t)),i.push(e.create_field_array("Contraseña","notNull",o)),i.push(e.create_field_array("Cédula de Identidad","iddoc_uy",r)),i.push(e.create_field_array("Nombre y apellido","two_words",n)),B.check_fields(i,"error_container")?v.create_user(t,n,o,r,a).then(function(i){if(B.http_response_is_successful(i,"error_container")){b.save_user_data(n,t,o,r,a,null),document.getElementById("spinner-inside-modal").style.display="none",e.close_sign_up_modal();var l=d.alert({title:"Usuario creado con éxito",template:i.data.message});l.then(function(e){})}else document.getElementById("spinner-inside-modal").style.display="none"},function(e){document.getElementById("spinner-inside-modal").style.display="none",B.show_error_message("error_container",e.statusText)}):document.getElementById("spinner-inside-modal").style.display="none"}else S.show_alert("Sin conexión a internet","Para iniciar registrarse debe estar conectado a internet")},e.sign_up_ok=function(){e.sign_up(e.newuser.email,e.newuser.fullname,e.newuser.password,e.newuser.id_doc,e.newuser.telephone)},e.check_user_logged=function(){var t=b.name;if(null==t){var n=w.getUser();n.then(function(t){null!=t.name&&""!=t.name&&"undefined"!=t.name?e.sign_in_ajax(t.email,t.password):e.set_user_picture(0)})["catch"](function(t){e.set_user_picture(0)})}else null==b.picture_url||""==b.picture_url?e.set_user_picture(0):e.set_user_picture(1)},e.set_offline_user=function(){var t=b.name;if(null==t){var n=w.getUser();n.then(function(t){null!=t.name&&""!=t.name&&"undefined"!=t.name?b.save_user_data(t.name,t.email,t.password,t.identity_document,t.phone,t.picture_url):e.set_user_picture(0)})["catch"](function(t){e.set_user_picture(0)})}else null==b.picture_url||""==b.picture_url?e.set_user_picture(0):e.set_user_picture(1)},e.set_user_picture=function(t){document.getElementById("user_picture");0==t?e.user_cached_image="./img/icon-user-anonymous.png":null!=b.picture_url&&""!=b.picture_url?e.user_cached_image=b.picture_url:e.user_cached_image="./img/icon-user-anonymous.png"},e.find_me=function(){e.set_active_option("button-find-me"),e.hide_special_divs();var t={timeout:1e4,enableHighAccuracy:!0};a.getCurrentPosition(t).then(function(t){e.map.center.lat=t.coords.latitude,e.map.center.lng=t.coords.longitude,f.save_new_report_position(t.coords.latitude,t.coords.longitude),R.isOnline()?e.map.center.zoom=18:e.map.center.zoom=16,e.map.markers.now={lat:t.coords.latitude,lng:t.coords.longitude,message:"<p align='center'>Te encuentras aquí <br/> <a ng-click='new_report(1);'>Iniciar reporte en tu posición actual</a></p>",focus:!0,draggable:!1,getMessageScope:function(){return e}}},function(t){e.openCouncilSelector()})};e.$on("leafletDirectiveMap.contextmenu",function(t,n){e.hide_special_divs(),console.log(n.leafletEvent.latlng.lat),console.log(n.leafletEvent.latlng.lng),f.save_new_report_position(n.leafletEvent.latlng.lat,n.leafletEvent.latlng.lng),e.new_report(1)}),e.select_imm=function(){e.close_council_modal(),f.selectCouncil("289"),x.centerMapOnCoords(-34.901113,-56.164531,14)},e.select_idr=function(){e.close_council_modal(),f.selectCouncil("255"),x.centerMapOnCoords(-30.8997469,-55.5434686,14)},e.select_irn=function(){e.close_council_modal(),f.selectCouncil("360"),x.centerMapOnCoords(-33.124972,-58.303736,14)},e.openCouncilSelector=function(){u.fromTemplateUrl("templates/council_selector_with_back_button.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){f.council_modal=e,f.council_modal.show().then(function(){})})},e.close_council_modal=function(){f.council_modal.hide(),f.council_modal.remove()}}]),pmb_im.controllers.controller("PMBCtrl",["$scope","$state","leafletData","PMBService","ReportService","locationAPI","MapService","_","Loader","LocationsService","$ionicModal",function(e,t,n,o,r,a,i,l,s,c,u){e.reportButton={text:"Reportar",state:"unConfirmed"},e.$on("$ionicView.afterEnter",function(){n.getMap();""!=c.new_report_lat?i.centerMapOnCoords(c.new_report_lat,c.new_report_lng,16):""!=c.initial_lat?i.centerMapOnCoords(c.initial_lat,c.initial_lng,16):e.openCouncilSelector()}),e.select_imm=function(){e.close_council_modal(),c.selectCouncil("289"),i.centerMapOnCoords(-34.901113,-56.164531,14)},e.select_idr=function(){e.close_council_modal(),c.selectCouncil("255"),i.centerMapOnCoords(-30.8997469,-55.5434686,14)},e.select_irn=function(){e.close_council_modal(),c.selectCouncil("360"),i.centerMapOnCoords(-33.124972,-58.303736,14)},e.openCouncilSelector=function(){u.fromTemplateUrl("templates/council_selector_with_back_button.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){c.council_modal=e,c.council_modal.show().then(function(){})})},e.close_council_modal=function(){c.council_modal.hide(),c.council_modal.remove()},e.searchMode="calle.lugar",e.location={calle:null,esquina:null,lugar:null};var d={tipo:null,pathParams:[]};e.$on("$stateChangeSuccess",function(){e.ionAutocompleteElement=angular.element(document.getElementsByClassName("ion-autocomplete")),e.ionAutocompleteElement.bind("touchend click focus",e.onClick)}),e.initReport=function(){var t,o=L.icon({iconUrl:"img/pin@x2.png",iconSize:[70,110],iconAnchor:[-18,55]});"unConfirmed"==e.reportButton.state&&(e.reportButton.text="Confirmar",e.reportButton.state="about2Confirm",n.getMap().then(function(n){t=new L.marker(n.getCenter(),{icon:o,clickable:!1}).addTo(n),r._new(),r.current.setLatLng(n.getCenter()),e.ionAutocompleteElement=angular.element(document.getElementsByClassName("ion-autocomplete")),e.ionAutocompleteElement.bind("touchend click focus",e.onClick)}))},e.isNumeric=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},e.searchLocation=function(t){var n;if(t&&t.length>=2){if("calle.lugar"==e.searchMode)n=a.searchLocationByStr(t);else{if(e.isNumeric(t.trim())){var o=[],r={descTipo:"NUMERO",address:t,lat:t};return o[0]=r,o}n=a.searchEsquinaByStr({calle:e.selectedItem.lat,esquina:t})}return n}return[]},e.onClick=function(){e.ionAutocompleteElement.controller("ionAutocomplete").showModal()},e.itemsClicked=function(t){if(e.clickedValueModel=t,e.selectedItem=t.item,e.ionAutocompleteElementSearch=angular.element(document.getElementsByClassName("ion-autocomplete-search")),"esquina.numero"==e.searchMode){d.pathParams=[],e.location.esquina=e.selectedItem,d.pathParams.push(e.location.calle.lat),d.pathParams.push(e.location.esquina.lat);var n="",o="";e.isNumeric(e.selectedItem.address)?(d.tipo="DIRECCION",o="door"):(d.tipo="ESQUINA",n="esquina",o="corner"),a.getLocationGeomPMB(e.location.calle.lat,e.location.esquina.lat,o).then(function(t){var o=e.location.calle.address+" "+n+" "+e.selectedItem.address;i.goToPlace(o,t.data.latitude,t.data.longitude,e),e.searchMode="calle.lugar",e.ionAutocompleteElementSearch.attr("placeholder","Buscar calle"),e.externalModel=[]})}else e.location.calle=e.selectedItem,e.searchMode="esquina.numero",e.ionAutocompleteElementSearch.attr("placeholder","Esquina o número"),e.ionAutocompleteElement.controller("ionAutocomplete").showModal(),e.preselectedSearchItems=[]},e.itemsCanceled=function(t){var n=parseInt(t.searchQuery);Number.isInteger(n)&&(d.tipo="DIRECCION",d.pathParams.push(e.location.calle.codigo),d.pathParams.push(n),a.getLocationGeom(d).then(function(t){i.goToPlace(angular.extend({nombre:e.selectedItem.nombre+" "+n},t),e),e.searchMode="calle.lugar"},function(t){s.showAlert("Error","No existe esa direccion").then(function(t){e.ionAutocompleteElement.controller("ionAutocomplete").showModal()})}))}}]),pmb_im.services.factory("AuthService",["$http","$cordovaFileTransfer","ConfigService",function(e,t,n){var o=n.baseURL+"/auth/ajax/";return{sign_in:function(t,n){return e.get(o+"sign_in",{withCredentials:!0,params:{password_sign_in:t,email:n}})},sign_out:function(t,n){return e.get(o+"sign_out",{withCredentials:!0,params:{password_sign_in:t,email:n}})},create_user:function(t,n,r,a,i){return e.get(o+"create_user",{withCredentials:!0,params:{form_email:t,name:n,password_register:r,identity_document:a,phone:i}})},password_recovery:function(t){return e.get(o+"forgot_password",{params:{login_email:t}})},password_change:function(t,n,r,a){var i="email="+t+"&password_sign_in="+n+"&new_password="+r+"&confirm="+a;return e.post(o+"change_password",i,{headers:{"Content-Type":"application/x-www-form-urlencoded"}})},edit_user:function(n,r,a,i,l,s,c){if(null!=c&&""!=c){var u={fileKey:"photo",withCredentials:!0,params:{email:n,password_sign_in:r,name:a,new_email:i,identity_document:l,phone:s}},d=!0;return t.upload(o+"edit_user",c,u,d)}return e.get(o+"edit_user",{withCredentials:!0,params:{email:n,password_sign_in:r,name:a,new_email:i,identity_document:l,phone:s}})}}}]),pmb_im.services.factory("CategoriesService",["$http","LocationsService","ConfigService","DBService",function(e,t,n,o){var r=n.baseURL+"/report/new/ajax",a=n.baseURL+"/api/categories/";return{all:function(){return e.get(r,{params:{lat:t.new_report_lat,lon:t.new_report_lng,format:"json"}})},allFromBodyArea:function(t){return e.get(a,{params:{api_key:"1234",area:t}})},getCachedCategories:function(){return o.getCategories()}}}]),pmb_im.services.factory("ConfigService",["$http",function(e){var t={};return t.baseURL="/data",ionic.Platform.isWebView()&&(t.baseURL="https://pormibarrio.freyja.datauy.org"),t.baseCobrand="/cobrands/pormibarrio",t}]),pmb_im.services.factory("ConnectivityService",["$cordovaNetwork",function(e){return{isOnline:function(){if(!ionic.Platform.isWebView())return navigator.onLine;try{return e.isOnline()}catch(t){return!0}},isOffline:function(){if(!ionic.Platform.isWebView())return!navigator.onLine;try{return!e.isOnline()}catch(t){return!1}}}}]),pmb_im.services.factory("DBService",["$q",function(e){function t(t,o,r,a,i,l){var s={_id:"user-logged",name:t,email:o,password:r,identity_document:a,phone:i,picture_url:l};n().then(function(t){return s._rev=t._rev,e.when(m.put(s))})["catch"](function(t){return e.when(m.put(s))})}function n(){return e.when(m.get("user-logged"))}function o(){e.when(m.get("user-logged")).then(function(t){return e.when(m.remove(t))})}function r(){return m=new PouchDB("mydb.db",{adapter:"cordova-sqlite",iosDatabaseLocation:"default"})}function a(t){var n=new Date,o="report_"+n.getFullYear()+(n.getMonth()+1)+n.getDate()+n.getMilliseconds();return t._id=o,e.when(m.put(t))}function i(t){return e.when(m.put(t))}function l(){return e.when(m.get("categories-list"))}function s(t){l().then(function(n){return t._rev=n._rev,e.when(m.put(t))})["catch"](function(n){return t._id="categories-list",e.when(m.put(t))})}function c(t){return e.when(m.get(t))}function u(){return e.when(m.allDocs({include_docs:!0,attachments:!1,startkey:"report",endkey:"report_"}))}function d(t){e.when(db.get(t)).then(function(t){return e.when(m.remove(t))})}function p(t){return e.when(m.remove(t))}var m;return{initDB:r,saveUser:t,getUser:n,eraseUser:o,saveReport:a,getReport:c,getAllReports:u,updateReport:i,deleteReport:d,deleteGivenReport:p,getCategories:l,saveCategories:s}}]),pmb_im.services.factory("ErrorService",["$http","$ionicPopup","ValidationService",function(e,t,n){return{http_response_is_successful:function(e,t){var n=document.getElementById(t);return 0==e.data.result?(n.innerHTML="<h3>"+e.data.message+"</h3>",n.style.display="block",!1):(n.style.display="none",!0)},http_response_is_successful_ajax:function(e){return 0!=e.data.result},http_response_is_successful_popup:function(e){if(0==e.data.result){var n=t.alert({title:"Error",template:e.data.message});return n.then(function(e){return!1}),!1}return!0},http_data_response_is_successful:function(e,t){var n=document.getElementById(t);return 0==e.result?(n.innerHTML="<h3>"+e.message+"</h3>",n.style.display="block",!1):(n.style.display="none",!0)},http_data_response_is_successful_ajax:function(e){return 0!=e.result},show_error_message:function(e,t){var n=document.getElementById(e);return n.innerHTML="<h3>"+t+"</h3>",n.style.display="block",!1},show_error_message_popup:function(e){var n=t.alert({title:"Error",template:e});return n.then(function(e){return!1}),!1},check_fields:function(e,t){var o="";if(e.forEach(function(e){"notNull"==e.type&&(n.validate_not_empty(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no puede estar vacío.</h3>')),"email"==e.type&&(n.validate_email(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no es una dirección de correo válida.</h3>')),"iddoc_uy"==e.type&&(n.validate_iddoc_uy(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no es una cédula uruguaya válida.</h3>')),"two_words"==e.type&&(n.validate_two_words(e.value)||(o=o+'<h3>- El campo "'+e.name+'" debe contener al menos dos palabras.</h3>')),"equalsTo"==e.type&&(n.validate_equalsTo(e.value,e.secondValue)||(o=o+'<h3>- Los campos "'+e.name+'" no coinciden.</h3>'))}),""==o)return!0;var r=document.getElementById(t);return r.innerHTML=o,r.style.display="block",!1}}}]),pmb_im.services.factory("FaqService",["$http","ConfigService",function(e,t){var n=t.baseURL+"/faq";return{all:function(){return e.get(n,{params:{ajax:"1"}})}}}]),pmb_im.services.factory("Loader",["$ionicLoading","$timeout","$ionicPopup",function(e,t,n){var o={showLoading:function(t){t=t||"Loading...",e.show({template:t})},hideLoading:function(){e.hide()},toggleLoadingWithMessage:function(e,n){var o=this;o.showLoading(e),t(function(){o.hideLoading()},n||3e3)},confirmPopup:function(e,t){var o=n.confirm({title:e,template:t});return o},showAlert:function(e,t){var o=n.alert({title:e,template:t});return o}};return o}]),pmb_im.services.factory("LocationsService",[function(){var e={};return e.initial_lat="",e.initial_lng="",e.new_report_lat="",e.new_report_lng="",e.council_modal=null,e.selected_council=null,e.selectCouncil=function(t){e.selected_council=t},e.save_initial_position=function(t){e.initial_lat=t.coords.latitude,e.initial_lng=t.coords.longitude},e.save_new_report_position=function(t,n){e.new_report_lat=t,e.new_report_lng=n,e.initial_lat=t,e.initial_lng=n},e.savedLocations=[],e}]),pmb_im.services.factory("MapService",["leafletData","$compile",function(e,t){proj4.defs("EPSG:32721","+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs");var n={};return n.goToPlace=function(n,o,r,a){var i={type:"FeatureCollection",crs:{type:"name",properties:{name:"urn:ogc:def:crs:EPSG::32721"}},features:[{type:"Feature",geometry:{type:"Point",coordinates:[o,r]},properties:{nombre:n}}]};e.getMap().then(function(e){var n,o=L.Proj.geoJson(i,{pointToLayer:function(e,o){n=o;var r="<p align='center'>"+e.properties.nombre+" <br/> <a ng-click='new_report_from_latlon("+n.lat+","+n.lng+");'>Iniciar reporte aquí</a></p>",i=t(r)(a);return L.marker(o).bindPopup(i[0])}});o.addTo(e),e.setView(n,18),o.openPopup()})},n.centerMapOnCoords=function(t,n,o){e.getMap().then(function(e){e.setView(new L.LatLng(t,n),o)})},n}]),pmb_im.services.factory("ModalService",[function(){var e={};return e.activeModal=null,e.checkNoModalIsOpen=function(){e.activeModal&&(e.activeModal.hide(),e.activeModal.remove())},e}]),pmb_im.services.factory("PMBService",["$http","leafletData","$cordovaFileTransfer","ConfigService",function(e,t,n,o){var r=o.baseURL,a={report:function(t){if(console.log(t),t.file){var o={fileKey:"photo",fileName:"image.jpeg",chunkedMode:!1,mimeType:"image/jpeg",params:t,withCredentials:!0};o.headers={Connection:"Close"};var a=!0;return n.upload(r+"/report/new/mobile",t.file,o,a)}return e.get(r+"/report/new/mobile",{params:t})},subscribe:function(t,n){return e.get(r+"/alert/subscribe_ajax",{params:{rznvy:t,id:n,type:"updates"}})},abuse:function(t,n,o,a,i){return e.get(r+"/contact/submit_ajax",{params:{em:t,id:n,name:o,subject:a,message:i}})},hide:function(t){var n="/report/delete_ajax/"+t;return e.get(r+n,{params:{}})},comment:function(t){if(0==t.fixed&&delete t.fixed,null==t.state&&delete t.state,null==t.new_category&&delete t.new_category,t.photo){var o={fileKey:"photo",fileName:"image.jpeg",chunkedMode:!1,mimeType:"image/jpeg",params:t,withCredentials:!0};o.headers={Connection:"Close"};var a=!0;return n.upload(r+"/report/update",t.photo,o,a)}return e.get(r+"/report/update",{withCredentials:!0,params:t})},getAreas:function(t,n){var o="http://mapit.pormibarrio.uy/point/4326/"+t+","+n;return e.get(o,{params:{}})}};return a}]),pmb_im.services.factory("PopUpService",["$ionicPopup","ValidationService",function(e,t){return{show_alert:function(t,n){var o=e.alert({title:t,template:n});return o.then(function(e){return!0}),!0},confirmPopup:function(t,n){var o=e.confirm({title:t,template:n});return o},askForOneValuePopUp:function(n,o,r,a,i){$scope=n;var l=e.show({template:a+': <input type="text" id="one_value_popup"><div id="error_container_inside"></div>',title:o,subTitle:r,scope:$scope,buttons:[{text:"Cancelar"},{text:"<b>Enviar</b>",type:"button-positive",onTap:function(e){var n="",o=document.getElementById("one_value_popup").value;if("notNull"==i&&(t.validate_not_empty(o)||(n=n+'<h3>- El campo "'+a+'" no puede estar vacío.</h3>')),"email"==i&&(t.validate_email(o)||(n=n+'<h3>- El campo "'+a+'" no es una dirección de correo válida.</h3>')),"iddoc_uy"==i&&(t.validate_iddoc_uy(o)||(n=n+'<h3>- El campo "'+a+'" no es una cédula uruguaya válida.</h3>')),"two_words"==i&&(t.validate_two_words(o)||(n=n+'<h3>- El campo "'+a+'" debe contener al menos dos palabras.</h3>')),""==n)return o;var r=document.getElementById("error_container_inside");r.innerHTML=n,r.style.display="block",e.preventDefault()}}]});return l}}}]),pmb_im.services.factory("ReportService",["$http","leafletData","ConfigService",function(e,t,n){function o(e){angular.extend(this,e)}var r=n.baseURL+"/report/ajax/",a=n.baseURL+"/ajax_geo?bbox=-65.199387,-40.932178,-50.168488,-25.887061";return o.getById=function(t){var n=r+t;return e.get(n).then(function(e){return e})},o.getAll=function(){return e.get(a,{params:{}})},o._default=function(){var e={lat:0,lon:0,title:null,detail:null,may_show_name:1,category:null,phone:null,pc:"",file:null,name:null,email:null,submit_sign_in:1,password_sign_in:null,remember_me:1};return new o(e)},o._all=[],o.current={},o._new=function(){return o._default()},o.build=function(e){return new o(e)},o.prototype.setLatLng=function(e){this.lat=e.lat,this.lon=e.lng},o}]),pmb_im.services.factory("locationAPI",["$http","$q","ApiImEndpoint","ApiDataEndpoint","ConfigService","LocationsService",function(e,t,n,o,r,a){var i="ubicacionesRestProd",l={};return l.searchLocationByStr=function(t){var n=r.baseURL+"/ajax/geocode?term="+a.selected_council+","+t;return e.get(n,{method:"GET",params:{}})},l.searchEsquinaByStr=function(t){var n=r.baseURL+"/ajax/geocode?term="+a.selected_council+","+t.calle+","+t.esquina;return e.get(n,{method:"GET",params:{}})},l.getLocationGeom=function(t){for(var o=n.url+"/"+i+l.getParamPathByTipo(t.tipo),r=0;r<t.pathParams.length;r++)o+="/"+t.pathParams[r];return e.get(baseURL).then(function(e){return e.data})},l.getLocationGeomPMB=function(t,n,o){var i=r.baseURL+"/ajax/geocode?term="+a.selected_council+","+t+","+n+","+o;return e.get(i)},l.getParamPathByTipo=function(e){var t={ESQUINA:"/esquina",DIRECCION:"/direccion"};return t[e]},l}]),pmb_im.services.factory("_",[function(){return window._}]),pmb_im.services.factory("UserService",["$http",function(e){var t={};return t.name=null,t.email=null,t.password=null,t.identity_document=null,t.phone="",t.picture_url="url(./img/icon-user-anonymous.png)",t.from_body=null,t.save_user_data=function(e,n,o,r,a,i){t.name=e,t.email=n,t.password=o,t.identity_document=r,t.phone=a,t.picture_url=i},t.erase_user_data=function(){t.name=null,t.email=null,t.password=null,t.identity_document=null,t.phone=null,t.picture_url=null},t.get_user_data=function(){},t.add_photo=function(e){t.picture_url=e},t.isLogged=function(){return null!=t.name&&""!=t.name},t}]),pmb_im.services.factory("ValidationService",["$http","$ionicPopup",function(e,t){return{validate_not_empty:function(e){return null!=e&&"undefined"!=e&&""!=e},validate_two_words:function(e){if(null!=e&&"undefined"!=e&&""!=e){var t=e.split(" ").filter(function(e){return""!==e});return t.length>1}return!1},validate_equalsTo:function(e,t){return e==t},validate_email:function(e){if(null!=e&&"undefined"!=e&&""!=e){var t=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t.test(e)}return!1},validate_iddoc_uy:function(e){if(null!=e&&"undefined"!=e&&""!=e){e=e.replace(/\D/g,"");var t=e[e.length-1],n=0,o=0;if(e.length<=6)for(o=e.length;o<7;o++)e="0"+e;for(o=0;o<7;o++)n+=parseInt("2987634"[o])*parseInt(e[o])%10;var r;return r=n%10===0?0:10-n%10,t==r}return!1}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
