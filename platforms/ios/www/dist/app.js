window.VERSION = "1.0.2";var pmb_im={controllers:angular.module("pmb_im.controllers",[]),services:angular.module("pmb_im.services",[])};pmb_im.app=angular.module("pmb_im",["ionic","ionic.wizard","ion-autocomplete","leaflet-directive","pmb_im.controllers","pmb_im.services","ngCordova","ionic-cache-src"]).constant("ApiImEndpoint",{url:"http://www.montevideo.gub.uy"}).constant("ApiDataEndpoint",{url:"/data"}).run(["$ionicPlatform","$rootScope","$cordovaKeyboard","$cordovaNetwork","DBService",function(e,t,n,o,r){t.VERSION=window.VERSION,e.ready(function(){try{cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0)}catch(e){}try{window.Keyboard.hideKeyboardAccessoryBar(!0)}catch(e){}try{Keyboard.hideKeyboardAccessoryBar(!0)}catch(e){}try{StatusBar.hide()}catch(e){}ionic.Platform.isFullScreen=!0;r.initDB()})}]).config(["$stateProvider","$urlRouterProvider","$compileProvider","$ionicConfigProvider",function(e,t,n,o){n.debugInfoEnabled(!1),e.state("app",{cache:!1,url:"/app","abstract":!0,templateUrl:"templates/menu.html",controller:"MapController"}).state("app.map",{cache:!1,url:"/map/",views:{menuContent:{templateUrl:"templates/map.html",controller:"PMBCtrl"}}}).state("app.intro",{cache:!1,url:"/intro",views:{menuContent:{templateUrl:"templates/intro.html",controller:"IntroCtrl"}}}),t.otherwise("/app/intro")}]),pmb_im.controllers.controller("AutoCompleteCtrl",["$scope","leafletData","locationAPI",function(e,t,n){e.ionAutocompleteElement=angular.element(document.getElementsByClassName("ion-autocomplete")),e.ionAutocompleteElement.bind("touchend click focus",e.onClick),e.onClick=function(){e.ionAutocompleteElement.controller("ionAutocomplete").showModal()},e.searchLocation=function(e){if(e)return n.searchLocationByStr(e)}}]),pmb_im.controllers.controller("IntroCtrl",["$scope","$state","$cordovaGeolocation","$stateParams","$ionicPlatform","$ionicPopup","LocationsService","DBService",function(e,t,n,o,r,a,i,l){e.geolocate=function(){var e={timeout:3500,enableHighAccuracy:!0};n.getCurrentPosition(e).then(function(e){i.save_initial_position(e),t.go("app.map")},function(e){t.go("app.map")})},e.$on("$ionicView.enter",function(){null!=i.council_modal&&(i.council_modal.hide(),i.council_modal.remove()),e.geolocate()})}]),pmb_im.controllers.controller("MapController",["$scope","$sce","_","$cordovaCamera","$cordovaFileTransfer","$cordovaGeolocation","$compile","$state","$stateParams","$ionicModal","$ionicPopup","leafletData","ConfigService","PMBService","LocationsService","ReportService","FaqService","CategoriesService","AuthService","UserService","DBService","$timeout","$location","ErrorService","$ionicSlideBoxDelegate","$ionicScrollDelegate","$cordovaNetwork","PopUpService","$ionicPlatform","ConnectivityService","$cordovaInAppBrowser","$interval","$cordovaKeyboard","MapService","ModalService",function(e,t,n,o,r,a,i,s,c,u,d,p,m,_,f,g,h,y,v,b,w,E,k,B,I,C,M,S,P,R,O,A,N,x,T){e.featureReports={},e.reportsByState={},e.reportsVisible={},e.baseURL=m.baseURL,e.user_cached_image="",e.report_detail_id=null,e.one_value_popup=null,e.abuse_name=null,e.abuse_email=null,e.abuse_subject=null,e.abuse_message=null,e.allCategoriesFromBoyArea=null,document.addEventListener("deviceready",function(){R.isOnline()?(e.check_user_logged(),e.send_offline_reports()):e.set_offline_user()}),e.$on("$ionicView.beforeEnter",function(){T.checkNoModalIsOpen(),e.set_network_events();A(function(){e.send_offline_reports()},6e4);null!=document.getElementById("foot_bar")&&(document.getElementById("foot_bar").style.display="block"),R.isOnline()?e.create_online_map():e.create_offline_map()}),e.openWebsite=function(e){var t={location:"no",clearcache:"yes",toolbar:"no"};O.open(e,"_blank",t).then(function(e){})["catch"](function(e){})},e.set_network_events=function(){ionic.Platform.isWebView()?(e.$on("$cordovaNetwork:online",function(t,n){e.check_user_logged(),e.send_offline_reports(),e.create_online_map()}),e.$on("$cordovaNetwork:offline",function(t,n){e.create_offline_map(),e.set_offline_user()})):(window.addEventListener("online",function(t){e.check_user_logged(),e.send_offline_reports(),e.create_online_map()},!1),window.addEventListener("offline",function(t){e.create_offline_map(),e.set_offline_user()},!1))},e.send_offline_reports_from_menu=function(){R.isOnline()?(e.send_offline_reports(),e.list_offline_reports()):S.show_alert("Error de conexión","Para poder enviar los reportes pendientes debe estar conectado a internet.")},e.send_offline_reports=function(){if(R.isOnline()){var e=w.getAllReports();e.then(function(e){null!=e&&e.total_rows>0&&e.rows.forEach(function(e){var t=e.doc,n=_.report(t);null==t.file?n.success(function(e,n,o,r){B.http_data_response_is_successful_ajax(e)&&w.deleteReport(t._id)}).error(function(e,t,n,o){}):n.then(function(e){var n=JSON.parse(e.response);B.http_data_response_is_successful_ajax(n)&&w.deleteReport(t._id)},function(e){},function(e){})})})["catch"](function(e){})}},e.send_offline_report=function(e){var t=_.report(e);null==e.file?t.success(function(e,t,n,o){return!!B.http_data_response_is_successful_ajax(e)}).error(function(e,t,n,o){return!1}):t.then(function(e){var t=JSON.parse(e.response);return!!B.http_data_response_is_successful_ajax(t)},function(e){return!1},function(e){})},e.create_offline_map=function(){return null==e.map&&void(e.map={defaults:{tileLayer:"./offline_tiles/{z}/{x}/{y}.png",minZoom:16,maxZoom:16,zoomControlPosition:"topleft"},markers:{},events:{map:{enable:["context"],logic:"emit"}}})},e.create_online_map=function(){return(null==e.map||"./offline_tiles/{z}/{x}/{y}.png"!=e.map.defaults.tileLayer)&&(e.map={defaults:{tileLayer:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",minZoom:12,maxZoom:18,zoomControlPosition:"topleft"},markers:{},events:{map:{enable:["context"],logic:"emit"}},center:{}},e.loadPinsLayer(),""!=f.new_report_lat?e.map.center={lat:f.new_report_lat,lng:f.new_report_lng,zoom:16}:e.map.center={lat:-34.901113,lng:-56.164531,zoom:16},void p.getMap().then(function(t){t.on("moveend",e.hideOffScreenPins)}))};e.new_report_from_latlon=function(t,n){f.new_report_lat=t,f.new_report_lng=n,f.initial_lat=t,f.initial_lng=n,e.new_report(1)},e.new_report=function(t){if(e.set_active_option("button-report"),e.hide_special_divs(),1==t)if(f.initial_lat=f.new_report_lat,f.initial_lng=f.new_report_lat,document.getElementById("spinner").style.display="block",R.isOnline())e.report=g._new(),e.report.lat=f.new_report_lat,e.report.lon=f.new_report_lng,y.all().then(function(t){B.http_response_is_successful_popup(t)?(w.saveCategories(t.data),e.show_report_form(t.data.categories)):document.getElementById("spinner").style.display="none"});else{var n=y.getCachedCategories();n.then(function(t){t&&t.categories&&Object.keys(t.categories).length>0?(e.report=g._new(),e.report.lat=f.new_report_lat,e.report.lon=f.new_report_lng,e.show_report_form(t.categories)):(document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet."))})["catch"](function(e){document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet.")})}else e.addMapControls()},e.editOfflineReport=function(t){e.set_active_option("button-report"),e.hide_special_divs(),document.getElementById("spinner").style.display="block";var n=y.getCachedCategories();n.then(function(n){n&&n.categories&&Object.keys(n.categories).length>0?(e.report=e.offlineReports[t],e.show_offline_report_form(n.categories)):(document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet."))})["catch"](function(e){document.getElementById("spinner").style.display="none",S.show_alert("Primer reporte","La primera vez que realiza un reporte debe encontrarse conectado a internet.")})},e.deleteOfflineReport=function(t){e.hide_special_divs(),document.getElementById("spinner").style.display="block",e.report=e.offlineReports[t],T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/delete-offline-report.html",{scope:e,animation:"slide-in-up"}).then(function(e){T.activeModal=e,document.getElementById("spinner").style.display="none",document.getElementById("foot_bar").style.display="none",T.show()})},e.updateOfflineReport=function(){var t=new Array;t.push(e.create_field_array("Email","email",e.report.email)),t.push(e.create_field_array("Contraseña","notNull",e.report.password_sign_in)),t.push(e.create_field_array("Seleccione una subcategoría","notNull",e.report.category)),t.push(e.create_field_array("Título","notNull",e.report.title)),t.push(e.create_field_array("Detalles","notNull",e.report.detail)),B.check_fields(t,"error_container")?w.updateReport(e.report).then(function(){e.back_to_map(!0),S.show_alert("Envío pendiente","Se han guardado los cambios al reporte. Se enviará cuando utilice esta aplicación conectado a internet"),e.list_reports(),e.offlineReportsMarkers[e.report._id].openPopup()}):e.back_to_map(!1)},e.cleanOfflineMarkers=function(e){e.eachLayer(function(t){"undefined"!=t._url&&null!=t._url||"Reporte pendiente de envío"==t.options.alt&&e.removeLayer(t)})},e.deleteOfflineReportOk=function(){var t=e.report._id;w.deleteGivenReport(e.report).then(function(){var n=e.offlineReportsMarkers[t];p.getMap().then(function(e){e.removeLayer(n)}),e.back_to_map(!0),e.list_reports()})},e.show_report_form=function(t){e.categories=t,document.getElementById("spinner").style.display="none",document.getElementById("foot_bar").style.display="none",T.checkNoModalIsOpen(),b.isLogged()?(e.report.name=b.name,e.report.email=b.email,e.report.password_sign_in=b.password,e.report.phone=b.phone,u.fromTemplateUrl("templates/pmb-wizard.html",{scope:e,animation:"slide-in-up",hardwareBackButtonClose:!1}).then(function(e){T.activeModal=e,T.activeModal.show()})):u.fromTemplateUrl("templates/pmb-wizard-with-login.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){T.activeModal=e,T.activeModal.show()})},e.show_offline_report_form=function(t){e.categories=t,document.getElementById("spinner").style.display="none",document.getElementById("foot_bar").style.display="none";var n="";b.isLogged()?(e.report.name=b.name,e.report.email=b.email,e.report.password_sign_in=b.password,e.report.phone=b.phone,n="templates/pmb-offline-wizard.html"):n="templates/pmb-offline-wizard.html",T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/pmb-offline-wizard.html",{scope:e,animation:"slide-in-up"}).then(function(t){T.activeModal=t,T.activeModal.show().then(function(){var t=e.report.categorygroup,n=angular.element(document.querySelector("#categoriesSelect"));n.val(t),e.update_subcategories();var o=e.report.category,r="#subcategoriesSelect_"+t,a=angular.element(document.querySelector(r));a.val(o)})})},e.update_subcategories=function(){var t=document.getElementsByClassName("subcategory-active");"undefined"!=t&&t.length>0&&(t[0].className="subcategory-hidden");var n=e.report.categorygroup,o=document.getElementById("subcategoriesSelect_"+n);o.className="subcategory-active",document.getElementById("subcategoriesSelectContainer").style.display="block"},e.abuse=function(){var t=d.show({template:'Nombre: <input type="text" id="abuse_name"><br/>Email: <input type="text" id="abuse_email"><br/>Asunto: <input type="text" id="abuse_subject"><br/>Mensaje<textarea rows="6" id="abuse_message"></textarea><div id="error_container_inside"></div>',title:"Denunciar abuso",subTitle:"Estás reportando por abusiva al siguiente reporte, que contiene información personal, o similar:",scope:e,buttons:[{text:"Cancelar"},{text:"<b>Enviar</b>",type:"button-positive",onTap:function(t){var n=new Array;return e.abuse_email=document.getElementById("abuse_email").value,e.abuse_name=document.getElementById("abuse_name").value,e.abuse_subject=document.getElementById("abuse_subject").value,e.abuse_message=document.getElementById("abuse_message").value,n.push(e.create_field_array("Nombre","notNull",e.abuse_name)),n.push(e.create_field_array("Email","email",e.abuse_email)),n.push(e.create_field_array("Asunto","notNull",e.abuse_subject)),n.push(e.create_field_array("Mensaje","notNull",e.abuse_message)),B.check_fields(n,"error_container_inside")?e.abuse_email:void t.preventDefault()}}]});t.then(function(t){if(t){var n=_.abuse(e.abuse_email,e.report_detail_id,e.abuse_name,abuse_subject,e.abuse_message);n.then(function(t){S.show_alert("Denuncia enviada","Gracias por tus comentarios. ¡Nos pondremos en contacto con usted tan pronto como nos sea posible!"),e.abuse_name=null,e.abuse_email=null,e.abuse_subject=null,e.abuse_message=null})}})},e.send_comment=function(){var t=new Array;t.push(e.create_field_array("Comentario","notNull",e.comment.update)),B.check_fields(t,"error_container_inside")&&(comment_sent=_.comment(e.comment),null==e.comment.photo?comment_sent.success(function(t,n,o,r){e.back_to_map(!0)}).error(function(t,n,o,r){B.show_error_message("error_container_inside",n),e.back_to_map(!1)}):comment_sent.then(function(t){e.back_to_map(!0)},function(e){},function(t){E(function(){e.uploadProgress=t.loaded/t.total*100,document.getElementById("sent_label").innerHTML="Enviado: "+Math.round(e.uploadProgress)+"%"})}))},e.subscribe=function(){if(b.isLogged()){var t=S.confirmPopup("Subscribirse","¿Está seguro que desea recibir un correo a la dirección "+b.email+" cuando se dejen comentarios sobre este problema?");t.then(function(t){if(t){var n=_.subscribe(b.email,e.report_detail_id);n.then(function(e){S.show_alert("Confirme su correo","Se ha enviado un link a la dirección "+b.email+" para confirmar su correo. Luego de esto comenzarán a llegarle las alertas sobre nuevos comentarios.")})}})}else{var t=S.askForOneValuePopUp(e,"Subscribirse","Por favor, ingrese un correo al que desea recibir mensajes cuando se dejen comentarios sobre este problema.","Email","email");t.then(function(t){if(t){e.one_value_popup=t;var n=_.subscribe(e.one_value_popup,e.report_detail_id);n.then(function(t){S.show_alert("Confirme su correo","Se ha enviado un link a la dirección "+e.one_value_popup+" para confirmar su correo. Luego de esto comenzarán a llegarle las alertas sobre nuevos comentarios."),e.one_value_popup=null})}})}},e.hide=function(){if(b.isLogged()){var t=S.confirmPopup("Ocultar","¿Está seguro de que desea ocultar su reporte? Este no aparecerá más ni en la página ni en la aplicación si es ocultado.");t.then(function(t){if(t){var n=_.hide(e.report_detail_id);n.then(function(e){S.show_alert("Ocultar","Se ha ocultado el reporte. No será visible en el futuro.")})}})}},e.confirmReport=function(){if(R.isOnline()){var t=new Array;if(t.push(e.create_field_array("Seleccione una subcategoría","notNull",e.report.category)),t.push(e.create_field_array("Título","notNull",e.report.title)),t.push(e.create_field_array("Detalles","notNull",e.report.detail)),B.check_fields(t,"error_container")){var n=_.report(e.report);if(document.getElementById("spinner-inside-modal").style.display="block",null==e.report.file)n.success(function(t,n,o,r){B.http_data_response_is_successful(t,"error_container")?(e.back_to_map(!0),e.loadPinsLayer()):e.back_to_map(!1)}).error(function(t,n,o,r){B.show_error_message("error_container",n),e.back_to_map(!1)});else{var o=e.report;n.then(function(t){console.log(t);var n=JSON.parse(t.response);B.http_data_response_is_successful(n,"error_container")?(e.back_to_map(!0),e.loadPinsLayer(),p.getMap().then(function(e){var t=o.lat;t-=6e-4,e.setView(new L.LatLng(t,o.lon),18)})):(console.log(n),e.back_to_map(!1))},function(t){console.log(t),e.back_to_map(!0),e.loadPinsLayer(),p.getMap().then(function(e){var t=o.lat;t-=6e-4,e.setView(new L.LatLng(t,o.lon),18)})},function(e){})}}else e.back_to_map(!1)}else e.save_offline_report().then(function(t){e.back_to_map(!0),e.list_reports(),S.show_alert("Envío pendiente","El reporte se ha guardado en su dispositivo y se enviará cuando utilice esta aplicación conectado a internet")})},e.next=function(){I.next()},e.previous=function(){I.previous()},e.confirmReportWithLogin=function(){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var t=new Array;t.push(e.create_field_array("Email","email",e.report.email)),t.push(e.create_field_array("Contraseña","notNull",e.report.password_sign_in)),t.push(e.create_field_array("Seleccione una subcategoría","notNull",e.report.category)),t.push(e.create_field_array("Título","notNull",e.report.title)),t.push(e.create_field_array("Detalles","notNull",e.report.detail)),B.check_fields(t,"error_container")?v.sign_in(e.report.password_sign_in,e.report.email).then(function(t){B.http_response_is_successful(t,"error_container")?(b.save_user_data(t.data.name,e.report.email,e.report.password_sign_in,t.data.identity_document,t.data.phone,t.data.picture_url),t.data.from_body&&(b.from_body=t.data.from_body),w.saveUser(t.data.name,e.report.email,e.report.password_sign_in,t.data.identity_document,t.data.phone,t.data.picture_url),e.set_user_picture(1),e.confirmReport()):e.back_to_map(!1)},function(t){B.show_error_message("error_container",t.statusText),e.back_to_map(!1)}):e.back_to_map(!1)}else e.save_offline_report().then(function(t){e.back_to_map(!0),e.list_reports(),S.show_alert("Envío pendiente","El reporte se ha guardado en su dispositivo y se enviará cuando utilice esta aplicación conectado a internet")})},e.save_offline_report=function(){var t=new Date,n=t.getDate(),o=t.getMonth();o+=1;var r=t.getFullYear();return e.report.date=n+"/"+o+"/"+r,w.saveReport(e.report)},e.back_to_map=function(e){e?(T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block",document.getElementById("spinner-inside-modal").style.display="none"):document.getElementById("spinner-inside-modal").style.display="none"},e.cancelReport=function(){T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block"},e.image=null,e.addImage=function(t,n,r){console.log(t),console.log(n),console.log(r),e.isUserPhoto=n,e.isCommentPhoto=r;var a=Camera.PictureSourceType.CAMERA,i=!1,l=!1;1==t&&(a=Camera.PictureSourceType.PHOTOLIBRARY,i=!1,l=!1);var s={quality:50,destinationType:Camera.DestinationType.FILE_URI,sourceType:a,allowEdit:!1,correctOrientation:i,encodingType:Camera.EncodingType.JPEG,popoverOptions:CameraPopoverOptions,saveToPhotoAlbum:l,mediaType:Camera.MediaType.PICTURE,targetWidth:360,targetHeight:360};console.log(s),o.getPicture(s).then(function(t){function n(t){console.log(t),window.resolveLocalFileSystemURL(t,function(t){console.log("got file: "+t.toURL());var n=t.toURL();1==e.isUserPhoto?e.profile.picture_url=n:1==e.isCommentPhoto?e.comment.file=n:(e.report.file=n,console.log(e.report)),e.imgURI=n},function(){console.log("Error en file entry: "+t),o(t)})}function o(e){window.resolveLocalFileSystemURL(e,r,i)}function r(e){var t=e.fullPath.substr(e.fullPath.lastIndexOf("/")+1),n=l()+t;window.resolveLocalFileSystemURL(cordova.file.dataDirectory,function(t){e.copyTo(t,n,a,i)},i)}function a(t){e.$apply(function(){e.image=t.nativeURL})}function i(e){}function l(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;n<5;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e}console.log(t),n(t)},function(e){console.log(e)})},e.urlForImage=function(){var t="http://placehold.it/200x200";if(e.image){var n=e.image.substr(e.image.lastIndexOf("/")+1);t=cordova.file.dataDirectory+n}return t},e.list_reports=function(){e.hide_special_divs(),e.set_active_option("button-list-reports"),document.getElementById("user-options-menu").style.display="none",R.isOnline()?document.getElementById("report-list-scroll").style.display="block":e.list_offline_reports()},e.list_offline_reports_menu=function(){e.hide_special_divs(),e.list_offline_reports()},e.list_offline_reports=function(){p.getMap().then(function(t){e.cleanOfflineMarkers(t);var n=w.getAllReports(),o='<ion-scroll direction="y" id="offline-report-list-scroll"><div class="scroll"><div id="report-list-offline">';e.offlineReports=new Array,e.offlineReportsMarkers=new Array,n.then(function(n){o+="<h3><b>Reportes guardados en el dispositivo y pendientes de envío:</b></h3>",null!=n&&n.rows.length>0?(n.rows.forEach(function(n){var r=n.doc;e.offlineReports[r._id]=r,o+=e.add_offline_report_div(r);var a={alt:"Reporte pendiente de envío"},l=L.marker([r.lat,r.lon],a).addTo(t),s='<a class="text report-link" ng-click="editOfflineReport(\''+r._id+"')\"><p>"+r.title+'</p></a><p class="offline-pending">(pendiente de envío)</p>',c=i(s)(e);l.bindPopup(c[0]),e.offlineReportsMarkers[r._id]=l}),o+="<br/><h3><a ng-click='send_offline_reports_from_menu()'>- Enviar todos los reportes pendientes</a></h3>"):o+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",o+='</div></div><div class="scroll-bar scroll-bar-v"><div class="scroll-bar-indicator scroll-bar-fade-out"></div></div></ion-scroll>';var r=angular.element(document.querySelector("#offline-report-list-container"));r.html(o);i(r.contents())(e);e.$broadcast("scroll.resize")})["catch"](function(e){o+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",o+='</div></div><div class="scroll-bar scroll-bar-v"><div class="scroll-bar-indicator scroll-bar-fade-out"></div></div></ion-scroll>'}),document.getElementById("offline-report-list-container").style.display="block"})},e.list_reports_and_go=function(t){e.set_active_option("button-list-reports"),document.getElementById("user-options-menu").style.display="none",R.isOnline()?document.getElementById("report-list-scroll").style.display="block":p.getMap().then(function(n){n.eachLayer(function(e){"undefined"!=e._url&&null!=e._url||n.removeLayer(e)});var o=w.getAllReports(),r='<div id="report-list-offline">';e.offlineReports=new Array,e.offlineReportsMarkers=new Array,o.then(function(o){r+="<h3><b>Reportes guardados en el dispositivo y pendientes de envío:</b></h3>",null!=o&&o.rows.length>0?o.rows.forEach(function(o){var a=o.doc;e.offlineReports[a._id]=a,r+=e.add_offline_report_div(a);var l=L.marker([a.lat,a.lon]).addTo(n),s='<a class="text report-link" ng-click="editOfflineReport(\''+a._id+"')\"><p>"+a.title+'</p></a><p class="offline-pending">(pendiente de envío)</p>',c=i(s)(e);l.bindPopup(c[0]),e.offlineReportsMarkers[a._id]=l,a._id==t&&goToOfflineReport(t)}):r+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",r+="</div>";var a=angular.element(document.querySelector("#offline-report-list-container"));a.html(r);i(a.contents())(e)})["catch"](function(e){r+="<br/><h3>No hay ningún reporte pendiente de envío.</h3>",r+="</div>"}),document.getElementById("offline-report-list-container").style.display="block"})},e.goToOfflineReport=function(t){var n=e.offlineReports[t];p.getMap().then(function(o){var r=n.lat;r-=.001,e.map.center.lat=r,e.map.center.lng=n.lon,o.setView(new L.LatLng(r,n.lon),16),e.offlineReportsMarkers[t].openPopup()})},e.add_offline_report_div=function(e){var t='<div id="report-container-'+e._id+'" ng-click="goToOfflineReport(\''+e._id+'\')" class="report-inside-list-offline">';return t+='<div class="report-in-list-icon-offline"></div>',t+='<div class="report-in-list-info">',t=t+'<p id="report-title-'+e._id+'" class="report-in-list-title">'+e.title+"</p>",t=t+'<p id="report-category-'+e._id+'" class="report-in-list-category">'+e.category+"</p>",t=t+'<p id="report-date-'+e._id+'" class="report-in-list-date">'+e.date+"</p>",t=t+'<p id="report-date-'+e._id+'" class="report-in-list-actions"><a ng-click="editOfflineReport(\''+e._id+"')\">Editar</a>&nbsp; <a ng-click=\"deleteOfflineReport('"+e._id+"')\">Eliminar</a></p>",t+='<div class="report-mini-icons">',null!=e.file&&"undefined"!=e.file&&(t+='<img class="report-mini-icon" src="./img/icon-camera.png" />'),t+='<img class="report-mini-icon" src="./img/icon-tags.png" />',t+="</div></div></div>"},e.help=function(){R.isOnline()?(document.getElementById("spinner").style.display="block",e.set_active_option("button-faq"),e.hide_special_divs(),h.all().success(function(n){T.checkNoModalIsOpen(),e.faq=t.trustAsHtml(n),document.getElementById("spinner").style.display="none",u.fromTemplateUrl("templates/faq.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){T.activeModal=t,T.activeModal.show().then(function(){var t=angular.element(document.querySelector("#faq-container-div"));i(t.contents())(e)})})})):S.show_alert("Sin conexión a internet","Para ver la ayuda debe estar conectado a internet")},e.scrollMe=function(e){k.hash(e);var t=C.$getByHandle("content");t.anchorScroll()},e.close_faq_modal=function(){T.checkNoModalIsOpen()},e.set_active_option=function(e){document.getElementById("button-report").className="option-inactive",document.getElementById("button-list-reports").className="option-inactive",document.getElementById("button-faq").className="option-inactive",document.getElementById("button-find-me").className="option-inactive",document.getElementById(e).className="option-active"},e.hide_special_divs=function(){document.getElementById("report-list-scroll").style.display="none",document.getElementById("offline-report-list-container").style.display="none",document.getElementById("user-options-menu").style.display="none",document.getElementById("map_crosshair").style.display="none",document.getElementById("map_crosshair_button").style.display="none"},e.viewReportDetails=function(n){e.report_detail_id=n,R.isOnline()?(document.getElementById("spinner").style.display="block",e.hide_special_divs(),g.getById(n).then(function(o){e.report_detail=t.trustAsHtml(o.data.replace("overflow:auto;","").replace('src="/','src="'+m.baseURL).replace("url(/","url("+m.baseURL+m.baseCobrand+"/").replace("url(/","url("+m.baseURL+m.baseCobrand+"/")),document.getElementById("spinner").style.display="none",e.comment={submit_update:1,id:e.report_detail_id,may_show_name:!0,add_alert:!0,fixed:!1,update:"",name:null,form_rznvy:null,photo:null},T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/report-detail.html",{scope:e,animation:"slide-in-up"}).then(function(t){T.activeModal=t,T.activeModal.show().then(function(){var t=angular.element(document.querySelector("#report-detail-container-div"));i(t.contents())(e);if(b.isLogged()){if(document.getElementById("comment_container").style.display="block",e.comment.name=b.name,e.comment.form_rznvy=b.email,null!=b.from_body){var o=e.featureReports[n].feature.geometry.coordinates[0],r=e.featureReports[n].feature.geometry.coordinates[1];_.getAreas(o,r).then(function(t){jsonObject=t.data,e.isBodyAdmin=!1;for(var o in jsonObject){var r=o,a=jsonObject[o];"CIU"==a.type&&b.from_body==r&&(e.isBodyAdmin=!0,e.comment.new_category=e.featureReports[n].feature.properties.category,e.comment.state=e.featureReports[n].feature.properties.state,y.allFromBodyArea(r).then(function(t){jsonAreaObject=t.data,e.allCategoriesFromBoyArea=[];for(var n in jsonAreaObject)e.allCategoriesFromBoyArea.push(n);E(function(){document.getElementById("new_category_select").value=e.comment.new_category},500)}))}})}else e.isBodyAdmin=!1;document.getElementById("comment_container").style.display="block"}else document.getElementById("comment_container").style.display="none"})})},function(e){document.getElementById("spinner").style.display="none",B.show_error_message_popup("ERROR AL CARGAR DATOS DEL REPORTE: "+e.statusText)})):S.show_alert("Sin conexión a internet","Para ver los detalles del reporte, debe estar conectado a internet.")},e.close_report_detail_modal=function(){T.checkNoModalIsOpen(),e.report_detail_id=null},e.locate=function(){a.getCurrentPosition().then(function(t){e.map.center.lat=t.coords.latitude,e.map.center.lng=t.coords.longitude,e.map.center.zoom=15,e.map.markers.now={lat:t.coords.latitude,lng:t.coords.longitude,message:"You Are Here",focus:!0,draggable:!1}},function(e){})},e.addMapControls=function(){document.getElementById("map_crosshair").style.display="block",document.getElementById("map_crosshair_button").style.display="block"},e.startReportFromCrosshairs=function(){p.getMap().then(function(t){var n=t.getCenter();f.save_new_report_position(n.lat,n.lng),e.new_report(1)})},e.getOnlyCategoryIconURL=function(e){var t=e.replace("-proceso","");return t=t.replace("-resuelto","")},e.hideOffScreenPins=function(){p.getMap().then(function(t){var n=t.getBounds(),o=Object.keys(e.reportsByState);e.reportsVisible=[],o.forEach(function(o){e.reportsByState[o].forEach(function(o,r){var a=n.contains(o.getLatLng());a?a&&(t.addLayer(o),e.reportsVisible.push(o.feature)):t.removeLayer(o)})})})},e.removeAllPins=function(){p.getMap().then(function(t){var n=(t.getBounds(),Object.keys(e.reportsByState));e.reportsVisible=[],n.forEach(function(n){e.reportsByState[n].forEach(function(e,n){t.removeLayer(e)})})})},e.loadPinsLayer=function(){document.getElementById("spinner")&&(document.getElementById("spinner").style.display="block"),e.removeAllPins(),e.reportsByState={},g.getAll().then(function(t){var n=t.data.features;e.reports=t.data.features,n.forEach(function(t){if(t.properties){var n=t.geometry.coordinates[0],o=t.geometry.coordinates[1],r=m.baseURL+t.properties.pin_url,a=L.icon({iconUrl:r,iconSize:[29,34],iconAnchor:[14,34],popupAnchor:[14,-8]}),l=L.marker([o,n],{icon:a});if(l.feature=t,e.featureReports[l.feature.properties.id]=l,e.reportsByState["state-"+t.properties.state]||(e.reportsByState["state-"+t.properties.state]=[]),e.reportsByState["state-"+t.properties.state].push(l),t.properties){reportId=t.properties.id,descripcion=t.properties.title,html='<a class="text report-link" ng-click="viewReportDetails('+reportId+')"><p>'+descripcion+"</p></a>";var s=i(html)(e);l.bindPopup(s[0])}}}),document.getElementById("spinner").style.display="none",e.hideOffScreenPins()})},e.addReportsLayer=function(){if(null!=e.jsonLayer)return!1;var t=m.baseURL;buildPopup=function(e,t){var n=e[3],o=e[4],r='<a class="text report-link" ng-click="viewReportDetails('+n+')"><p>'+o+"</p></a>";return r},onEachFeature=function(t,n){var o,r,a;if(t.properties){r=t.properties.id,a=t.properties.title,o='<a class="text report-link" ng-click="viewReportDetails('+r+')"><p>'+a+"</p></a>";var l=i(o)(e);n.bindPopup(l[0])}},l=new L.LayerJSON({url:t+"/ajax_geo?bbox={bbox}",locAsGeoJSON:!0,onEachFeature:onEachFeature}),e.jsonLayer=l,p.getMap().then(function(e){e.addLayer(l)}),l.on("dataloaded",function(t){e.reports=t.data.features}),l.on("layeradd",function(n){n.layer.eachLayer(function(n){var o=L.icon({iconUrl:t+"/"+n.feature.properties.pin_url,iconSize:[29,34],iconAnchor:[14,34],popupAnchor:[0,-8]});n.setIcon(o),void 0===e.featureReports[n.feature.properties.id]&&(e.featureReports[n.feature.properties.id]=n)})})},e.goToReport=function(t){var n=document.getElementsByClassName("report-inside-list-active");n.length>0&&(n[0].className="report-inside-list");var o=document.getElementById("report-container-"+t.properties.id);o.className="report-inside-list-active";var r=e.featureReports[t.properties.id];p.getMap().then(function(e){var t=r.getLatLng(),n=t.lat;n-=6e-4,e.setView(new L.LatLng(n,t.lng),18),r.openPopup()})},e.model=[],e.externalModel=[],e.selectedItems=[],e.preselectedSearchItems=[],e.clickedValueModel="",e.removedValueModel="",e.getTestItems=function(e){var t,n=[];return e&&(t={items:[{id:"1",name:e+"1",view:"view: "+e+"1"},{id:"2",name:e+"2",view:"view: "+e+"2"},{id:"3",name:e+"3",view:"view: "+e+"3"}]},n=t.items),n},e.itemsRemoved=function(t){e.removedValueModel=t},e.user_options=function(){var t=document.getElementById("user-options-menu");if("block"==t.style.display)t.style.display="none";else{var n=b.name;null==n?e.show_anonymous_menu():e.show_user_menu()}},e.show_anonymous_menu=function(){var t=document.getElementById("user-options-menu"),n="<div id='auth_options'><div class='nonauth-link' ng-click='show_login_modal()'>Iniciar sesión</div>";n+="<div class='nonauth-link' ng-click='show_sign_up_modal()'>Registrarse</div></div>",t.innerHTML=n,i(t)(e),t.style.height="120px",t.style.width="150px",t.style.display="block"},e.show_user_menu=function(){
var t=document.getElementById("user-options-menu"),n=b.name+"<div id='auth_options'><div class='user-logged-link' ng-click='show_edit_profile_modal()'>Mi perfil</div>";n+="<div class='user-logged-link' ng-click='change_password()'>Cambiar contraseña</div>",n+="<div class='user-logged-link' ng-click='list_offline_reports_menu()'>Reportes pendientes</div>",n+="<div class='user-logged-link' ng-click='sign_out()'>Cerrar sesión</div></div>",t.innerHTML=n,i(t)(e),t.style.height="220px",t.style.width="200px",t.style.display="block"},e.forgot_password=function(){T.checkNoModalIsOpen(),e.nonauth=new Array,e.nonauth.email="",u.fromTemplateUrl("templates/forgot_password.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("user-options-menu").style.display="none",T.activeModal=e,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.forgot_password_ok=function(){document.getElementById("spinner-inside-modal").style.display="block";var t=new Array;t.push(e.create_field_array("Email","email",e.nonauth.email)),B.check_fields(t,"error_container")?(document.getElementById("spinner-inside-modal").style.display="none",v.password_recovery(e.nonauth.email).then(function(e){"Email successfuly sended"==e.data.message?(T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block",E(function(){S.show_alert("Instrucciones enviadas con éxito","Se han enviado intrucciones para restablecer tu contraseña al correo proporcionado anteriormente.")},1e3)):B.show_error_message("error_container",e.data.message)})):document.getElementById("spinner-inside-modal").style.display="none"},e.change_password=function(){T.checkNoModalIsOpen(),e.nonauth=new Array,e.nonauth.oldPassword="",e.nonauth.newPassword="",e.nonauth.confirmPassword="",u.fromTemplateUrl("templates/change_password.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("user-options-menu").style.display="none",T.activeModal=e,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.change_password_ok=function(){document.getElementById("spinner-inside-modal").style.display="block";var t=new Array;t.push(e.create_field_array("Contraseña actual","notNull",e.nonauth.oldPassword)),t.push(e.create_field_array("Nueva contraseña","notNull",e.nonauth.newPassword)),t.push(e.create_field_array("Confirmar nueva contraseña","notNull",e.nonauth.confirmPassword)),t.push(e.create_field_array_with_twoFields("Nueva contraseña y Confirmar contraseña","equalsTo",e.nonauth.newPassword,e.nonauth.confirmPassword)),B.check_fields(t,"error_container")?v.password_change(b.email,e.nonauth.oldPassword,e.nonauth.newPassword,e.nonauth.confirmPassword).then(function(t){document.getElementById("spinner-inside-modal").style.display="none","Password successfuly changed"==t.data.message?(b.save_user_data(b.name,b.email,e.nonauth.newPassword,b.identity_document,b.phone,b.picture_url),w.saveUser(b.name,b.email,b.password,b.identity_document,b.phone,b.picture_url),T.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block"):B.show_error_message("error_container","Se ha producido un error al cambiar su clave, por favor intente más tarde")}):document.getElementById("spinner-inside-modal").style.display="none"},e.create_field_array=function(e,t,n){var o=new Array;return o.name=e,o.type=t,o.value=n,o},e.create_field_array_with_twoFields=function(e,t,n,o){var r=new Array;return r.name=e,r.type=t,r.value=n,r.secondValue=o,r},e.fix_fb_image_link=function(e){if(e.indexOf("http://graph.facebook.com")>=0){var t=e.split("http://graph.facebook.com"),n="http://graph.facebook.com"+t[1];return n}return e},e.sign_in=function(t,n){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var o=new Array;o.push(e.create_field_array("Email","email",t)),o.push(e.create_field_array("Contraseña","notNull",n)),B.check_fields(o,"error_container")?v.sign_in(n,t).then(function(o){B.http_response_is_successful(o,"error_container")?(o.data.picture_url=e.fix_fb_image_link(o.data.picture_url),b.save_user_data(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),w.saveUser(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),o.data.from_body&&(b.from_body=o.data.from_body),document.getElementById("spinner-inside-modal").style.display="none",e.close_login_modal(),e.set_user_picture(1)):document.getElementById("spinner-inside-modal").style.display="none"},function(e){document.getElementById("spinner-inside-modal").style.display="none",B.show_error_message("error_container",e.statusText)}):document.getElementById("spinner-inside-modal").style.display="none"}else S.show_alert("Sin conexión a internet","Para iniciar sesión debe estar conectado a internet")},e.sign_in_ajax=function(t,n){v.sign_in(n,t).then(function(o){return B.http_response_is_successful_ajax(o)?(o.data.picture_url=e.fix_fb_image_link(o.data.picture_url),b.save_user_data(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),w.saveUser(o.data.name,t,n,o.data.identity_document,o.data.phone,o.data.picture_url),o.data.from_body&&(b.from_body=o.data.from_body),e.set_user_picture(1),1):0},function(e){return 0})},e.sign_out=function(){b.erase_user_data(),w.eraseUser(),document.getElementById("spinner").style.display="none",e.set_user_picture(0),document.getElementById("user-options-menu").style.display="none"},e.show_edit_profile_modal=function(){e.profile=new Array,e.profile.email=b.email,e.profile.password="",e.profile.fullname=b.name,e.profile.new_email=b.email,e.profile.id_doc=b.identity_document,e.profile.telephone=b.phone,e.profile.picture_url=null,null!=b.picture_url?(e.actual_photo=b.picture_url,"url(./img/icon-user-anonymous.png)"==e.actual_photo&&(e.actual_photo="./img/icon-user-anonymous.png"),T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/edit_profile_with_photo.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("user-options-menu").style.display="none",T.activeModal=e,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})):(e.actual_photo=null,T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/edit_profile.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),T.activeModal=t,document.getElementById("foot_bar").style.display="none",T.activeModal.show()}))},e.close_edit_profile_modal=function(){document.getElementById("foot_bar").style.display="block",T.checkNoModalIsOpen()},e.edit_profile_ok=function(){e.edit_profile(b.email,b.password,e.profile.fullname,e.profile.new_email,e.profile.id_doc,e.profile.telephone,e.profile.picture_url)},e.edit_profile=function(t,n,o,r,a,i,l){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var s=new Array;if(s.push(e.create_field_array("Correo electrónico","email",r)),s.push(e.create_field_array("Cédula de Identidad","iddoc_uy",a)),s.push(e.create_field_array("Nombre y apellido","two_words",o)),B.check_fields(s,"error_container")){var c=v.edit_user(t,n,o,r,a,i,l);null==l||""==l?c.success(function(t,o,r,a){document.getElementById("sent_label").innerHTML="Enviado: 100%",B.http_data_response_is_successful(t,"error_container")?(b.save_user_data(t.name,t.email,n,t.identity_document,t.phone,t.picture_url),document.getElementById("spinner-inside-modal").style.display="none",e.close_edit_profile_modal(),e.check_user_logged()):document.getElementById("spinner-inside-modal").style.display="none"}).error(function(e,t,n,o){B.show_error_message("error_container",t),document.getElementById("spinner-inside-modal").style.display="none"}):c.then(function(t){var o=JSON.parse(t.response);B.http_data_response_is_successful(o,"error_container")?(b.save_user_data(o.name,o.email,n,o.identity_document,o.phone,o.picture_url),document.getElementById("spinner-inside-modal").style.display="none",e.close_edit_profile_modal(),e.check_user_logged()):document.getElementById("spinner-inside-modal").style.display="none"},function(e){var t="Código: "+e.code;t=t+" Origen: "+e.source,t=t+" Destino: "+e.target,t=t+" http_status: "+e.http_status,t=t+" Body: "+e.body,t=t+" Exception: "+e.exception,B.show_error_message("error_container","Hubo un error en el envío: "+t),document.getElementById("spinner-inside-modal").style.display="none"},function(t){E(function(){e.uploadProgress=t.loaded/t.total*100,document.getElementById("sent_label").innerHTML="Enviado: "+Math.round(e.uploadProgress)+"%"})})}else document.getElementById("spinner-inside-modal").style.display="none"}else S.show_alert("Sin conexión a internet","Para editar su perfil debe estar conectado a internet")},e.show_login_modal=function(){e.nonauth=new Array,e.nonauth.email="",e.nonauth.password="",T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/log_in.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),T.activeModal=t,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.login_ok=function(){e.sign_in(e.nonauth.email,e.nonauth.password)},e.close_login_modal=function(){document.getElementById("foot_bar").style.display="block",T.checkNoModalIsOpen()},e.show_sign_up_modal=function(){e.newuser=new Array,e.newuser.email="",e.newuser.password="",e.newuser.fullname="",e.newuser.id_doc="",e.newuser.telephone="",T.checkNoModalIsOpen(),u.fromTemplateUrl("templates/sign_up.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),T.activeModal=t,document.getElementById("foot_bar").style.display="none",T.activeModal.show()})},e.close_sign_up_modal=function(){document.getElementById("foot_bar").style.display="block",T.checkNoModalIsOpen()},e.sign_up=function(t,n,o,r,a){if(R.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var i=new Array;i.push(e.create_field_array("Correo electrónico","email",t)),i.push(e.create_field_array("Contraseña","notNull",o)),i.push(e.create_field_array("Cédula de Identidad","iddoc_uy",r)),i.push(e.create_field_array("Nombre y apellido","two_words",n)),B.check_fields(i,"error_container")?v.create_user(t,n,o,r,a).then(function(i){if(B.http_response_is_successful(i,"error_container")){b.save_user_data(n,t,o,r,a,null),document.getElementById("spinner-inside-modal").style.display="none",e.close_sign_up_modal();var l=d.alert({title:"Usuario creado con éxito",template:i.data.message});l.then(function(e){})}else document.getElementById("spinner-inside-modal").style.display="none"},function(e){document.getElementById("spinner-inside-modal").style.display="none",B.show_error_message("error_container",e.statusText)}):document.getElementById("spinner-inside-modal").style.display="none"}else S.show_alert("Sin conexión a internet","Para iniciar registrarse debe estar conectado a internet")},e.sign_up_ok=function(){e.sign_up(e.newuser.email,e.newuser.fullname,e.newuser.password,e.newuser.id_doc,e.newuser.telephone)},e.check_user_logged=function(){var t=b.name;if(null==t){var n=w.getUser();n.then(function(t){null!=t.name&&""!=t.name&&"undefined"!=t.name?e.sign_in_ajax(t.email,t.password):e.set_user_picture(0)})["catch"](function(t){e.set_user_picture(0)})}else null==b.picture_url||""==b.picture_url?e.set_user_picture(0):e.set_user_picture(1)},e.set_offline_user=function(){var t=b.name;if(null==t){var n=w.getUser();n.then(function(t){null!=t.name&&""!=t.name&&"undefined"!=t.name?b.save_user_data(t.name,t.email,t.password,t.identity_document,t.phone,t.picture_url):e.set_user_picture(0)})["catch"](function(t){e.set_user_picture(0)})}else null==b.picture_url||""==b.picture_url?e.set_user_picture(0):e.set_user_picture(1)},e.set_user_picture=function(t){document.getElementById("user_picture");0==t?e.user_cached_image="./img/icon-user-anonymous.png":null!=b.picture_url&&""!=b.picture_url?e.user_cached_image=b.picture_url:e.user_cached_image="./img/icon-user-anonymous.png"},e.find_me=function(){e.set_active_option("button-find-me"),e.hide_special_divs();var t={timeout:1e4,enableHighAccuracy:!0};a.getCurrentPosition(t).then(function(t){e.map.center.lat=t.coords.latitude,e.map.center.lng=t.coords.longitude,f.save_new_report_position(t.coords.latitude,t.coords.longitude),R.isOnline()?e.map.center.zoom=18:e.map.center.zoom=16,e.map.markers.now={lat:t.coords.latitude,lng:t.coords.longitude,message:"<p align='center'>Te encuentras aquí <br/> <a ng-click='new_report(1);'>Iniciar reporte en tu posición actual</a></p>",focus:!0,draggable:!1,getMessageScope:function(){return e}}},function(t){e.openCouncilSelector()})};e.$on("leafletDirectiveMap.contextmenu",function(t,n){e.hide_special_divs(),console.log(n.leafletEvent.latlng.lat),console.log(n.leafletEvent.latlng.lng),f.save_new_report_position(n.leafletEvent.latlng.lat,n.leafletEvent.latlng.lng),e.new_report(1)}),e.select_imm=function(){e.close_council_modal(),f.selectCouncil("289"),x.centerMapOnCoords(-34.901113,-56.164531,14)},e.select_idr=function(){e.close_council_modal(),f.selectCouncil("255"),x.centerMapOnCoords(-30.8997469,-55.5434686,14)},e.select_irn=function(){e.close_council_modal(),f.selectCouncil("360"),x.centerMapOnCoords(-33.124972,-58.303736,14)},e.openCouncilSelector=function(){u.fromTemplateUrl("templates/council_selector_with_back_button.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){f.council_modal=e,f.council_modal.show().then(function(){})})},e.close_council_modal=function(){f.council_modal.hide(),f.council_modal.remove()}}]),pmb_im.controllers.controller("PMBCtrl",["$scope","$state","leafletData","PMBService","ReportService","locationAPI","MapService","_","Loader","LocationsService","$ionicModal",function(e,t,n,o,r,a,i,l,s,c,u){e.reportButton={text:"Reportar",state:"unConfirmed"},e.$on("$ionicView.afterEnter",function(){n.getMap();""!=c.new_report_lat?i.centerMapOnCoords(c.new_report_lat,c.new_report_lng,16):""!=c.initial_lat?i.centerMapOnCoords(c.initial_lat,c.initial_lng,16):e.openCouncilSelector()}),e.select_imm=function(){e.close_council_modal(),c.selectCouncil("289"),i.centerMapOnCoords(-34.901113,-56.164531,14)},e.select_idr=function(){e.close_council_modal(),c.selectCouncil("255"),i.centerMapOnCoords(-30.8997469,-55.5434686,14)},e.select_irn=function(){e.close_council_modal(),c.selectCouncil("360"),i.centerMapOnCoords(-33.124972,-58.303736,14)},e.openCouncilSelector=function(){u.fromTemplateUrl("templates/council_selector_with_back_button.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){c.council_modal=e,c.council_modal.show().then(function(){})})},e.close_council_modal=function(){c.council_modal.hide(),c.council_modal.remove()},e.searchMode="calle.lugar",e.location={calle:null,esquina:null,lugar:null};var d={tipo:null,pathParams:[]};e.$on("$stateChangeSuccess",function(){e.ionAutocompleteElement=angular.element(document.getElementsByClassName("ion-autocomplete")),e.ionAutocompleteElement.bind("touchend click focus",e.onClick)}),e.initReport=function(){var t,o=L.icon({iconUrl:"img/pin@x2.png",iconSize:[70,110],iconAnchor:[-18,55]});"unConfirmed"==e.reportButton.state&&(e.reportButton.text="Confirmar",e.reportButton.state="about2Confirm",n.getMap().then(function(n){t=new L.marker(n.getCenter(),{icon:o,clickable:!1}).addTo(n),r._new(),r.current.setLatLng(n.getCenter()),e.ionAutocompleteElement=angular.element(document.getElementsByClassName("ion-autocomplete")),e.ionAutocompleteElement.bind("touchend click focus",e.onClick)}))},e.isNumeric=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},e.searchLocation=function(t){var n;if(t&&t.length>=2){if("calle.lugar"==e.searchMode)n=a.searchLocationByStr(t);else{if(e.isNumeric(t.trim())){var o=[],r={descTipo:"NUMERO",address:t,lat:t};return o[0]=r,o}n=a.searchEsquinaByStr({calle:e.selectedItem.lat,esquina:t})}return n}return[]},e.onClick=function(){e.ionAutocompleteElement.controller("ionAutocomplete").showModal()},e.itemsClicked=function(t){if(e.clickedValueModel=t,e.selectedItem=t.item,e.ionAutocompleteElementSearch=angular.element(document.getElementsByClassName("ion-autocomplete-search")),"esquina.numero"==e.searchMode){d.pathParams=[],e.location.esquina=e.selectedItem,d.pathParams.push(e.location.calle.lat),d.pathParams.push(e.location.esquina.lat);var n="",o="";e.isNumeric(e.selectedItem.address)?(d.tipo="DIRECCION",o="door"):(d.tipo="ESQUINA",n="esquina",o="corner"),a.getLocationGeomPMB(e.location.calle.lat,e.location.esquina.lat,o).then(function(t){var o=e.location.calle.address+" "+n+" "+e.selectedItem.address;i.goToPlace(o,t.data.latitude,t.data.longitude,e),e.searchMode="calle.lugar",e.ionAutocompleteElementSearch.attr("placeholder","Buscar calle"),e.externalModel=[]})}else e.location.calle=e.selectedItem,e.searchMode="esquina.numero",e.ionAutocompleteElementSearch.attr("placeholder","Esquina o número"),e.ionAutocompleteElement.controller("ionAutocomplete").showModal(),e.preselectedSearchItems=[]},e.itemsCanceled=function(t){var n=parseInt(t.searchQuery);Number.isInteger(n)&&(d.tipo="DIRECCION",d.pathParams.push(e.location.calle.codigo),d.pathParams.push(n),a.getLocationGeom(d).then(function(t){i.goToPlace(angular.extend({nombre:e.selectedItem.nombre+" "+n},t),e),e.searchMode="calle.lugar"},function(t){s.showAlert("Error","No existe esa direccion").then(function(t){e.ionAutocompleteElement.controller("ionAutocomplete").showModal()})}))}}]),pmb_im.services.factory("AuthService",["$http","$cordovaFileTransfer","ConfigService",function(e,t,n){var o=n.baseURL+"/auth/ajax/";return{sign_in:function(t,n){return e.get(o+"sign_in",{withCredentials:!0,params:{password_sign_in:t,email:n}})},sign_out:function(t,n){return e.get(o+"sign_out",{withCredentials:!0,params:{password_sign_in:t,email:n}})},create_user:function(t,n,r,a,i){return e.get(o+"create_user",{withCredentials:!0,params:{form_email:t,name:n,password_register:r,identity_document:a,phone:i}})},password_recovery:function(t){return e.get(o+"forgot_password",{params:{login_email:t}})},password_change:function(t,n,r,a){var i="email="+t+"&password_sign_in="+n+"&new_password="+r+"&confirm="+a;return e.post(o+"change_password",i,{headers:{"Content-Type":"application/x-www-form-urlencoded"}})},edit_user:function(n,r,a,i,l,s,c){if(null!=c&&""!=c){var u={fileKey:"photo",withCredentials:!0,params:{email:n,password_sign_in:r,name:a,new_email:i,identity_document:l,phone:s}},d=!0;return t.upload(o+"edit_user",c,u,d)}return e.get(o+"edit_user",{withCredentials:!0,params:{email:n,password_sign_in:r,name:a,new_email:i,identity_document:l,phone:s}})}}}]),pmb_im.services.factory("CategoriesService",["$http","LocationsService","ConfigService","DBService",function(e,t,n,o){var r=n.baseURL+"/report/new/ajax",a=n.baseURL+"/api/categories/";return{all:function(){return e.get(r,{params:{lat:t.new_report_lat,lon:t.new_report_lng,format:"json"}})},allFromBodyArea:function(t){return e.get(a,{params:{api_key:"1234",area:t}})},getCachedCategories:function(){return o.getCategories()}}}]),pmb_im.services.factory("ConfigService",["$http",function(e){var t={};return t.baseURL="/data",ionic.Platform.isWebView()&&(t.baseURL="https://pormibarrioapp.freyja.datauy.org"),t.baseCobrand="/cobrands/pormibarrio",t}]),pmb_im.services.factory("ConnectivityService",["$cordovaNetwork",function(e){return{isOnline:function(){return!0},isOffline:function(){return!1}}}]),pmb_im.services.factory("DBService",["$q",function(e){function t(t,o,r,a,i,l){var s={_id:"user-logged",name:t,email:o,password:r,identity_document:a,phone:i,picture_url:l};n().then(function(t){return s._rev=t._rev,e.when(m.put(s))})["catch"](function(t){return e.when(m.put(s))})}function n(){return e.when(m.get("user-logged"))}function o(){e.when(m.get("user-logged")).then(function(t){return e.when(m.remove(t))})}function r(){return m=new PouchDB("mydb.db",{adapter:"cordova-sqlite",iosDatabaseLocation:"Library"})}function a(t){var n=new Date,o="report_"+n.getFullYear()+(n.getMonth()+1)+n.getDate()+n.getMilliseconds();return t._id=o,e.when(m.put(t))}function i(t){return e.when(m.put(t))}function l(){return e.when(m.get("categories-list"))}function s(t){l().then(function(n){return t._rev=n._rev,e.when(m.put(t))})["catch"](function(n){return t._id="categories-list",e.when(m.put(t))})}function c(t){return e.when(m.get(t))}function u(){return e.when(m.allDocs({include_docs:!0,attachments:!1,startkey:"report",endkey:"report_"}))}function d(t){e.when(db.get(t)).then(function(t){return e.when(m.remove(t))})}function p(t){return e.when(m.remove(t))}var m;return{initDB:r,saveUser:t,getUser:n,eraseUser:o,saveReport:a,getReport:c,getAllReports:u,updateReport:i,deleteReport:d,deleteGivenReport:p,getCategories:l,saveCategories:s}}]),pmb_im.services.factory("ErrorService",["$http","$ionicPopup","ValidationService",function(e,t,n){return{http_response_is_successful:function(e,t){var n=document.getElementById(t);return 0==e.data.result?(n.innerHTML="<h3>"+e.data.message+"</h3>",n.style.display="block",!1):(n.style.display="none",!0)},http_response_is_successful_ajax:function(e){return 0!=e.data.result},http_response_is_successful_popup:function(e){if(0==e.data.result){var n=t.alert({title:"Error",template:e.data.message});return n.then(function(e){return!1}),!1}return!0},http_data_response_is_successful:function(e,t){var n=document.getElementById(t);return 0==e.result?(n.innerHTML="<h3>"+e.message+"</h3>",n.style.display="block",!1):(n.style.display="none",!0)},http_data_response_is_successful_ajax:function(e){return 0!=e.result},show_error_message:function(e,t){var n=document.getElementById(e);return n.innerHTML="<h3>"+t+"</h3>",n.style.display="block",!1},show_error_message_popup:function(e){var n=t.alert({title:"Error",template:e});return n.then(function(e){return!1}),!1},check_fields:function(e,t){var o="";if(e.forEach(function(e){"notNull"==e.type&&(n.validate_not_empty(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no puede estar vacío.</h3>')),"email"==e.type&&(n.validate_email(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no es una dirección de correo válida.</h3>')),"iddoc_uy"==e.type&&(n.validate_iddoc_uy(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no es una cédula uruguaya válida.</h3>')),"two_words"==e.type&&(n.validate_two_words(e.value)||(o=o+'<h3>- El campo "'+e.name+'" debe contener al menos dos palabras.</h3>')),"equalsTo"==e.type&&(n.validate_equalsTo(e.value,e.secondValue)||(o=o+'<h3>- Los campos "'+e.name+'" no coinciden.</h3>'))}),""==o)return!0;var r=document.getElementById(t);return r.innerHTML=o,r.style.display="block",!1}}}]),pmb_im.services.factory("FaqService",["$http","ConfigService",function(e,t){var n=t.baseURL+"/faq";return{all:function(){return e.get(n,{params:{ajax:"1"}})}}}]),pmb_im.services.factory("Loader",["$ionicLoading","$timeout","$ionicPopup",function(e,t,n){var o={showLoading:function(t){t=t||"Loading...",e.show({template:t})},hideLoading:function(){e.hide()},toggleLoadingWithMessage:function(e,n){var o=this;o.showLoading(e),t(function(){o.hideLoading()},n||3e3)},confirmPopup:function(e,t){var o=n.confirm({title:e,template:t});return o},showAlert:function(e,t){var o=n.alert({title:e,template:t});return o}};return o}]),pmb_im.services.factory("LocationsService",[function(){var e={};return e.initial_lat="",e.initial_lng="",e.new_report_lat="",e.new_report_lng="",e.council_modal=null,e.selected_council=null,e.selectCouncil=function(t){e.selected_council=t},e.save_initial_position=function(t){e.initial_lat=t.coords.latitude,e.initial_lng=t.coords.longitude},e.save_new_report_position=function(t,n){e.new_report_lat=t,e.new_report_lng=n,e.initial_lat=t,e.initial_lng=n},e.savedLocations=[],e}]),pmb_im.services.factory("MapService",["leafletData","$compile",function(e,t){proj4.defs("EPSG:32721","+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs");var n={};return n.goToPlace=function(n,o,r,a){var i={type:"FeatureCollection",crs:{type:"name",properties:{name:"urn:ogc:def:crs:EPSG::32721"}},features:[{type:"Feature",geometry:{type:"Point",coordinates:[o,r]},properties:{nombre:n}}]};e.getMap().then(function(e){var n,o=L.Proj.geoJson(i,{pointToLayer:function(e,o){n=o;var r="<p align='center'>"+e.properties.nombre+" <br/> <a ng-click='new_report_from_latlon("+n.lat+","+n.lng+");'>Iniciar reporte aquí</a></p>",i=t(r)(a);return L.marker(o).bindPopup(i[0])}});o.addTo(e),e.setView(n,18),o.openPopup()})},n.centerMapOnCoords=function(t,n,o){e.getMap().then(function(e){e.setView(new L.LatLng(t,n),o)})},n}]),pmb_im.services.factory("ModalService",[function(){var e={};return e.activeModal=null,e.checkNoModalIsOpen=function(){e.activeModal&&(e.activeModal.hide(),e.activeModal.remove())},e}]),pmb_im.services.factory("PMBService",["$http","leafletData","$cordovaFileTransfer","ConfigService",function(e,t,n,o){var r=o.baseURL,a={report:function(t){if(console.log(t),t.file){var o={fileKey:"photo",fileName:"image.jpeg",chunkedMode:!1,mimeType:"image/jpeg",params:t,withCredentials:!0};o.headers={Connection:"Close"};var a=!0;return n.upload(r+"/report/new/mobile",t.file,o,a)}return e.get(r+"/report/new/mobile",{params:t})},subscribe:function(t,n){return e.get(r+"/alert/subscribe_ajax",{params:{rznvy:t,id:n,type:"updates"}})},abuse:function(t,n,o,a,i){return e.get(r+"/contact/submit_ajax",{params:{em:t,id:n,name:o,subject:a,message:i}})},hide:function(t){var n="/report/delete_ajax/"+t;return e.get(r+n,{params:{}})},comment:function(t){if(0==t.fixed&&delete t.fixed,null==t.state&&delete t.state,null==t.new_category&&delete t.new_category,t.photo){var o={fileKey:"photo",fileName:"image.jpeg",chunkedMode:!1,mimeType:"image/jpeg",params:t,withCredentials:!0};o.headers={Connection:"Close"};var a=!0;return n.upload(r+"/report/update",t.photo,o,a)}return e.get(r+"/report/update",{withCredentials:!0,params:t})},getAreas:function(t,n){var o="http://mapit.pormibarrio.uy/point/4326/"+t+","+n;return e.get(o,{params:{}})}};return a}]),pmb_im.services.factory("PopUpService",["$ionicPopup","ValidationService",function(e,t){return{show_alert:function(t,n){var o=e.alert({title:t,template:n});return o.then(function(e){return!0}),!0},confirmPopup:function(t,n){var o=e.confirm({title:t,template:n});return o},askForOneValuePopUp:function(n,o,r,a,i){$scope=n;var l=e.show({template:a+': <input type="text" id="one_value_popup"><div id="error_container_inside"></div>',title:o,subTitle:r,scope:$scope,buttons:[{text:"Cancelar"},{text:"<b>Enviar</b>",type:"button-positive",onTap:function(e){var n="",o=document.getElementById("one_value_popup").value;if("notNull"==i&&(t.validate_not_empty(o)||(n=n+'<h3>- El campo "'+a+'" no puede estar vacío.</h3>')),"email"==i&&(t.validate_email(o)||(n=n+'<h3>- El campo "'+a+'" no es una dirección de correo válida.</h3>')),"iddoc_uy"==i&&(t.validate_iddoc_uy(o)||(n=n+'<h3>- El campo "'+a+'" no es una cédula uruguaya válida.</h3>')),"two_words"==i&&(t.validate_two_words(o)||(n=n+'<h3>- El campo "'+a+'" debe contener al menos dos palabras.</h3>')),""==n)return o;var r=document.getElementById("error_container_inside");r.innerHTML=n,r.style.display="block",e.preventDefault()}}]});return l}}}]),pmb_im.services.factory("ReportService",["$http","leafletData","ConfigService",function(e,t,n){function o(e){angular.extend(this,e)}var r=n.baseURL+"/report/ajax/",a=n.baseURL+"/ajax_geo?bbox=-65.199387,-40.932178,-50.168488,-25.887061";return o.getById=function(t){var n=r+t;return e.get(n).then(function(e){return e})},o.getAll=function(){return e.get(a,{params:{}})},o._default=function(){var e={lat:0,lon:0,title:null,detail:null,may_show_name:1,category:null,phone:null,pc:"",file:null,name:null,email:null,submit_sign_in:1,password_sign_in:null,remember_me:1};return new o(e)},o._all=[],o.current={},o._new=function(){return o._default()},o.build=function(e){return new o(e)},o.prototype.setLatLng=function(e){this.lat=e.lat,this.lon=e.lng},o}]),pmb_im.services.factory("locationAPI",["$http","$q","ApiImEndpoint","ApiDataEndpoint","ConfigService","LocationsService",function(e,t,n,o,r,a){var i="ubicacionesRestProd",l={};return l.searchLocationByStr=function(t){var n=r.baseURL+"/ajax/geocode?term="+a.selected_council+","+t;return e.get(n,{method:"GET",params:{}})},l.searchEsquinaByStr=function(t){var n=r.baseURL+"/ajax/geocode?term="+a.selected_council+","+t.calle+","+t.esquina;return e.get(n,{method:"GET",params:{}})},l.getLocationGeom=function(t){for(var o=n.url+"/"+i+l.getParamPathByTipo(t.tipo),r=0;r<t.pathParams.length;r++)o+="/"+t.pathParams[r];return e.get(baseURL).then(function(e){return e.data})},l.getLocationGeomPMB=function(t,n,o){var i=r.baseURL+"/ajax/geocode?term="+a.selected_council+","+t+","+n+","+o;return e.get(i)},l.getParamPathByTipo=function(e){var t={ESQUINA:"/esquina",DIRECCION:"/direccion"};return t[e]},l}]),pmb_im.services.factory("_",[function(){return window._}]),pmb_im.services.factory("UserService",["$http",function(e){var t={};return t.name=null,t.email=null,t.password=null,t.identity_document=null,t.phone="",t.picture_url="url(./img/icon-user-anonymous.png)",t.from_body=null,t.save_user_data=function(e,n,o,r,a,i){t.name=e,t.email=n,t.password=o,t.identity_document=r,t.phone=a,t.picture_url=i},t.erase_user_data=function(){t.name=null,t.email=null,t.password=null,t.identity_document=null,t.phone=null,t.picture_url=null},t.get_user_data=function(){},t.add_photo=function(e){t.picture_url=e},t.isLogged=function(){return null!=t.name&&""!=t.name},t}]),pmb_im.services.factory("ValidationService",["$http","$ionicPopup",function(e,t){return{validate_not_empty:function(e){return null!=e&&"undefined"!=e&&""!=e},validate_two_words:function(e){if(null!=e&&"undefined"!=e&&""!=e){var t=e.split(" ").filter(function(e){return""!==e});return t.length>1}return!1},validate_equalsTo:function(e,t){return e==t},validate_email:function(e){if(null!=e&&"undefined"!=e&&""!=e){var t=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t.test(e)}return!1},validate_iddoc_uy:function(e){if(null!=e&&"undefined"!=e&&""!=e){e=e.replace(/\D/g,"");var t=e[e.length-1],n=0,o=0;if(e.length<=6)for(o=e.length;o<7;o++)e="0"+e;for(o=0;o<7;o++)n+=parseInt("2987634"[o])*parseInt(e[o])%10;var r;return r=n%10===0?0:10-n%10,t==r}return!1}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2F1dG9jb21wbHRlLmN0cmwuanMiLCJjb250cm9sbGVycy9pbnRyby5jdHJsLmpzIiwiY29udHJvbGxlcnMvbWFwLmN0cmwuanMiLCJjb250cm9sbGVycy9wbWIuY3RybC5qcyIsInNlcnZpY2VzL2F1dGguc2VydmljZXMuanMiLCJzZXJ2aWNlcy9jYXRlZ29yaWVzLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9jb25maWcuc2VydmljZXMuanMiLCJzZXJ2aWNlcy9jb25uZWN0aXZpdHkuc2VydmljZXMuanMiLCJzZXJ2aWNlcy9kYi5zZXJ2aWNlcy5qcyIsInNlcnZpY2VzL2Vycm9yLnNlcnZpY2VzLmpzIiwic2VydmljZXMvZmFxLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9sb2FkZXIuc2VydmljZXMuanMiLCJzZXJ2aWNlcy9sb2NhdGlvbnNTZXJ2aWNlLmpzIiwic2VydmljZXMvbWFwLnNlcnZpY2VzLmpzIiwic2VydmljZXMvbW9kYWxTZXJ2aWNlLmpzIiwic2VydmljZXMvcG1iLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9wb3B1cC5zZXJ2aWNlcy5qcyIsInNlcnZpY2VzL3JlcG9ydC5zZXJ2aWNlLmpzIiwic2VydmljZXMvdWJpY2FjaW9uZXMuc2VydmljZXMuanMiLCJzZXJ2aWNlcy91bmRlcnNjb3JlLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy91c2VyLnNlcnZpY2VzLmpzIiwic2VydmljZXMvdmFsaWRhdGlvbi5zZXJ2aWNlcy5qcyJdLCJuYW1lcyI6WyJwbWJfaW0iLCJjb250cm9sbGVycyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJzZXJ2aWNlcyIsImFwcCIsImNvbnN0YW50IiwidXJsIiwicnVuIiwiJGlvbmljUGxhdGZvcm0iLCIkcm9vdFNjb3BlIiwiJGNvcmRvdmFLZXlib2FyZCIsIiRjb3Jkb3ZhTmV0d29yayIsIkRCU2VydmljZSIsIlZFUlNJT04iLCJ3aW5kb3ciLCJyZWFkeSIsImNvcmRvdmEiLCJwbHVnaW5zIiwiS2V5Ym9hcmQiLCJoaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIiLCJlcnJvciIsIlN0YXR1c0JhciIsImhpZGUiLCJpb25pYyIsIlBsYXRmb3JtIiwiaXNGdWxsU2NyZWVuIiwiaW5pdERCIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkY29tcGlsZVByb3ZpZGVyIiwiJGlvbmljQ29uZmlnUHJvdmlkZXIiLCJkZWJ1Z0luZm9FbmFibGVkIiwic3RhdGUiLCJjYWNoZSIsImFic3RyYWN0IiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwidmlld3MiLCJtZW51Q29udGVudCIsIm90aGVyd2lzZSIsIiRzY29wZSIsImxlYWZsZXREYXRhIiwibG9jYXRpb25BUEkiLCJpb25BdXRvY29tcGxldGVFbGVtZW50IiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImJpbmQiLCJvbkNsaWNrIiwic2hvd01vZGFsIiwic2VhcmNoTG9jYXRpb24iLCJxdWVyeSIsInNlYXJjaExvY2F0aW9uQnlTdHIiLCIkc3RhdGUiLCIkY29yZG92YUdlb2xvY2F0aW9uIiwiJHN0YXRlUGFyYW1zIiwiJGlvbmljUG9wdXAiLCJMb2NhdGlvbnNTZXJ2aWNlIiwiZ2VvbG9jYXRlIiwicG9zT3B0aW9ucyIsInRpbWVvdXQiLCJlbmFibGVIaWdoQWNjdXJhY3kiLCJnZXRDdXJyZW50UG9zaXRpb24iLCJ0aGVuIiwicG9zaXRpb24iLCJzYXZlX2luaXRpYWxfcG9zaXRpb24iLCJnbyIsImVyciIsIiRvbiIsImNvdW5jaWxfbW9kYWwiLCJyZW1vdmUiLCIkc2NlIiwiXyIsIiRjb3Jkb3ZhQ2FtZXJhIiwiJGNvcmRvdmFGaWxlVHJhbnNmZXIiLCIkY29tcGlsZSIsIiRpb25pY01vZGFsIiwiQ29uZmlnU2VydmljZSIsIlBNQlNlcnZpY2UiLCJSZXBvcnRTZXJ2aWNlIiwiRmFxU2VydmljZSIsIkNhdGVnb3JpZXNTZXJ2aWNlIiwiQXV0aFNlcnZpY2UiLCJVc2VyU2VydmljZSIsIiR0aW1lb3V0IiwiJGxvY2F0aW9uIiwiRXJyb3JTZXJ2aWNlIiwiJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZSIsIiRpb25pY1Njcm9sbERlbGVnYXRlIiwiUG9wVXBTZXJ2aWNlIiwiQ29ubmVjdGl2aXR5U2VydmljZSIsIiRjb3Jkb3ZhSW5BcHBCcm93c2VyIiwiJGludGVydmFsIiwiTWFwU2VydmljZSIsIk1vZGFsU2VydmljZSIsImZlYXR1cmVSZXBvcnRzIiwicmVwb3J0c0J5U3RhdGUiLCJyZXBvcnRzVmlzaWJsZSIsImJhc2VVUkwiLCJ1c2VyX2NhY2hlZF9pbWFnZSIsInJlcG9ydF9kZXRhaWxfaWQiLCJvbmVfdmFsdWVfcG9wdXAiLCJhYnVzZV9uYW1lIiwiYWJ1c2VfZW1haWwiLCJhYnVzZV9zdWJqZWN0IiwiYWJ1c2VfbWVzc2FnZSIsImFsbENhdGVnb3JpZXNGcm9tQm95QXJlYSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc09ubGluZSIsImNoZWNrX3VzZXJfbG9nZ2VkIiwic2VuZF9vZmZsaW5lX3JlcG9ydHMiLCJzZXRfb2ZmbGluZV91c2VyIiwiY2hlY2tOb01vZGFsSXNPcGVuIiwic2V0X25ldHdvcmtfZXZlbnRzIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJjcmVhdGVfb25saW5lX21hcCIsImNyZWF0ZV9vZmZsaW5lX21hcCIsIm9wZW5XZWJzaXRlIiwib3B0aW9ucyIsImxvY2F0aW9uIiwiY2xlYXJjYWNoZSIsInRvb2xiYXIiLCJvcGVuIiwiZXZlbnQiLCJpc1dlYlZpZXciLCJuZXR3b3JrU3RhdGUiLCJlIiwic2VuZF9vZmZsaW5lX3JlcG9ydHNfZnJvbV9tZW51IiwibGlzdF9vZmZsaW5lX3JlcG9ydHMiLCJzaG93X2FsZXJ0IiwicmVwb3J0cyIsImdldEFsbFJlcG9ydHMiLCJyZXN1bHQiLCJ0b3RhbF9yb3dzIiwicm93cyIsImZvckVhY2giLCJyb3ciLCJyZXBvcnQiLCJkb2MiLCJyZXBvcnRfc2VudCIsImZpbGUiLCJzdWNjZXNzIiwiZGF0YSIsInN0YXR1cyIsImhlYWRlcnMiLCJodHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bF9hamF4IiwiZGVsZXRlUmVwb3J0IiwiX2lkIiwicmVzcCIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlIiwicHJvZ3Jlc3MiLCJzZW5kX29mZmxpbmVfcmVwb3J0IiwibWFwIiwiZGVmYXVsdHMiLCJ0aWxlTGF5ZXIiLCJtaW5ab29tIiwibWF4Wm9vbSIsInpvb21Db250cm9sUG9zaXRpb24iLCJtYXJrZXJzIiwiZXZlbnRzIiwiZW5hYmxlIiwibG9naWMiLCJjZW50ZXIiLCJsb2FkUGluc0xheWVyIiwibmV3X3JlcG9ydF9sYXQiLCJsYXQiLCJsbmciLCJuZXdfcmVwb3J0X2xuZyIsInpvb20iLCJnZXRNYXAiLCJvbiIsImhpZGVPZmZTY3JlZW5QaW5zIiwibmV3X3JlcG9ydF9mcm9tX2xhdGxvbiIsImluaXRpYWxfbGF0IiwiaW5pdGlhbF9sbmciLCJuZXdfcmVwb3J0IiwiYWxyZWFkeUxvY2F0ZWQiLCJzZXRfYWN0aXZlX29wdGlvbiIsImhpZGVfc3BlY2lhbF9kaXZzIiwiX25ldyIsImxvbiIsImFsbCIsImh0dHBfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bF9wb3B1cCIsInNhdmVDYXRlZ29yaWVzIiwic2hvd19yZXBvcnRfZm9ybSIsImNhdGVnb3JpZXMiLCJjYXRlZ29yaWVzRG9jIiwiZ2V0Q2FjaGVkQ2F0ZWdvcmllcyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJhZGRNYXBDb250cm9scyIsImVkaXRPZmZsaW5lUmVwb3J0IiwicmVwb3J0SWQiLCJvZmZsaW5lUmVwb3J0cyIsInNob3dfb2ZmbGluZV9yZXBvcnRfZm9ybSIsImRlbGV0ZU9mZmxpbmVSZXBvcnQiLCJmcm9tVGVtcGxhdGVVcmwiLCJzY29wZSIsImFuaW1hdGlvbiIsIm1vZGFsIiwiYWN0aXZlTW9kYWwiLCJzaG93IiwidXBkYXRlT2ZmbGluZVJlcG9ydCIsImZpZWxkcyIsIkFycmF5IiwicHVzaCIsImNyZWF0ZV9maWVsZF9hcnJheSIsImVtYWlsIiwicGFzc3dvcmRfc2lnbl9pbiIsImNhdGVnb3J5IiwidGl0bGUiLCJkZXRhaWwiLCJjaGVja19maWVsZHMiLCJ1cGRhdGVSZXBvcnQiLCJiYWNrX3RvX21hcCIsImxpc3RfcmVwb3J0cyIsIm9mZmxpbmVSZXBvcnRzTWFya2VycyIsIm9wZW5Qb3B1cCIsImNsZWFuT2ZmbGluZU1hcmtlcnMiLCJlYWNoTGF5ZXIiLCJsYXllciIsIl91cmwiLCJhbHQiLCJyZW1vdmVMYXllciIsImRlbGV0ZU9mZmxpbmVSZXBvcnRPayIsImlkIiwiZGVsZXRlR2l2ZW5SZXBvcnQiLCJtYXJrZXIiLCJpc0xvZ2dlZCIsIm5hbWUiLCJwYXNzd29yZCIsInBob25lIiwiaGFyZHdhcmVCYWNrQnV0dG9uQ2xvc2UiLCJ0ZW1wbGF0ZSIsImNhdGVnb3J5Z3JvdXAiLCJjYXRlZ29yaWVzX3NlbGVjdCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWwiLCJ1cGRhdGVfc3ViY2F0ZWdvcmllcyIsInN1Yl9zZWxlY3RfaWQiLCJzdWJfY2F0ZWdvcmllc19zZWxlY3QiLCJhbGxfc3ViY2F0c19zZWxlY3RzX2FjdGl2ZSIsImNsYXNzTmFtZSIsImlkQ2F0IiwiYWN0aXZlX3NlbGVjdCIsImFidXNlIiwiY29uZmlybUFidXNlIiwic3ViVGl0bGUiLCJidXR0b25zIiwidGV4dCIsInR5cGUiLCJvblRhcCIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJyZXMiLCJodHRwX3JlcXVlc3QiLCJzZW5kX2NvbW1lbnQiLCJjb21tZW50IiwidXBkYXRlIiwiY29tbWVudF9zZW50IiwicGhvdG8iLCJzaG93X2Vycm9yX21lc3NhZ2UiLCJ1cGxvYWRQcm9ncmVzcyIsImxvYWRlZCIsInRvdGFsIiwiaW5uZXJIVE1MIiwiTWF0aCIsInJvdW5kIiwic3Vic2NyaWJlIiwiY29uZmlybVN1YnNjcmliZSIsImNvbmZpcm1Qb3B1cCIsImFza0Zvck9uZVZhbHVlUG9wVXAiLCJjb25maXJtSGlkZSIsImNvbmZpcm1SZXBvcnQiLCJodHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bCIsInJlcG9ydGVFbnZpYWRvIiwiY29uc29sZSIsImxvZyIsInNldFZpZXciLCJMIiwiTGF0TG5nIiwic2F2ZV9vZmZsaW5lX3JlcG9ydCIsIm5leHQiLCJwcmV2aW91cyIsImNvbmZpcm1SZXBvcnRXaXRoTG9naW4iLCJzaWduX2luIiwiaHR0cF9yZXNwb25zZV9pc19zdWNjZXNzZnVsIiwic2F2ZV91c2VyX2RhdGEiLCJpZGVudGl0eV9kb2N1bWVudCIsInBpY3R1cmVfdXJsIiwiZnJvbV9ib2R5Iiwic2F2ZVVzZXIiLCJzZXRfdXNlcl9waWN0dXJlIiwic3RhdHVzVGV4dCIsImRhdGUiLCJEYXRlIiwiZGF5IiwiZ2V0RGF0ZSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJzYXZlUmVwb3J0IiwiY2FuY2VsUmVwb3J0IiwiaW1hZ2UiLCJhZGRJbWFnZSIsImlzRnJvbUFsYnVtIiwiaXNVc2VyUGhvdG8iLCJpc0NvbW1lbnRQaG90byIsInNvdXJjZSIsIkNhbWVyYSIsIlBpY3R1cmVTb3VyY2VUeXBlIiwiQ0FNRVJBIiwiZml4X29yaWVudGF0aW9uIiwic2F2ZV90b19nYWxsZXJ5IiwiUEhPVE9MSUJSQVJZIiwicXVhbGl0eSIsImRlc3RpbmF0aW9uVHlwZSIsIkRlc3RpbmF0aW9uVHlwZSIsIkZJTEVfVVJJIiwic291cmNlVHlwZSIsImFsbG93RWRpdCIsImNvcnJlY3RPcmllbnRhdGlvbiIsImVuY29kaW5nVHlwZSIsIkVuY29kaW5nVHlwZSIsIkpQRUciLCJwb3BvdmVyT3B0aW9ucyIsIkNhbWVyYVBvcG92ZXJPcHRpb25zIiwic2F2ZVRvUGhvdG9BbGJ1bSIsIm1lZGlhVHlwZSIsIk1lZGlhVHlwZSIsIlBJQ1RVUkUiLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsImdldFBpY3R1cmUiLCJpbWFnZURhdGEiLCJvbkltYWdlU3VjY2VzcyIsImZpbGVVUkkiLCJyZXNvbHZlTG9jYWxGaWxlU3lzdGVtVVJMIiwiZmlsZUVudHJ5IiwidG9VUkwiLCJmdWxsRmlsZVBhdGgiLCJwcm9maWxlIiwiaW1nVVJJIiwiY3JlYXRlRmlsZUVudHJ5IiwiY29weUZpbGUiLCJmYWlsIiwiZnVsbFBhdGgiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsIm5ld05hbWUiLCJtYWtlaWQiLCJkYXRhRGlyZWN0b3J5IiwiZmlsZVN5c3RlbTIiLCJjb3B5VG8iLCJvbkNvcHlTdWNjZXNzIiwiZW50cnkiLCIkYXBwbHkiLCJuYXRpdmVVUkwiLCJwb3NzaWJsZSIsImkiLCJjaGFyQXQiLCJmbG9vciIsInJhbmRvbSIsInVybEZvckltYWdlIiwiaW1hZ2VVUkwiLCJsaXN0X29mZmxpbmVfcmVwb3J0c19tZW51IiwiZGl2IiwiYWRkX29mZmxpbmVfcmVwb3J0X2RpdiIsIm1hcmtlck9wdGlvbnMiLCJhZGRUbyIsIm1hcmtlckhUTUwiLCJjb21waWxlZCIsImJpbmRQb3B1cCIsImh0bWwiLCJjb250ZW50cyIsIiRicm9hZGNhc3QiLCJsaXN0X3JlcG9ydHNfYW5kX2dvIiwiZ29Ub09mZmxpbmVSZXBvcnQiLCJoZWxwIiwiZmFxIiwidHJ1c3RBc0h0bWwiLCJzY3JvbGxNZSIsImFuY2hvcl9pZCIsImhhc2giLCJoYW5kbGUiLCIkZ2V0QnlIYW5kbGUiLCJhbmNob3JTY3JvbGwiLCJjbG9zZV9mYXFfbW9kYWwiLCJidXR0b25pZCIsInZpZXdSZXBvcnREZXRhaWxzIiwiZ2V0QnlJZCIsInJlcG9ydF9kZXRhaWwiLCJyZXBsYWNlIiwiYmFzZUNvYnJhbmQiLCJzdWJtaXRfdXBkYXRlIiwibWF5X3Nob3dfbmFtZSIsImFkZF9hbGVydCIsImZpeGVkIiwiZm9ybV9yem52eSIsImZlYXR1cmUiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiZ2V0QXJlYXMiLCJqc29uT2JqZWN0IiwiaXNCb2R5QWRtaW4iLCJwcm9wIiwiYXJlYUlkIiwiYXJlYVByb3BzIiwibmV3X2NhdGVnb3J5IiwicHJvcGVydGllcyIsImFsbEZyb21Cb2R5QXJlYSIsImpzb25BcmVhT2JqZWN0IiwiaW5kZXgiLCJzaG93X2Vycm9yX21lc3NhZ2VfcG9wdXAiLCJjbG9zZV9yZXBvcnRfZGV0YWlsX21vZGFsIiwibG9jYXRlIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJub3ciLCJtZXNzYWdlIiwiZm9jdXMiLCJkcmFnZ2FibGUiLCJzdGFydFJlcG9ydEZyb21Dcm9zc2hhaXJzIiwibGF0bG9uIiwiZ2V0Q2VudGVyIiwic2F2ZV9uZXdfcmVwb3J0X3Bvc2l0aW9uIiwiZ2V0T25seUNhdGVnb3J5SWNvblVSTCIsIm5ld191cmwiLCJtYXBCb3VuZHMiLCJnZXRCb3VuZHMiLCJrZXlzQXJyYXkiLCJpdGVtIiwia2V5Iiwic2hvdWxkQmVWaXNpYmxlIiwiY29udGFpbnMiLCJnZXRMYXRMbmciLCJhZGRMYXllciIsInJlbW92ZUFsbFBpbnMiLCJnZXRBbGwiLCJwaW5zQXJyYXkiLCJmZWF0dXJlcyIsImljb24iLCJwaW5fdXJsIiwibWFya2VySWNvbiIsImljb25VcmwiLCJpY29uU2l6ZSIsImljb25BbmNob3IiLCJwb3B1cEFuY2hvciIsImRlc2NyaXBjaW9uIiwiYWRkUmVwb3J0c0xheWVyIiwianNvbkxheWVyIiwiYnVpbGRQb3B1cCIsIm9uRWFjaEZlYXR1cmUiLCJsIiwiTGF5ZXJKU09OIiwibG9jQXNHZW9KU09OIiwiX2xheWVyIiwic2V0SWNvbiIsInVuZGVmaW5lZCIsImdvVG9SZXBvcnQiLCJyZXBvcnRfZGl2c19hY3RpdmUiLCJyZXBvcnRfZGl2IiwibW9kZWwiLCJleHRlcm5hbE1vZGVsIiwic2VsZWN0ZWRJdGVtcyIsInByZXNlbGVjdGVkU2VhcmNoSXRlbXMiLCJjbGlja2VkVmFsdWVNb2RlbCIsInJlbW92ZWRWYWx1ZU1vZGVsIiwiZ2V0VGVzdEl0ZW1zIiwib2JqIiwidG9SZXR1cm4iLCJpdGVtcyIsInZpZXciLCJpdGVtc1JlbW92ZWQiLCJjYWxsYmFjayIsInVzZXJfb3B0aW9ucyIsIm1lbnUiLCJzaG93X2Fub255bW91c19tZW51Iiwic2hvd191c2VyX21lbnUiLCJoZWlnaHQiLCJ3aWR0aCIsImZvcmdvdF9wYXNzd29yZCIsIm5vbmF1dGgiLCJmb3Jnb3RfcGFzc3dvcmRfb2siLCJwYXNzd29yZF9yZWNvdmVyeSIsImNoYW5nZV9wYXNzd29yZCIsIm9sZFBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmQiLCJjaGFuZ2VfcGFzc3dvcmRfb2siLCJjcmVhdGVfZmllbGRfYXJyYXlfd2l0aF90d29GaWVsZHMiLCJwYXNzd29yZF9jaGFuZ2UiLCJmaWVsZCIsInNlY29uZFZhbHVlIiwiZml4X2ZiX2ltYWdlX2xpbmsiLCJpbmRleE9mIiwicGFydHMiLCJzcGxpdCIsIm5ld1VybCIsImNsb3NlX2xvZ2luX21vZGFsIiwic2lnbl9pbl9hamF4IiwiaHR0cF9yZXNwb25zZV9pc19zdWNjZXNzZnVsX2FqYXgiLCJzaWduX291dCIsImVyYXNlX3VzZXJfZGF0YSIsImVyYXNlVXNlciIsInNob3dfZWRpdF9wcm9maWxlX21vZGFsIiwiZnVsbG5hbWUiLCJuZXdfZW1haWwiLCJpZF9kb2MiLCJ0ZWxlcGhvbmUiLCJhY3R1YWxfcGhvdG8iLCJjbG9zZV9lZGl0X3Byb2ZpbGVfbW9kYWwiLCJlZGl0X3Byb2ZpbGVfb2siLCJlZGl0X3Byb2ZpbGUiLCJ1c2VyX3Bob25lIiwidXNlcl9waWN0dXJlX3VybCIsImVkaXRfcmVxdWVzdCIsImVkaXRfdXNlciIsImFsZXJ0IiwiY29kZSIsInRhcmdldCIsImh0dHBfc3RhdHVzIiwiYm9keSIsImV4Y2VwdGlvbiIsInNob3dfbG9naW5fbW9kYWwiLCJsb2dpbl9vayIsInNob3dfc2lnbl91cF9tb2RhbCIsIm5ld3VzZXIiLCJjbG9zZV9zaWduX3VwX21vZGFsIiwic2lnbl91cCIsImNyZWF0ZV91c2VyIiwiYWxlcnRQb3B1cCIsInNpZ25fdXBfb2siLCJ1c2VyIiwiZ2V0VXNlciIsImhhc1Bob3RvIiwiZmluZF9tZSIsImdldE1lc3NhZ2VTY29wZSIsIm9wZW5Db3VuY2lsU2VsZWN0b3IiLCJsb2NhdGlvbkV2ZW50IiwibGVhZmxldEV2ZW50IiwibGF0bG5nIiwic2VsZWN0X2ltbSIsImNsb3NlX2NvdW5jaWxfbW9kYWwiLCJzZWxlY3RDb3VuY2lsIiwiY2VudGVyTWFwT25Db29yZHMiLCJzZWxlY3RfaWRyIiwic2VsZWN0X2lybiIsIkxvYWRlciIsInJlcG9ydEJ1dHRvbiIsInNlYXJjaE1vZGUiLCJjYWxsZSIsImVzcXVpbmEiLCJsdWdhciIsImxvY2F0aW9uR2VvbVBhcmFtcyIsInRpcG8iLCJwYXRoUGFyYW1zIiwiaW5pdFJlcG9ydCIsIl9waW4iLCJfcGluSWNvbiIsImNsaWNrYWJsZSIsImN1cnJlbnQiLCJzZXRMYXRMbmciLCJpc051bWVyaWMiLCJuIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJwcm9taXNlU2VhcmNoIiwidHJpbSIsImRlc2NUaXBvIiwiYWRkcmVzcyIsInNlYXJjaEVzcXVpbmFCeVN0ciIsInNlbGVjdGVkSXRlbSIsIml0ZW1zQ2xpY2tlZCIsImlvbkF1dG9jb21wbGV0ZUVsZW1lbnRTZWFyY2giLCJzdHJfdGlwbyIsImdldExvY2F0aW9uR2VvbVBNQiIsImdvVG9QbGFjZSIsImF0dHIiLCJpdGVtc0NhbmNlbGVkIiwiX2l0ZW0iLCJudW1QdWVydGEiLCJwYXJzZUludCIsInNlYXJjaFF1ZXJ5IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiY29kaWdvIiwiZ2V0TG9jYXRpb25HZW9tIiwiZXh0ZW5kIiwibm9tYnJlIiwic2hvd0FsZXJ0IiwiZmFjdG9yeSIsIiRodHRwIiwiZ2V0Iiwid2l0aENyZWRlbnRpYWxzIiwicGFyYW1zIiwiZm9ybV9lbWFpbCIsInBhc3N3b3JkX3JlZ2lzdGVyIiwibG9naW5fZW1haWwiLCJwb3N0IiwiQ29udGVudC1UeXBlIiwiZmlsZUtleSIsInRydXN0QWxsSG9zdHMiLCJ1cGxvYWQiLCJiYXNlVVJMZnJvbUFQSSIsImZvcm1hdCIsImFwaV9rZXkiLCJhcmVhIiwiZ2V0Q2F0ZWdvcmllcyIsIkNvbmZpZ09iaiIsImlzT2ZmbGluZSIsIiRxIiwidXNlcl9uYW1lIiwidXNlcl9lbWFpbCIsInVzZXJfcGFzc3dvcmQiLCJ1c2VyX2lkX2RvYyIsIl9yZXYiLCJ3aGVuIiwiX2RiIiwicHV0IiwiUG91Y2hEQiIsImFkYXB0ZXIiLCJpb3NEYXRhYmFzZUxvY2F0aW9uIiwibmV3X3JlcG9ydF9pZCIsImdldE1pbGxpc2Vjb25kcyIsImdldFJlcG9ydCIsImFsbERvY3MiLCJpbmNsdWRlX2RvY3MiLCJhdHRhY2htZW50cyIsInN0YXJ0a2V5IiwiZW5ka2V5IiwicmVwb3J0X2lkIiwiZGIiLCJWYWxpZGF0aW9uU2VydmljZSIsImpzb25SZXN1bHQiLCJlcnJvckNvbnRhaW5lcklkIiwiZXJyb3JEaXYiLCJlcnJvcnMiLCJ2YWxpZGF0ZV9ub3RfZW1wdHkiLCJ2YWxpZGF0ZV9lbWFpbCIsInZhbGlkYXRlX2lkZG9jX3V5IiwidmFsaWRhdGVfdHdvX3dvcmRzIiwidmFsaWRhdGVfZXF1YWxzVG8iLCJhamF4IiwiJGlvbmljTG9hZGluZyIsIkxPQURFUkFQSSIsInNob3dMb2FkaW5nIiwiaGlkZUxvYWRpbmciLCJ0b2dnbGVMb2FkaW5nV2l0aE1lc3NhZ2UiLCJzZWxmIiwidGhpcyIsImNvbmZpcm0iLCJfdGl0bGUiLCJfdGVtcGxhdGUiLCJsb2NhdGlvbnNPYmoiLCJzZWxlY3RlZF9jb3VuY2lsIiwiY291bmNpbE5hbWUiLCJzYXZlZExvY2F0aW9ucyIsInByb2o0IiwiZGVmcyIsIm1hcFNlcnZpY2UiLCJfZ2VvSnNvbiIsImNycyIsIl9sYXRsbmciLCJQcm9qIiwiZ2VvSnNvbiIsInBvaW50VG9MYXllciIsImh0bWxQb3BVcCIsIm1vZGFsT0JKIiwiYmFzZSIsImZvcm0iLCJmaWxlTmFtZSIsImNodW5rZWRNb2RlIiwibWltZVR5cGUiLCJDb25uZWN0aW9uIiwicnpudnkiLCJzdWJqZWN0IiwiZW0iLCJkZWxldGVVUkwiLCJtYXBpdFVSTCIsImFsZXJ0X3RpdGxlIiwiYWxlcnRfbWVzc2FnZSIsImZpZWxkX25hbWUiLCJ2YWxpZGF0aW9uVHlwZSIsIm15UG9wdXAiLCJSZXBvcnQiLCJfZGF0YSIsInBpbnNVUkwiLCJfZGVmYXVsdCIsInBjIiwic3VibWl0X3NpZ25faW4iLCJyZW1lbWJlcl9tZSIsIl9hbGwiLCJidWlsZCIsInByb3RvdHlwZSIsIkFwaUltRW5kcG9pbnQiLCJBcGlEYXRhRW5kcG9pbnQiLCJyZXN0UHJlZmZpeCIsIl9sb2NhdGlvbiIsIm1ldGhvZCIsImdldFBhcmFtUGF0aEJ5VGlwbyIsImVzcXVpbmFfbnVtZXJvIiwiX3RpcG8iLCJyZXN0R2VvRGF0YVNlcnZpY2VQYXRoIiwiRVNRVUlOQSIsIkRJUkVDQ0lPTiIsIlVzZXJPYmoiLCJnZXRfdXNlcl9kYXRhIiwiYWRkX3Bob3RvIiwidmFsdWVzIiwiZmlsdGVyIiwidiIsInJlIiwidGVzdCIsImRpZyIsImEiXSwibWFwcGluZ3MiOiJBQU9BLEdBQUlBLFNBQ0ZDLFlBQWFDLFFBQVFDLE9BQU8seUJBQzVCQyxTQUFVRixRQUFRQyxPQUFPLHNCQUczQkgsUUFBT0ssSUFBTUgsUUFBUUMsT0FBTyxVQUFXLFFBQVEsZUFBZSxtQkFBbUIsb0JBQXFCLHFCQUFzQixrQkFBbUIsWUFBYSxvQkFFM0pHLFNBQVMsaUJBQ1JDLElBQUssaUNBR05ELFNBQVMsbUJBQ1JDLElBQUssVUFJTkMsS0FBQSxpQkFBQSxhQUFBLG1CQUFBLGtCQUFBLFlBQUksU0FBU0MsRUFBZ0JDLEVBQVlDLEVBQWlCQyxFQUFnQkMsR0FDekVILEVBQVdJLFFBQVVDLE9BQU9ELFFBQzVCTCxFQUFlTyxNQUFNLFdBR2pCLElBQ0VDLFFBQVFDLFFBQVFDLFNBQVNDLDBCQUF5QixHQUVuRCxNQUFPQyxJQUdSLElBQ0VOLE9BQU9JLFNBQVNDLDBCQUF5QixHQUUxQyxNQUFPQyxJQUlSLElBQ0VGLFNBQVNDLDBCQUF5QixHQUVuQyxNQUFPQyxJQUdSLElBQ0VDLFVBQVVDLE9BRVgsTUFBT0YsSUFJVkcsTUFBTUMsU0FBU0MsY0FBZSxDQUVyQmIsR0FBVWMsY0FNdEJDLFFBQUEsaUJBQUEscUJBQUEsbUJBQUEsdUJBQU8sU0FBU0MsRUFBZ0JDLEVBQW9CQyxFQUFrQkMsR0FDckVELEVBQWlCRSxrQkFBaUIsR0FPbENKLEVBRURLLE1BQU0sT0FDSEMsT0FBTyxFQUNQNUIsSUFBSyxPQUNMNkIsWUFBVSxFQUNWQyxZQUFhLHNCQUNiQyxXQUFZLGtCQUdmSixNQUFNLFdBQ0hDLE9BQU8sRUFDUDVCLElBQUssUUFDTGdDLE9BQ0VDLGFBQ0VILFlBQWEscUJBQ2JDLFdBQWEsY0FLcEJKLE1BQU0sYUFDTEMsT0FBTyxFQUNQNUIsSUFBSyxTQUNMZ0MsT0FDRUMsYUFDRUgsWUFBYSx1QkFDYkMsV0FBYSxnQkFNbkJSLEVBQW1CVyxVQUFVLGlCQ3ZHN0J6QyxPQUFPQyxZQUFZcUMsV0FBVyxvQkFBcUIsU0FBVSxjQUFlLGNBQWUsU0FBU0ksRUFBUUMsRUFBYUMsR0FHdkhGLEVBQU9HLHVCQUF5QjNDLFFBQVE0QyxRQUFRQyxTQUFTQyx1QkFBdUIscUJBQ2hGTixFQUFPRyx1QkFBdUJJLEtBQUssdUJBQXdCUCxFQUFPUSxTQUVsRVIsRUFBT1EsUUFBVSxXQUVmUixFQUFPRyx1QkFBdUJQLFdBQVcsbUJBQW1CYSxhQU85RFQsRUFBT1UsZUFBaUIsU0FBU0MsR0FDL0IsR0FBSUEsRUFFRixNQUFPVCxHQUFZVSxvQkFBb0JELE9DbEI3Q3JELE9BQU9DLFlBQVlxQyxXQUFXLGFBQWMsU0FBVSxTQUNwRCxzQkFDQSxlQUNBLGlCQUNBLGNBQ0EsbUJBQ0EsWUFDQSxTQUFTSSxFQUFRYSxFQUFRQyxFQUFxQkMsRUFBY2hELEVBQWdCaUQsRUFBYUMsRUFBa0I5QyxHQUczRzZCLEVBQU9rQixVQUFZLFdBRWYsR0FBSUMsSUFBY0MsUUFBUyxLQUFNQyxvQkFBb0IsRUFDckRQLEdBQ0dRLG1CQUFtQkgsR0FDbkJJLEtBQUssU0FBU0MsR0FDYlAsRUFBaUJRLHNCQUFzQkQsR0FDdkNYLEVBQU9hLEdBQUcsWUFDVCxTQUFTQyxHQUNWZCxFQUFPYSxHQUFHLGNBSWpCMUIsRUFBTzRCLElBQUksbUJBQW9CLFdBQ08sTUFBaENYLEVBQWlCWSxnQkFDbEJaLEVBQWlCWSxjQUFjaEQsT0FDL0JvQyxFQUFpQlksY0FBY0MsVUFFaEM5QixFQUFPa0IsaUJDNUJkNUQsT0FBT0MsWUFBWXFDLFdBQVcsaUJBQWtCLFNBQVUsT0FBUSxJQUNoRSxpQkFDQSx1QkFDQSxzQkFDQSxXQUNBLFNBQ0EsZUFDQSxjQUNBLGNBQ0EsY0FDQSxnQkFDQSxhQUNBLG1CQUNBLGdCQUNBLGFBQ0Esb0JBQ0EsY0FDQSxjQUNBLFlBQ0EsV0FDQSxZQUNBLGVBQ0EseUJBQ0EsdUJBQ0Esa0JBQ0EsZUFDQSxpQkFDQSxzQkFDQSx1QkFDQSxZQUNBLG1CQUNBLGFBQ0EsZUFDQSxTQUNFSSxFQUNBK0IsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQXBCLEVBQ0FxQixFQUNBdEIsRUFDQUUsRUFDQXFCLEVBQ0FwQixFQUNBZixFQUNBb0MsRUFDQUMsRUFDQXJCLEVBQ0FzQixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBeEUsRUFDQXlFLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0E5RSxFQUNBK0UsRUFDQWxGLEVBQ0FtRixFQUNBQyxFQUNBQyxFQUNBbkYsRUFDQW9GLEVBQ0FDLEdBTUF0RCxFQUFPdUQsa0JBQ1B2RCxFQUFPd0Qsa0JBQ1B4RCxFQUFPeUQsa0JBQ1B6RCxFQUFPMEQsUUFBVXJCLEVBQWNxQixRQUMvQjFELEVBQU8yRCxrQkFBb0IsR0FDM0IzRCxFQUFPNEQsaUJBQW1CLEtBQzFCNUQsRUFBTzZELGdCQUFrQixLQUN6QjdELEVBQU84RCxXQUFhLEtBQ3BCOUQsRUFBTytELFlBQWMsS0FDckIvRCxFQUFPZ0UsY0FBZ0IsS0FDdkJoRSxFQUFPaUUsY0FBZ0IsS0FDdkJqRSxFQUFPa0UseUJBQTJCLEtBRWxDN0QsU0FBUzhELGlCQUFpQixjQUFlLFdBQ3BDakIsRUFBb0JrQixZQUNyQnBFLEVBQU9xRSxvQkFDUHJFLEVBQU9zRSx3QkFFUHRFLEVBQU91RSxxQkFHWHZFLEVBQU80QixJQUFJLHlCQUEwQixXQUNuQzBCLEVBQWFrQixxQkFDYnhFLEVBQU95RSxvQkFDbUJyQixHQUFVLFdBQ2xDcEQsRUFBT3NFLHdCQUNOLElBQ3FDLE9BQXJDakUsU0FBU3FFLGVBQWUsY0FDdkJyRSxTQUFTcUUsZUFBZSxZQUFZQyxNQUFNQyxRQUFVLFNBR3JEMUIsRUFBb0JrQixXQUNyQnBFLEVBQU82RSxvQkFFUDdFLEVBQU84RSx1QkFJWDlFLEVBQU8rRSxZQUFjLFNBQVNsSCxHQUM1QixHQUFJbUgsSUFDTUMsU0FBVSxLQUNWQyxXQUFZLE1BQ1pDLFFBQVMsS0FHcEJoQyxHQUFxQmlDLEtBQUt2SCxFQUFLLFNBQVVtSCxHQUNuQ3pELEtBQUssU0FBUzhELE1BRHBCbEMsU0FJWSxTQUFTa0MsT0FLdEJyRixFQUFPeUUsbUJBQXFCLFdBQ3ZCM0YsTUFBTUMsU0FBU3VHLGFBQ2hCdEYsRUFBTzRCLElBQUkseUJBQTBCLFNBQVN5RCxFQUFPRSxHQUNuRHZGLEVBQU9xRSxvQkFDUHJFLEVBQU9zRSx1QkFFUHRFLEVBQU82RSxzQkFHVDdFLEVBQU80QixJQUFJLDBCQUEyQixTQUFTeUQsRUFBT0UsR0FDcER2RixFQUFPOEUscUJBQ1A5RSxFQUFPdUUsdUJBSVRsRyxPQUFPOEYsaUJBQWlCLFNBQVUsU0FBU3FCLEdBQ3pDeEYsRUFBT3FFLG9CQUNQckUsRUFBT3NFLHVCQUVQdEUsRUFBTzZFLHNCQUNOLEdBQ0h4RyxPQUFPOEYsaUJBQWlCLFVBQVcsU0FBU3FCLEdBQzFDeEYsRUFBTzhFLHFCQUNQOUUsRUFBT3VFLHFCQUNOLEtBSVB2RSxFQUFPeUYsK0JBQWlDLFdBQ25DdkMsRUFBb0JrQixZQUNyQnBFLEVBQU9zRSx1QkFDUHRFLEVBQU8wRix3QkFFUHpDLEVBQWEwQyxXQUFXLG9CQUFvQiwrRUFLaEQzRixFQUFPc0UscUJBQXVCLFdBQzVCLEdBQUdwQixFQUFvQmtCLFdBQVcsQ0FDaEMsR0FBSXdCLEdBQVV6SCxFQUFVMEgsZUFDeEJELEdBQVFyRSxLQUFLLFNBQVV1RSxHQUVWLE1BQVJBLEdBQWdCQSxFQUFPQyxXQUFXLEdBQ25DRCxFQUFPRSxLQUFLQyxRQUFRLFNBQVNDLEdBQ3pCLEdBQUlDLEdBQVNELEVBQUlFLElBQ2JDLEVBQWMvRCxFQUFXNkQsT0FBT0EsRUFDcEIsT0FBYkEsRUFBT0csS0FDUkQsRUFBWUUsUUFBUSxTQUFTQyxFQUFNQyxFQUFRQyxFQUFReEgsR0FDOUM0RCxFQUFhNkQsc0NBQXNDSCxJQUNwRHJJLEVBQVV5SSxhQUFhVCxFQUFPVSxPQUtqQ2xJLE1BQU0sU0FBUzZILEVBQU1DLEVBQVFDLEVBQVN4SCxNQUl2Q21ILEVBQVk5RSxLQUFLLFNBQVN1RixHQUN4QixHQUFJTixHQUFPTyxLQUFLQyxNQUFNRixFQUFLRyxTQUN4Qm5FLEdBQWE2RCxzQ0FBc0NILElBQ3BEckksRUFBVXlJLGFBQWFULEVBQU9VLE1BSS9CLFNBQVNsSSxLQUVULFNBQVN1SSxVQTNCdEJ0QixTQWdDUyxTQUFVakUsUUFNdkIzQixFQUFPbUgsb0JBQXNCLFNBQVNoQixHQUNwQyxHQUFJRSxHQUFjL0QsRUFBVzZELE9BQU9BLEVBQ3BCLE9BQWJBLEVBQU9HLEtBQ1JELEVBQVlFLFFBQVEsU0FBU0MsRUFBTUMsRUFBUUMsRUFBUXhILEdBQ2pELFFBQUc0RCxFQUFhNkQsc0NBQXNDSCxLQU12RDdILE1BQU0sU0FBUzZILEVBQU1DLEVBQVFDLEVBQVN4SCxHQUNyQyxPQUFPLElBR1RtSCxFQUFZOUUsS0FBSyxTQUFTdUYsR0FDeEIsR0FBSU4sR0FBT08sS0FBS0MsTUFBTUYsRUFBS0csU0FDM0IsU0FBR25FLEVBQWE2RCxzQ0FBc0NILElBS3JELFNBQVM3SCxHQUNSLE9BQU8sR0FDUixTQUFTdUksT0FLaEJsSCxFQUFPOEUsbUJBQXFCLFdBQzFCLE1BQWUsT0FBWjlFLEVBQU9vSCxVQUdWcEgsRUFBT29ILEtBQ0hDLFVBQ0VDLFVBQVcsa0NBRVhDLFFBQVMsR0FDVEMsUUFBUyxHQUNUQyxvQkFBcUIsV0FFdkJDLFdBQ0FDLFFBQ0VQLEtBQ0VRLFFBQVMsV0FDVEMsTUFBTyxZQU1qQjdILEVBQU82RSxrQkFBb0IsV0FDekIsT0FBZSxNQUFaN0UsRUFBT29ILEtBQTRDLG1DQUEvQnBILEVBQU9vSCxJQUFJQyxTQUFTQyxhQUczQ3RILEVBQU9vSCxLQUNMQyxVQUVFQyxVQUFXLHFEQUNYQyxRQUFTLEdBQ1RDLFFBQVMsR0FDVEMsb0JBQXFCLFdBRXZCQyxXQUNBQyxRQUNFUCxLQUNFUSxRQUFTLFdBQ1RDLE1BQU8sU0FHWEMsV0FHRjlILEVBQU8rSCxnQkFDNkIsSUFBakM5RyxFQUFpQitHLGVBQ2xCaEksRUFBT29ILElBQUlVLFFBQ1BHLElBQUtoSCxFQUFpQitHLGVBQ3RCRSxJQUFLakgsRUFBaUJrSCxlQUN0QkMsS0FBTSxJQUdWcEksRUFBT29ILElBQUlVLFFBQ1BHLGVBQ0FDLGVBQ0FFLEtBQU0sUUFJWm5JLEdBQVlvSSxTQUFTOUcsS0FBSyxTQUFTNkYsR0FDakNBLEVBQUlrQixHQUFHLFVBQVd0SSxFQUFPdUksc0JBWTdCdkksR0FBT3dJLHVCQUF5QixTQUFTUCxFQUFJQyxHQUMzQ2pILEVBQWlCK0csZUFBaUJDLEVBQ2xDaEgsRUFBaUJrSCxlQUFpQkQsRUFDbENqSCxFQUFpQndILFlBQWVSLEVBQ2hDaEgsRUFBaUJ5SCxZQUFlUixFQUNoQ2xJLEVBQU8ySSxXQUFXLElBR3BCM0ksRUFBTzJJLFdBQWEsU0FBU0MsR0FHM0IsR0FGQTVJLEVBQU82SSxrQkFBa0IsaUJBQ3pCN0ksRUFBTzhJLG9CQUNZLEdBQWhCRixFQUlELEdBSEEzSCxFQUFpQndILFlBQWN4SCxFQUFpQitHLGVBQ2hEL0csRUFBaUJ5SCxZQUFjekgsRUFBaUIrRyxlQUNoRDNILFNBQVNxRSxlQUFlLFdBQVdDLE1BQU1DLFFBQVUsUUFDaEQxQixFQUFvQmtCLFdBQ3JCcEUsRUFBT21HLE9BQVM1RCxFQUFjd0csT0FDOUIvSSxFQUFPbUcsT0FBTzhCLElBQU1oSCxFQUFpQitHLGVBQ3JDaEksRUFBT21HLE9BQU82QyxJQUFNL0gsRUFBaUJrSCxlQUNyQzFGLEVBQWtCd0csTUFBTTFILEtBQUssU0FBVTBGLEdBQ2xDbkUsRUFBYW9HLGtDQUFrQ2pDLElBQ2hEOUksRUFBVWdMLGVBQWVsQyxFQUFTVCxNQUNsQ3hHLEVBQU9vSixpQkFBaUJuQyxFQUFTVCxLQUFLNkMsYUFFdENoSixTQUFTcUUsZUFBZSxXQUFXQyxNQUFNQyxRQUFVLGFBR3BELENBR0gsR0FBSTBFLEdBQWdCN0csRUFBa0I4RyxxQkFDdENELEdBQWMvSCxLQUFLLFNBQVM2RSxHQUN2QkEsR0FBT0EsRUFBSWlELFlBQWNHLE9BQU9DLEtBQUtyRCxFQUFJaUQsWUFBWUssT0FBTyxHQUM3RDFKLEVBQU9tRyxPQUFTNUQsRUFBY3dHLE9BQzlCL0ksRUFBT21HLE9BQU84QixJQUFNaEgsRUFBaUIrRyxlQUNyQ2hJLEVBQU9tRyxPQUFPNkMsSUFBTS9ILEVBQWlCa0gsZUFDckNuSSxFQUFPb0osaUJBQWlCaEQsRUFBSWlELGNBRzVCaEosU0FBU3FFLGVBQWUsV0FBV0MsTUFBTUMsUUFBVSxPQUNuRDNCLEVBQWEwQyxXQUFXLGlCQUFpQixtRkFUN0MyRCxTQVdTLFNBQVUzSCxHQUVmdEIsU0FBU3FFLGVBQWUsV0FBV0MsTUFBTUMsUUFBVSxPQUNuRDNCLEVBQWEwQyxXQUFXLGlCQUFpQixzRkFJL0MzRixHQUFPMkosa0JBS1gzSixFQUFPNEosa0JBQW9CLFNBQVNDLEdBQ2hDN0osRUFBTzZJLGtCQUFrQixpQkFDekI3SSxFQUFPOEksb0JBQ0x6SSxTQUFTcUUsZUFBZSxXQUFXQyxNQUFNQyxRQUFVLE9BR2pELElBQUkwRSxHQUFnQjdHLEVBQWtCOEcscUJBQ3RDRCxHQUFjL0gsS0FBSyxTQUFTNkUsR0FDdkJBLEdBQU9BLEVBQUlpRCxZQUFjRyxPQUFPQyxLQUFLckQsRUFBSWlELFlBQVlLLE9BQU8sR0FDN0QxSixFQUFPbUcsT0FBVW5HLEVBQU84SixlQUFlRCxHQUN2QzdKLEVBQU8rSix5QkFBeUIzRCxFQUFJaUQsY0FHcENoSixTQUFTcUUsZUFBZSxXQUFXQyxNQUFNQyxRQUFVLE9BQ25EM0IsRUFBYTBDLFdBQVcsaUJBQWlCLG1GQVA3QzJELFNBU1MsU0FBVTNILEdBRWpCdEIsU0FBU3FFLGVBQWUsV0FBV0MsTUFBTUMsUUFBVSxPQUNuRDNCLEVBQWEwQyxXQUFXLGlCQUFpQixtRkFLckQzRixFQUFPZ0ssb0JBQXNCLFNBQVNILEdBRXBDN0osRUFBTzhJLG9CQUNQekksU0FBU3FFLGVBQWUsV0FBV0MsTUFBTUMsUUFBVSxRQUNuRDVFLEVBQU9tRyxPQUFVbkcsRUFBTzhKLGVBQWVELEdBQ3ZDdkcsRUFBYWtCLHFCQUNicEMsRUFBWTZILGdCQUFnQix3Q0FDMUJDLE1BQU9sSyxFQUVQbUssVUFBVyxnQkFFVjVJLEtBQUssU0FBUzZJLEdBQ2I5RyxFQUFhK0csWUFBY0QsRUFDM0IvSixTQUFTcUUsZUFBZSxXQUFXQyxNQUFNQyxRQUFVLE9BQ25EdkUsU0FBU3FFLGVBQWUsWUFBWUMsTUFBTUMsUUFBVSxPQUNwRHRCLEVBQWFnSCxVQUluQnRLLEVBQU91SyxvQkFBc0IsV0FDM0IsR0FBSUMsR0FBUyxHQUFJQyxNQUNqQkQsR0FBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsUUFBUSxRQUFRM0ssRUFBT21HLE9BQU95RSxRQUNwRUosRUFBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsYUFBYSxVQUFVM0ssRUFBT21HLE9BQU8wRSxtQkFDM0VMLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLDhCQUE4QixVQUFVM0ssRUFBT21HLE9BQU8yRSxXQUM1Rk4sRUFBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsU0FBUyxVQUFVM0ssRUFBT21HLE9BQU80RSxRQUN2RVAsRUFBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsV0FBVyxVQUFVM0ssRUFBT21HLE9BQU82RSxTQUN0RWxJLEVBQWFtSSxhQUFhVCxFQUFPLG1CQUNsQ3JNLEVBQVUrTSxhQUFhbEwsRUFBT21HLFFBQVE1RSxLQUFLLFdBQ3pDdkIsRUFBT21MLGFBQVksR0FDbkJsSSxFQUFhMEMsV0FBVyxrQkFBa0IsMEdBQzFDM0YsRUFBT29MLGVBQ1BwTCxFQUFPcUwsc0JBQXNCckwsRUFBT21HLE9BQU9VLEtBQUt5RSxjQUdsRHRMLEVBQU9tTCxhQUFZLElBSXZCbkwsRUFBT3VMLG9CQUFzQixTQUFTbkUsR0FDbENBLEVBQUlvRSxVQUFVLFNBQVVDLEdBQ1AsYUFBWkEsRUFBTUMsTUFBaUMsTUFBWkQsRUFBTUMsTUFHViw4QkFBckJELEVBQU16RyxRQUFRMkcsS0FDZnZFLEVBQUl3RSxZQUFZSCxNQU0xQnpMLEVBQU82TCxzQkFBd0IsV0FDN0IsR0FBSUMsR0FBSzlMLEVBQU9tRyxPQUFPVSxHQUN2QjFJLEdBQVU0TixrQkFBa0IvTCxFQUFPbUcsUUFBUTVFLEtBQUssV0FDOUMsR0FBSXlLLEdBQVNoTSxFQUFPcUwsc0JBQXNCUyxFQUMxQzdMLEdBQVlvSSxTQUFTOUcsS0FBSyxTQUFTNkYsR0FDakNBLEVBQUl3RSxZQUFZSSxLQUdsQmhNLEVBQU9tTCxhQUFZLEdBQ25CbkwsRUFBT29MLGtCQUlYcEwsRUFBT29KLGlCQUFtQixTQUFTQyxHQUNqQ3JKLEVBQU9xSixXQUFhQSxFQUNwQmhKLFNBQVNxRSxlQUFlLFdBQVdDLE1BQU1DLFFBQVUsT0FDbkR2RSxTQUFTcUUsZUFBZSxZQUFZQyxNQUFNQyxRQUFVLE9BQ3BEdEIsRUFBYWtCLHFCQUNWN0IsRUFBWXNKLFlBQ2JqTSxFQUFPbUcsT0FBTytGLEtBQU92SixFQUFZdUosS0FDakNsTSxFQUFPbUcsT0FBT3lFLE1BQVFqSSxFQUFZaUksTUFDbEM1SyxFQUFPbUcsT0FBTzBFLGlCQUFtQmxJLEVBQVl3SixTQUM3Q25NLEVBQU9tRyxPQUFPaUcsTUFBUXpKLEVBQVl5SixNQUNsQ2hLLEVBQVk2SCxnQkFBZ0IsNkJBQzFCQyxNQUFPbEssRUFDUG1LLFVBQVcsY0FFWGtDLHlCQUF5QixJQUN4QjlLLEtBQUssU0FBUzZJLEdBQ2I5RyxFQUFhK0csWUFBY0QsRUFDM0I5RyxFQUFhK0csWUFBWUMsVUFHN0JsSSxFQUFZNkgsZ0JBQWdCLHdDQUMxQkMsTUFBT2xLLEVBQ1BxTSx5QkFBeUIsRUFDekJsQyxVQUFXLGdCQUVWNUksS0FBSyxTQUFTNkksR0FDYjlHLEVBQWErRyxZQUFjRCxFQUMzQjlHLEVBQWErRyxZQUFZQyxVQU1qQ3RLLEVBQU8rSix5QkFBMkIsU0FBU1YsR0FDekNySixFQUFPcUosV0FBYUEsRUFDcEJoSixTQUFTcUUsZUFBZSxXQUFXQyxNQUFNQyxRQUFVLE9BQ25EdkUsU0FBU3FFLGVBQWUsWUFBWUMsTUFBTUMsUUFBVSxNQUNwRCxJQUFJMEgsR0FBVyxFQUNaM0osR0FBWXNKLFlBQ2JqTSxFQUFPbUcsT0FBTytGLEtBQU92SixFQUFZdUosS0FDakNsTSxFQUFPbUcsT0FBT3lFLE1BQVFqSSxFQUFZaUksTUFDbEM1SyxFQUFPbUcsT0FBTzBFLGlCQUFtQmxJLEVBQVl3SixTQUM3Q25NLEVBQU9tRyxPQUFPaUcsTUFBUXpKLEVBQVl5SixNQUNsQ0UsRUFBVyxxQ0FHWEEsRUFBVyxvQ0FHYmhKLEVBQWFrQixxQkFDYnBDLEVBQVk2SCxnQkFBZ0IscUNBQzFCQyxNQUFPbEssRUFFUG1LLFVBQVcsZ0JBRVY1SSxLQUFLLFNBQVM2SSxHQUNiOUcsRUFBYStHLFlBQWNELEVBQzNCOUcsRUFBYStHLFlBQVlDLE9BQU8vSSxLQUFLLFdBQy9CLEdBQUlnTCxHQUFnQnZNLEVBQU9tRyxPQUFPb0csY0FDOUJDLEVBQW9CaFAsUUFBUTRDLFFBQVNDLFNBQVNvTSxjQUFlLHFCQUNqRUQsR0FBa0JFLElBQUlILEdBQ3RCdk0sRUFBTzJNLHNCQUNQLElBQUk3QixHQUFXOUssRUFBT21HLE9BQU8yRSxTQUN6QjhCLEVBQWdCLHdCQUF3QkwsRUFDeENNLEVBQXdCclAsUUFBUTRDLFFBQVNDLFNBQVNvTSxjQUFlRyxHQUNyRUMsR0FBc0JILElBQUk1QixRQU10QzlLLEVBQU8yTSxxQkFBdUIsV0FDNUIsR0FBSUcsR0FBNkJ6TSxTQUFTQyx1QkFBdUIscUJBQy9CLGNBQTlCd00sR0FBNkNBLEVBQTJCcEQsT0FBTyxJQUNqRm9ELEVBQTJCLEdBQUdDLFVBQVkscUJBRTVDLElBQUlDLEdBQVFoTixFQUFPbUcsT0FBT29HLGNBQ3RCVSxFQUFnQjVNLFNBQVNxRSxlQUFlLHVCQUF1QnNJLEVBQ25FQyxHQUFjRixVQUFZLHFCQUMxQjFNLFNBQVNxRSxlQUFlLGdDQUFnQ0MsTUFBTUMsUUFBUSxTQUd4RTVFLEVBQU9rTixNQUFRLFdBQ1gsR0FBSUMsR0FBZW5NLEVBQVlzSixNQUMvQmdDLFNBQVUscVBBQ1Z2QixNQUFPLGtCQUNQcUMsU0FBVSxtR0FDVmxELE1BQU9sSyxFQUNQcU4sVUFDSUMsS0FBTSxhQUVOQSxLQUFNLGdCQUNOQyxLQUFNLGtCQUNOQyxNQUFPLFNBQVNoSSxHQUNkLEdBQUlnRixHQUFTLEdBQUlDLE1BU2pCLE9BUkF6SyxHQUFPK0QsWUFBYzFELFNBQVNxRSxlQUFlLGVBQWUrSSxNQUM1RHpOLEVBQU84RCxXQUFhekQsU0FBU3FFLGVBQWUsY0FBYytJLE1BQzFEek4sRUFBT2dFLGNBQWdCM0QsU0FBU3FFLGVBQWUsaUJBQWlCK0ksTUFDaEV6TixFQUFPaUUsY0FBZ0I1RCxTQUFTcUUsZUFBZSxpQkFBaUIrSSxNQUNoRWpELEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLFNBQVMsVUFBVTNLLEVBQU84RCxhQUNoRTBHLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLFFBQVEsUUFBUTNLLEVBQU8rRCxjQUM3RHlHLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLFNBQVMsVUFBVTNLLEVBQU9nRSxnQkFDaEV3RyxFQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQixVQUFVLFVBQVUzSyxFQUFPaUUsZ0JBQzlEbkIsRUFBYW1JLGFBQWFULEVBQU8sMEJBQzNCeEssRUFBTytELGdCQUVkeUIsR0FBRWtJLHFCQU1aUCxHQUFhNUwsS0FBSyxTQUFTb00sR0FDMUIsR0FBR0EsRUFBSyxDQUNOLEdBQUlDLEdBQWV0TCxFQUFXNEssTUFBTWxOLEVBQU8rRCxZQUFZL0QsRUFBTzRELGlCQUFpQjVELEVBQU84RCxXQUFXRSxjQUFjaEUsRUFBT2lFLGNBQ3RIMkosR0FBYXJNLEtBQUssU0FBU3VGLEdBR3RCN0QsRUFBYTBDLFdBQVcsbUJBQW1CLHNHQUMzQzNGLEVBQU84RCxXQUFhLEtBQ3BCOUQsRUFBTytELFlBQWMsS0FDckIvRCxFQUFPZ0UsY0FBZ0IsS0FDdkJoRSxFQUFPaUUsY0FBZ0IsV0FPakNqRSxFQUFPNk4sYUFBZSxXQUNwQixHQUFJckQsR0FBUyxHQUFJQyxNQUNqQkQsR0FBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsYUFBYSxVQUFVM0ssRUFBTzhOLFFBQVFDLFNBQ3pFakwsRUFBYW1JLGFBQWFULEVBQU8sNEJBQ2xDd0QsYUFBZTFMLEVBQVd3TCxRQUFROU4sRUFBTzhOLFNBQ2hCLE1BQXRCOU4sRUFBTzhOLFFBQVFHLE1BQ2RELGFBQWF6SCxRQUFRLFNBQVNDLEVBQU1DLEVBQVFDLEVBQVF4SCxHQUNsRGMsRUFBT21MLGFBQVksS0FFcEJ4TSxNQUFNLFNBQVM2SCxFQUFNQyxFQUFRQyxFQUFTeEgsR0FDckM0RCxFQUFhb0wsbUJBQW1CLHlCQUF5QnpILEdBQ3pEekcsRUFBT21MLGFBQVksS0FHckI2QyxhQUFhek0sS0FBSyxTQUFTdUYsR0FDekI5RyxFQUFPbUwsYUFBWSxJQUNsQixTQUFTeE0sS0FDVCxTQUFTdUksR0FDVnRFLEVBQVMsV0FDUDVDLEVBQU9tTyxlQUFrQmpILEVBQVNrSCxPQUFTbEgsRUFBU21ILE1BQVMsSUFDN0RoTyxTQUFTcUUsZUFBZSxjQUFjNEosVUFBWSxZQUFjQyxLQUFLQyxNQUFNeE8sRUFBT21PLGdCQUFrQixVQU9oSG5PLEVBQU95TyxVQUFZLFdBQ2pCLEdBQUc5TCxFQUFZc0osV0FBVyxDQUN4QixHQUFJeUMsR0FBbUJ6TCxFQUFhMEwsYUFBYSxlQUFlLDJEQUEyRGhNLEVBQVlpSSxNQUFNLG9EQUM3SThELEdBQWlCbk4sS0FBSyxTQUFTb00sR0FDOUIsR0FBR0EsRUFBSyxDQUNQLEdBQUlDLEdBQWV0TCxFQUFXbU0sVUFBVTlMLEVBQVlpSSxNQUFNNUssRUFBTzRELGlCQUNqRWdLLEdBQWFyTSxLQUFLLFNBQVN1RixHQUl4QjdELEVBQWEwQyxXQUFXLHFCQUFxQix3Q0FBMENoRCxFQUFZaUksTUFBUSxpSEFJN0csQ0FDSCxHQUFJOEQsR0FBbUJ6TCxFQUFhMkwsb0JBQW9CNU8sRUFBTyxlQUFlLDhHQUErRyxRQUFTLFFBQ3RNME8sR0FBaUJuTixLQUFLLFNBQVNvTSxHQUM5QixHQUFHQSxFQUFLLENBQ04zTixFQUFPNkQsZ0JBQWtCOEosQ0FDekIsSUFBSUMsR0FBZXRMLEVBQVdtTSxVQUFVek8sRUFBTzZELGdCQUFnQjdELEVBQU80RCxpQkFDdEVnSyxHQUFhck0sS0FBSyxTQUFTdUYsR0FHdEI3RCxFQUFhMEMsV0FBVyxxQkFBcUIsd0NBQTBDM0YsRUFBTzZELGdCQUFrQix3R0FDaEg3RCxFQUFPNkQsZ0JBQWtCLFlBU3JDN0QsRUFBT25CLEtBQU8sV0FDWixHQUFHOEQsRUFBWXNKLFdBQVcsQ0FDeEIsR0FBSTRDLEdBQWM1TCxFQUFhMEwsYUFBYSxVQUFVLDBIQUN0REUsR0FBWXROLEtBQUssU0FBU29NLEdBQ3pCLEdBQUdBLEVBQUssQ0FDUCxHQUFJQyxHQUFldEwsRUFBV3pELEtBQUttQixFQUFPNEQsaUJBQzFDZ0ssR0FBYXJNLEtBQUssU0FBU3VGLEdBQ3hCN0QsRUFBYTBDLFdBQVcsVUFBVSxtRUFPM0MzRixFQUFPOE8sY0FBZ0IsV0FDckIsR0FBRzVMLEVBQW9Ca0IsV0FBVyxDQUNoQyxHQUFJb0csR0FBUyxHQUFJQyxNQUlqQixJQUhBRCxFQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQiw4QkFBOEIsVUFBVTNLLEVBQU9tRyxPQUFPMkUsV0FDNUZOLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLFNBQVMsVUFBVTNLLEVBQU9tRyxPQUFPNEUsUUFDdkVQLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLFdBQVcsVUFBVTNLLEVBQU9tRyxPQUFPNkUsU0FDdEVsSSxFQUFhbUksYUFBYVQsRUFBTyxtQkFBbUIsQ0FDckQsR0FBSW5FLEdBQWMvRCxFQUFXNkQsT0FBT25HLEVBQU9tRyxPQUczQyxJQURBOUYsU0FBU3FFLGVBQWUsd0JBQXdCQyxNQUFNQyxRQUFVLFFBQ3pDLE1BQXBCNUUsRUFBT21HLE9BQU9HLEtBQ2ZELEVBQVlFLFFBQVEsU0FBU0MsRUFBTUMsRUFBUUMsRUFBUXhILEdBQzlDNEQsRUFBYWlNLGlDQUFpQ3ZJLEVBQUssb0JBQ3BEeEcsRUFBT21MLGFBQVksR0FFbkJuTCxFQUFPK0gsaUJBRVAvSCxFQUFPbUwsYUFBWSxLQUd0QnhNLE1BQU0sU0FBUzZILEVBQU1DLEVBQVFDLEVBQVN4SCxHQUNyQzRELEVBQWFvTCxtQkFBbUIsa0JBQWtCekgsR0FDbER6RyxFQUFPbUwsYUFBWSxTQUVsQixDQUNILEdBQUk2RCxHQUFpQmhQLEVBQU9tRyxNQUM1QkUsR0FBWTlFLEtBQUssU0FBU3VGLEdBQ3hCbUksUUFBUUMsSUFBSXBJLEVBQ1osSUFBSU4sR0FBT08sS0FBS0MsTUFBTUYsRUFBS0csU0FDeEJuRSxHQUFhaU0saUNBQWlDdkksRUFBSyxvQkFDcER4RyxFQUFPbUwsYUFBWSxHQUVuQm5MLEVBQU8rSCxnQkFDUDlILEVBQVlvSSxTQUFTOUcsS0FBSyxTQUFTNkYsR0FDakMsR0FBSWEsR0FBTStHLEVBQWUvRyxHQUV6QkEsSUFBWSxLQUNaYixFQUFJK0gsUUFBUSxHQUFJQyxHQUFFQyxPQUFPcEgsRUFBSytHLEVBQWVoRyxLQUFNLFFBR3JEaUcsUUFBUUMsSUFBSTFJLEdBQ1p4RyxFQUFPbUwsYUFBWSxLQUVwQixTQUFTeE0sR0FDVnNRLFFBQVFDLElBQUl2USxHQUNacUIsRUFBT21MLGFBQVksR0FFbkJuTCxFQUFPK0gsZ0JBQ1A5SCxFQUFZb0ksU0FBUzlHLEtBQUssU0FBUzZGLEdBQ2pDLEdBQUlhLEdBQU0rRyxFQUFlL0csR0FFekJBLElBQVksS0FDWmIsRUFBSStILFFBQVEsR0FBSUMsR0FBRUMsT0FBT3BILEVBQUsrRyxFQUFlaEcsS0FBTSxPQWVwRCxTQUFTOUIsV0FRZGxILEdBQU9tTCxhQUFZLE9BR3JCbkwsR0FBT3NQLHNCQUFzQi9OLEtBQUssU0FBUzBGLEdBQ3pDakgsRUFBT21MLGFBQVksR0FFbkJuTCxFQUFPb0wsZUFDUG5JLEVBQWEwQyxXQUFXLGtCQUFrQixtSEFLaEQzRixFQUFPdVAsS0FBTyxXQUNaeE0sRUFBdUJ3TSxRQUd6QnZQLEVBQU93UCxTQUFXLFdBQ2hCek0sRUFBdUJ5TSxZQUd6QnhQLEVBQU95UCx1QkFBeUIsV0FDOUIsR0FBR3ZNLEVBQW9Ca0IsV0FBVyxDQUNoQy9ELFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUVoRSxJQUFJNEYsR0FBUyxHQUFJQyxNQUNqQkQsR0FBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsUUFBUSxRQUFRM0ssRUFBT21HLE9BQU95RSxRQUNwRUosRUFBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsYUFBYSxVQUFVM0ssRUFBT21HLE9BQU8wRSxtQkFDM0VMLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLDhCQUE4QixVQUFVM0ssRUFBT21HLE9BQU8yRSxXQUM1Rk4sRUFBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsU0FBUyxVQUFVM0ssRUFBT21HLE9BQU80RSxRQUN2RVAsRUFBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsV0FBVyxVQUFVM0ssRUFBT21HLE9BQU82RSxTQUN0RWxJLEVBQWFtSSxhQUFhVCxFQUFPLG1CQUNsQzlILEVBQVlnTixRQUFRMVAsRUFBT21HLE9BQU8wRSxpQkFBa0I3SyxFQUFPbUcsT0FBT3lFLE9BQU9ySixLQUFLLFNBQVN1RixHQUNsRmhFLEVBQWE2TSw0QkFBNEI3SSxFQUFLLG9CQUMvQ25FLEVBQVlpTixlQUFlOUksRUFBS04sS0FBSzBGLEtBQU1sTSxFQUFPbUcsT0FBT3lFLE1BQU81SyxFQUFPbUcsT0FBTzBFLGlCQUFrQi9ELEVBQUtOLEtBQUtxSixrQkFBbUIvSSxFQUFLTixLQUFLNEYsTUFBT3RGLEVBQUtOLEtBQUtzSixhQUNySmhKLEVBQUtOLEtBQUt1SixZQUNYcE4sRUFBWW9OLFVBQVlqSixFQUFLTixLQUFLdUosV0FFcEM1UixFQUFVNlIsU0FBU2xKLEVBQUtOLEtBQUswRixLQUFLbE0sRUFBT21HLE9BQU95RSxNQUFNNUssRUFBT21HLE9BQU8wRSxpQkFBaUIvRCxFQUFLTixLQUFLcUosa0JBQWtCL0ksRUFBS04sS0FBSzRGLE1BQU10RixFQUFLTixLQUFLc0osYUFDM0k5UCxFQUFPaVEsaUJBQWlCLEdBQ3hCalEsRUFBTzhPLGlCQUVQOU8sRUFBT21MLGFBQVksSUFHcEIsU0FBU3JFLEdBRVZoRSxFQUFhb0wsbUJBQW1CLGtCQUFrQnBILEVBQUtvSixZQUN2RGxRLEVBQU9tTCxhQUFZLEtBR3JCbkwsRUFBT21MLGFBQVksT0FHckJuTCxHQUFPc1Asc0JBQXNCL04sS0FBSyxTQUFTMEYsR0FDekNqSCxFQUFPbUwsYUFBWSxHQUVuQm5MLEVBQU9vTCxlQUNQbkksRUFBYTBDLFdBQVcsa0JBQWtCLG1IQUtoRDNGLEVBQU9zUCxvQkFBc0IsV0FDM0IsR0FBSWEsR0FBTyxHQUFJQyxNQUNYQyxFQUFNRixFQUFLRyxVQUNYQyxFQUFRSixFQUFLSyxVQUNqQkQsSUFBZ0IsQ0FDaEIsSUFBSUUsR0FBT04sRUFBS08sYUFFaEIsT0FEQTFRLEdBQU9tRyxPQUFPZ0ssS0FBT0UsRUFBTSxJQUFNRSxFQUFRLElBQU1FLEVBQ3hDdFMsRUFBVXdTLFdBQVczUSxFQUFPbUcsU0FHckNuRyxFQUFPbUwsWUFBYyxTQUFTQSxHQUN6QkEsR0FHRDdILEVBQWFrQixxQkFDYm5FLFNBQVNxRSxlQUFlLFlBQVlDLE1BQU1DLFFBQVUsUUFDcER2RSxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsUUFHaEV2RSxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsUUFJcEU1RSxFQUFPNFEsYUFBZSxXQUNwQnROLEVBQWFrQixxQkFDYm5FLFNBQVNxRSxlQUFlLFlBQVlDLE1BQU1DLFFBQVUsU0FHdEQ1RSxFQUFPNlEsTUFBUSxLQUVmN1EsRUFBTzhRLFNBQVcsU0FBU0MsRUFBYUMsRUFBYUMsR0FDbkRoQyxRQUFRQyxJQUFJNkIsR0FDWjlCLFFBQVFDLElBQUk4QixHQUNaL0IsUUFBUUMsSUFBSStCLEdBRVpqUixFQUFPZ1IsWUFBY0EsRUFDckJoUixFQUFPaVIsZUFBaUJBLENBRXhCLElBQUlDLEdBQVNDLE9BQU9DLGtCQUFrQkMsT0FDbENDLEdBQWtCLEVBQ2xCQyxHQUFrQixDQUNOLElBQWJSLElBQ0RHLEVBQVNDLE9BQU9DLGtCQUFrQkksYUFDbENGLEdBQWtCLEVBQ2xCQyxHQUFrQixFQUdwQixJQUFJdk0sSUFDRnlNLFFBQVMsR0FDVEMsZ0JBQWlCUCxPQUFPUSxnQkFBZ0JDLFNBQ3hDQyxXQUFZWCxFQUNaWSxXQUFXLEVBQ1hDLG1CQUFxQlQsRUFDckJVLGFBQWNiLE9BQU9jLGFBQWFDLEtBQ2xDQyxlQUFnQkMscUJBQ2hCQyxpQkFBa0JkLEVBQ2xCZSxVQUFXbkIsT0FBT29CLFVBQVVDLFFBQzVCQyxZQUFhLElBQ2JDLGFBQWMsSUFFaEJ6RCxTQUFRQyxJQUFJbEssR0FFWi9DLEVBQWUwUSxXQUFXM04sR0FBU3pELEtBQUssU0FBU3FSLEdBSS9DLFFBQVNDLEdBQWVDLEdBRXRCN0QsUUFBUUMsSUFBSTRELEdBQ1p6VSxPQUFPMFUsMEJBQTBCRCxFQUFTLFNBQWlCRSxHQUl0RC9ELFFBQVFDLElBQUksYUFBZThELEVBQVVDLFFBQ3JDLElBQUlDLEdBQWVGLEVBQVVDLE9BRU4sSUFBcEJqVCxFQUFPZ1IsWUFFUmhSLEVBQU9tVCxRQUFRckQsWUFBY29ELEVBRUgsR0FBdkJsVCxFQUFPaVIsZUFDUmpSLEVBQU84TixRQUFReEgsS0FBTzRNLEdBRXRCbFQsRUFBT21HLE9BQU9HLEtBQU80TSxFQUNyQmpFLFFBQVFDLElBQUlsUCxFQUFPbUcsU0FHdkJuRyxFQUFPb1QsT0FBU0YsR0FFakIsV0FHQ2pFLFFBQVFDLElBQUksd0JBQTBCNEQsR0FDdENPLEVBQWdCUCxLQUt2QixRQUFTTyxHQUFnQlAsR0FDdkJ6VSxPQUFPMFUsMEJBQTBCRCxFQUFTUSxFQUFVQyxHQUl0RCxRQUFTRCxHQUFTTixHQUNoQixHQUFJOUcsR0FBTzhHLEVBQVVRLFNBQVNDLE9BQU9ULEVBQVVRLFNBQVNFLFlBQVksS0FBTyxHQUN2RUMsRUFBVUMsSUFBVzFILENBRXpCN04sUUFBTzBVLDBCQUEwQnhVLFFBQVErSCxLQUFLdU4sY0FBZSxTQUFTQyxHQUNsRWQsRUFBVWUsT0FDUkQsRUFDQUgsRUFDQUssRUFDQVQsSUFHSkEsR0FJSixRQUFTUyxHQUFjQyxHQUNyQmpVLEVBQU9rVSxPQUFPLFdBQ1psVSxFQUFPNlEsTUFBUW9ELEVBQU1FLFlBSXpCLFFBQVNaLEdBQUs1VSxJQUlkLFFBQVNpVixLQUlQLElBQUssR0FIRHRHLEdBQU8sR0FDUDhHLEVBQVcsaUVBRU5DLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUNyQi9HLEdBQVE4RyxFQUFTRSxPQUFPL0YsS0FBS2dHLE1BQU1oRyxLQUFLaUcsU0FBV0osRUFBUzFLLFFBRTlELE9BQU80RCxHQXpFVDJCLFFBQVFDLElBQUkwRCxHQUNaQyxFQUFlRCxJQTJFZCxTQUFTalIsR0FDVnNOLFFBQVFDLElBQUl2TixNQUloQjNCLEVBQU95VSxZQUFjLFdBQ25CLEdBQUlDLEdBQVcsNkJBQ2YsSUFBSTFVLEVBQU82USxNQUFPLENBQ2hCLEdBQUkzRSxHQUFPbE0sRUFBTzZRLE1BQU00QyxPQUFPelQsRUFBTzZRLE1BQU02QyxZQUFZLEtBQU8sRUFDL0RnQixHQUFXblcsUUFBUStILEtBQUt1TixjQUFnQjNILEVBRzFDLE1BQU93SSxJQUlQMVUsRUFBT29MLGFBQWUsV0FDcEJwTCxFQUFPOEksb0JBQ1A5SSxFQUFPNkksa0JBQWtCLHVCQUN6QnhJLFNBQVNxRSxlQUFlLHFCQUFxQkMsTUFBTUMsUUFBUSxPQUN4RDFCLEVBQW9Ca0IsV0FFckIvRCxTQUFTcUUsZUFBZSxzQkFBc0JDLE1BQU1DLFFBQVUsUUFHOUQ1RSxFQUFPMEYsd0JBSVgxRixFQUFPMlUsMEJBQTRCLFdBQ2pDM1UsRUFBTzhJLG9CQUNQOUksRUFBTzBGLHdCQUdUMUYsRUFBTzBGLHFCQUF1QixXQUM1QnpGLEVBQVlvSSxTQUFTOUcsS0FBSyxTQUFTNkYsR0FDakNwSCxFQUFPdUwsb0JBQW9CbkUsRUFDM0IsSUFBSXhCLEdBQVV6SCxFQUFVMEgsZ0JBQ3BCK08sRUFBTSw4R0FDVjVVLEdBQU84SixlQUFpQixHQUFJVyxPQUM1QnpLLEVBQU9xTCxzQkFBd0IsR0FBSVosT0FDbkM3RSxFQUFRckUsS0FBSyxTQUFVdUUsR0FFckI4TyxHQUFZLDhFQUNELE1BQVI5TyxHQUFnQkEsRUFBT0UsS0FBSzBELE9BQU8sR0FDcEM1RCxFQUFPRSxLQUFLQyxRQUFRLFNBQVNDLEdBQ3pCLEdBQUlDLEdBQVNELEVBQUlFLEdBQ2pCcEcsR0FBTzhKLGVBQWUzRCxFQUFPVSxLQUFLVixFQUNsQ3lPLEdBQVk1VSxFQUFPNlUsdUJBQXVCMU8sRUFDMUMsSUFBSTJPLElBQWlCbkosSUFBSyw4QkFDdEJLLEVBQVNvRCxFQUFFcEQsUUFBUTdGLEVBQU84QixJQUFLOUIsRUFBTzZDLEtBQUs4TCxHQUFlQyxNQUFNM04sR0FDaEU0TixFQUFhLDZEQUErRDdPLEVBQU9VLElBQU0sV0FBYVYsRUFBTzRFLE1BQVEsOERBQ3JIa0ssRUFBVzlTLEVBQVM2UyxHQUFZaFYsRUFDcENnTSxHQUFPa0osVUFBVUQsRUFBUyxJQUMxQmpWLEVBQU9xTCxzQkFBc0JsRixFQUFPVSxLQUFLbUYsSUFFN0M0SSxHQUFZLDJHQUVaQSxHQUFZLDBEQUVkQSxHQUFZLGtJQUNaLElBQUl4VSxHQUFVNUMsUUFBUTRDLFFBQVNDLFNBQVNvTSxjQUFlLGtDQUN2RHJNLEdBQVErVSxLQUFLUCxFQUNFelMsR0FBUy9CLEVBQVFnVixZQUFZcFYsRUFDNUNBLEdBQU9xVixXQUFXLG1CQXZCcEJ6UCxTQXdCUyxTQUFVakUsR0FDakJpVCxHQUFZLDBEQUNaQSxHQUFZLHFJQUVkdlUsU0FBU3FFLGVBQWUsaUNBQWlDQyxNQUFNQyxRQUFVLFdBSzdFNUUsRUFBT3NWLG9CQUFzQixTQUFTekwsR0FDcEM3SixFQUFPNkksa0JBQWtCLHVCQUN6QnhJLFNBQVNxRSxlQUFlLHFCQUFxQkMsTUFBTUMsUUFBUSxPQUN4RDFCLEVBQW9Ca0IsV0FFckIvRCxTQUFTcUUsZUFBZSxzQkFBc0JDLE1BQU1DLFFBQVUsUUFHOUQzRSxFQUFZb0ksU0FBUzlHLEtBQUssU0FBUzZGLEdBQ2pDQSxFQUFJb0UsVUFBVSxTQUFVQyxHQUNQLGFBQVpBLEVBQU1DLE1BQWlDLE1BQVpELEVBQU1DLE1BR2xDdEUsRUFBSXdFLFlBQVlILElBR3BCLElBQUk3RixHQUFVekgsRUFBVTBILGdCQUNwQitPLEVBQU0sZ0NBQ1Y1VSxHQUFPOEosZUFBaUIsR0FBSVcsT0FDNUJ6SyxFQUFPcUwsc0JBQXdCLEdBQUlaLE9BQ25DN0UsRUFBUXJFLEtBQUssU0FBVXVFLEdBRXJCOE8sR0FBWSw4RUFDRCxNQUFSOU8sR0FBZ0JBLEVBQU9FLEtBQUswRCxPQUFPLEVBQ3BDNUQsRUFBT0UsS0FBS0MsUUFBUSxTQUFTQyxHQUN6QixHQUFJQyxHQUFTRCxFQUFJRSxHQUNqQnBHLEdBQU84SixlQUFlM0QsRUFBT1UsS0FBS1YsRUFDbEN5TyxHQUFZNVUsRUFBTzZVLHVCQUF1QjFPLEVBQzFDLElBQUk2RixHQUFTb0QsRUFBRXBELFFBQVE3RixFQUFPOEIsSUFBSzlCLEVBQU82QyxNQUFNK0wsTUFBTTNOLEdBQ2xENE4sRUFBYSw2REFBK0Q3TyxFQUFPVSxJQUFNLFdBQWFWLEVBQU80RSxNQUFRLDhEQUNySGtLLEVBQVc5UyxFQUFTNlMsR0FBWWhWLEVBQ3BDZ00sR0FBT2tKLFVBQVVELEVBQVMsSUFDMUJqVixFQUFPcUwsc0JBQXNCbEYsRUFBT1UsS0FBS21GLEVBQ3RDN0YsRUFBT1UsS0FBT2dELEdBQ2YwTCxrQkFBa0IxTCxLQUl4QitLLEdBQVksMERBRWRBLEdBQVksUUFDWixJQUFJeFUsR0FBVTVDLFFBQVE0QyxRQUFTQyxTQUFTb00sY0FBZSxrQ0FDdkRyTSxHQUFRK1UsS0FBS1AsRUFDRXpTLEdBQVMvQixFQUFRZ1YsWUFBWXBWLEtBdkI5QzRGLFNBd0JTLFNBQVVqRSxHQUNqQmlULEdBQVksMERBQ1pBLEdBQVksV0FFZHZVLFNBQVNxRSxlQUFlLGlDQUFpQ0MsTUFBTUMsUUFBVSxXQU0vRTVFLEVBQU91VixrQkFBb0IsU0FBUzFMLEdBQ2xDLEdBQUkxRCxHQUFTbkcsRUFBTzhKLGVBQWVELEVBQ25DNUosR0FBWW9JLFNBQVM5RyxLQUFLLFNBQVM2RixHQUNqQyxHQUFJYSxHQUFNOUIsRUFBTzhCLEdBRWpCQSxJQUFZLEtBQ1pqSSxFQUFPb0gsSUFBSVUsT0FBT0csSUFBTUEsRUFDeEJqSSxFQUFPb0gsSUFBSVUsT0FBT0ksSUFBTS9CLEVBQU82QyxJQUMvQjVCLEVBQUkrSCxRQUFRLEdBQUlDLEdBQUVDLE9BQU9wSCxFQUFLOUIsRUFBTzZDLEtBQU0sSUFDM0NoSixFQUFPcUwsc0JBQXNCeEIsR0FBVXlCLGVBSzNDdEwsRUFBTzZVLHVCQUF5QixTQUFTMU8sR0FDdkMsR0FBSXlPLEdBQU0sNkJBQStCek8sRUFBT1UsSUFBTSxtQ0FBbUNWLEVBQU9VLElBQUksMENBY3BHLE9BYkErTixJQUFZLGtEQUNaQSxHQUFZLG9DQUNaQSxFQUFNQSxFQUFNLHVCQUF1QnpPLEVBQU9VLElBQUksa0NBQWtDVixFQUFPNEUsTUFBTSxPQUM3RjZKLEVBQU1BLEVBQU0sMEJBQTBCek8sRUFBT1UsSUFBSSxxQ0FBcUNWLEVBQU8yRSxTQUFTLE9BQ3RHOEosRUFBTUEsRUFBTSxzQkFBc0J6TyxFQUFPVSxJQUFJLGlDQUFpQ1YsRUFBT2dLLEtBQUssT0FDMUZ5RSxFQUFNQSxFQUFNLHNCQUFzQnpPLEVBQU9VLElBQUkscUVBQXdFVixFQUFPVSxJQUFJLDREQUErRFYsRUFBT1UsSUFBSSx3QkFDMU0rTixHQUFZLGtDQUNNLE1BQWZ6TyxFQUFPRyxNQUErQixhQUFmSCxFQUFPRyxPQUMvQnNPLEdBQVksZ0VBRWRBLEdBQVksNkRBRVpBLEdBQVksc0JBSWQ1VSxFQUFPd1YsS0FBTyxXQUNUdFMsRUFBb0JrQixZQUNyQi9ELFNBQVNxRSxlQUFlLFdBQVdDLE1BQU1DLFFBQVUsUUFDbkQ1RSxFQUFPNkksa0JBQWtCLGNBQ3pCN0ksRUFBTzhJLG9CQUNQdEcsRUFBV3lHLE1BQU0xQyxRQUFRLFNBQVVVLEdBQ2pDM0QsRUFBYWtCLHFCQUNieEUsRUFBT3lWLElBQU0xVCxFQUFLMlQsWUFBWXpPLEdBQzlCNUcsU0FBU3FFLGVBQWUsV0FBV0MsTUFBTUMsUUFBVSxPQUNuRHhDLEVBQVk2SCxnQkFBZ0Isc0JBQzFCQyxNQUFPbEssRUFDUHFNLHlCQUF5QixFQUN6QmxDLFVBQVcsZ0JBRVY1SSxLQUFLLFNBQVM2SSxHQUNiOUcsRUFBYStHLFlBQWNELEVBQzNCOUcsRUFBYStHLFlBQVlDLE9BQU8vSSxLQUFLLFdBQ25DLEdBQUluQixHQUFVNUMsUUFBUTRDLFFBQVNDLFNBQVNvTSxjQUFlLHNCQUN4Q3RLLEdBQVMvQixFQUFRZ1YsWUFBWXBWLFVBS3BEaUQsRUFBYTBDLFdBQVcsMEJBQTBCLHNEQUt0RDNGLEVBQU8yVixTQUFXLFNBQVNDLEdBQ3pCL1MsRUFBVWdULEtBQUtELEVBQ2YsSUFBSUUsR0FBVTlTLEVBQXFCK1MsYUFBYSxVQUNoREQsR0FBT0UsZ0JBR1RoVyxFQUFPaVcsZ0JBQWtCLFdBQ3ZCM1MsRUFBYWtCLHNCQUdmeEUsRUFBTzZJLGtCQUFvQixTQUFTcU4sR0FDbEM3VixTQUFTcUUsZUFBZSxpQkFBaUJxSSxVQUFZLGtCQUNyRDFNLFNBQVNxRSxlQUFlLHVCQUF1QnFJLFVBQVksa0JBQzNEMU0sU0FBU3FFLGVBQWUsY0FBY3FJLFVBQVksa0JBQ2xEMU0sU0FBU3FFLGVBQWUsa0JBQWtCcUksVUFBWSxrQkFDdEQxTSxTQUFTcUUsZUFBZXdSLEdBQVVuSixVQUFZLGlCQUdoRC9NLEVBQU84SSxrQkFBb0IsV0FDekJ6SSxTQUFTcUUsZUFBZSxzQkFBc0JDLE1BQU1DLFFBQVUsT0FDOUR2RSxTQUFTcUUsZUFBZSxpQ0FBaUNDLE1BQU1DLFFBQVUsT0FDekV2RSxTQUFTcUUsZUFBZSxxQkFBcUJDLE1BQU1DLFFBQVEsT0FDM0R2RSxTQUFTcUUsZUFBZSxpQkFBaUJDLE1BQU1DLFFBQVUsT0FDekR2RSxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsUUFHbEU1RSxFQUFPbVcsa0JBQW9CLFNBQVNySyxHQUNsQzlMLEVBQU80RCxpQkFBbUJrSSxFQUN2QjVJLEVBQW9Ca0IsWUFDckIvRCxTQUFTcUUsZUFBZSxXQUFXQyxNQUFNQyxRQUFVLFFBQ25ENUUsRUFBTzhJLG9CQUNQdkcsRUFBYzZULFFBQVF0SyxHQUFJdkssS0FBSyxTQUFTdUYsR0FDdEM5RyxFQUFPcVcsY0FBZ0J0VSxFQUFLMlQsWUFBWTVPLEVBQUtOLEtBQUs4UCxRQUFRLGlCQUFpQixJQUFJQSxRQUFRLFNBQVMsUUFBUWpVLEVBQWNxQixTQUFTNFMsUUFBUSxRQUFRLE9BQU9qVSxFQUFjcUIsUUFBUXJCLEVBQWNrVSxZQUFZLEtBQUtELFFBQVEsUUFBUSxPQUFPalUsRUFBY3FCLFFBQVFyQixFQUFja1UsWUFBWSxNQUNsUmxXLFNBQVNxRSxlQUFlLFdBQVdDLE1BQU1DLFFBQVUsT0FDbkQ1RSxFQUFPOE4sU0FDTDBJLGNBQWUsRUFDZjFLLEdBQUk5TCxFQUFPNEQsaUJBQ1g2UyxlQUFlLEVBQ2ZDLFdBQVcsRUFDWEMsT0FBTyxFQUNQNUksT0FBUSxHQUNSN0IsS0FBTSxLQUNOMEssV0FBWSxLQUNaM0ksTUFBTyxNQUVUM0ssRUFBYWtCLHFCQUNicEMsRUFBWTZILGdCQUFnQixnQ0FDMUJDLE1BQU9sSyxFQUVQbUssVUFBVyxnQkFFVjVJLEtBQUssU0FBUzZJLEdBQ2I5RyxFQUFhK0csWUFBY0QsRUFDM0I5RyxFQUFhK0csWUFBWUMsT0FBTy9JLEtBQUssV0FDakMsR0FBSW5CLEdBQVU1QyxRQUFRNEMsUUFBU0MsU0FBU29NLGNBQWUsZ0NBQ3hDdEssR0FBUy9CLEVBQVFnVixZQUFZcFYsRUFDNUMsSUFBRzJDLEVBQVlzSixXQUFXLENBSXhCLEdBSEE1TCxTQUFTcUUsZUFBZSxxQkFBcUJDLE1BQU1DLFFBQVEsUUFDM0Q1RSxFQUFPOE4sUUFBUTVCLEtBQU92SixFQUFZdUosS0FDbENsTSxFQUFPOE4sUUFBUThJLFdBQWFqVSxFQUFZaUksTUFDZCxNQUF2QmpJLEVBQVlvTixVQUFnQixDQUM3QixHQUFJL0csR0FBTWhKLEVBQU91RCxlQUFldUksR0FBSStLLFFBQVFDLFNBQVNDLFlBQVksR0FDN0Q5TyxFQUFNakksRUFBT3VELGVBQWV1SSxHQUFJK0ssUUFBUUMsU0FBU0MsWUFBWSxFQUNqRXpVLEdBQVcwVSxTQUFTaE8sRUFBSWYsR0FBSzFHLEtBQUssU0FBU3VGLEdBQ3pDbVEsV0FBYW5RLEVBQUtOLEtBQ2xCeEcsRUFBT2tYLGFBQWMsQ0FDckIsS0FBSyxHQUFJQyxLQUFRRixZQUFZLENBQ3hCLEdBQUlHLEdBQVNELEVBQ1RFLEVBQVlKLFdBQVdFLEVBQ1IsUUFBaEJFLEVBQVU5SixNQUNSNUssRUFBWW9OLFdBQVdxSCxJQUN4QnBYLEVBQU9rWCxhQUFjLEVBQ3JCbFgsRUFBTzhOLFFBQVF3SixhQUFldFgsRUFBT3VELGVBQWV1SSxHQUFJK0ssUUFBUVUsV0FBV3pNLFNBQzNFOUssRUFBTzhOLFFBQVF0TyxNQUFRUSxFQUFPdUQsZUFBZXVJLEdBQUkrSyxRQUFRVSxXQUFXL1gsTUFDcEVpRCxFQUFrQitVLGdCQUFnQkosR0FBUTdWLEtBQUssU0FBU3VGLEdBQ3REMlEsZUFBaUIzUSxFQUFLTixLQUN0QnhHLEVBQU9rRSwyQkFDUCxLQUFLLEdBQUl3VCxLQUFTRCxnQkFDaEJ6WCxFQUFPa0UseUJBQXlCd0csS0FBS2dOLEVBRXZDOVUsR0FBUyxXQUNQdkMsU0FBU3FFLGVBQWUsdUJBQXVCK0ksTUFBTXpOLEVBQU84TixRQUFRd0osY0FDbkUsZUFPaEJ0WCxHQUFPa1gsYUFBYyxDQUV2QjdXLFVBQVNxRSxlQUFlLHFCQUFxQkMsTUFBTUMsUUFBUSxZQUUzRHZFLFVBQVNxRSxlQUFlLHFCQUFxQkMsTUFBTUMsUUFBUSxZQUlwRSxTQUFTa0MsR0FFVnpHLFNBQVNxRSxlQUFlLFdBQVdDLE1BQU1DLFFBQVUsT0FDbkQ5QixFQUFhNlUseUJBQXlCLHNDQUF3QzdRLEVBQUtvSixlQUdyRmpOLEVBQWEwQyxXQUFXLDBCQUEwQix3RUFLdEQzRixFQUFPNFgsMEJBQTRCLFdBQ2pDdFUsRUFBYWtCLHFCQUNieEUsRUFBTzRELGlCQUFtQixNQU81QjVELEVBQU82WCxPQUFTLFdBRWQvVyxFQUNHUSxxQkFDQUMsS0FBSyxTQUFTQyxHQUNieEIsRUFBT29ILElBQUlVLE9BQU9HLElBQU16RyxFQUFTc1csT0FBT0MsU0FDeEMvWCxFQUFPb0gsSUFBSVUsT0FBT0ksSUFBTTFHLEVBQVNzVyxPQUFPRSxVQUN4Q2hZLEVBQU9vSCxJQUFJVSxPQUFPTSxLQUFPLEdBRXpCcEksRUFBT29ILElBQUlNLFFBQVF1USxLQUNqQmhRLElBQUt6RyxFQUFTc1csT0FBT0MsU0FDckI3UCxJQUFLMUcsRUFBU3NXLE9BQU9FLFVBQ3JCRSxRQUFTLGVBQ1RDLE9BQU8sRUFDUEMsV0FBVyxJQUdaLFNBQVN6VyxPQXVCaEIzQixFQUFPMkosZUFBaUIsV0FFdEJ0SixTQUFTcUUsZUFBZSxpQkFBaUJDLE1BQU1DLFFBQVUsUUFDekR2RSxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsU0FJbEU1RSxFQUFPcVksMEJBQTRCLFdBQ2pDcFksRUFBWW9JLFNBQVM5RyxLQUFLLFNBQVM2RixHQUNqQyxHQUFJa1IsR0FBU2xSLEVBQUltUixXQUNqQnRYLEdBQWlCdVgseUJBQXlCRixFQUFPclEsSUFBSXFRLEVBQU9wUSxLQUM1RGxJLEVBQU8ySSxXQUFXLE1BS3RCM0ksRUFBT3lZLHVCQUF5QixTQUFTNWEsR0FDdkMsR0FBSTZhLEdBQVU3YSxFQUFJeVksUUFBUSxXQUFXLEdBRXJDLE9BREFvQyxHQUFVQSxFQUFRcEMsUUFBUSxZQUFZLEtBSXhDdFcsRUFBT3VJLGtCQUFvQixXQUN6QnRJLEVBQVlvSSxTQUFTOUcsS0FBSyxTQUFTNkYsR0FDakMsR0FBSXVSLEdBQVl2UixFQUFJd1IsWUFDaEJDLEVBQVlyUCxPQUFPQyxLQUFLekosRUFBT3dELGVBQ25DeEQsR0FBT3lELGtCQUNQb1YsRUFBVTVTLFFBQVEsU0FBUzZTLEdBQ3pCOVksRUFBT3dELGVBQWVzVixHQUFNN1MsUUFBUSxTQUFTd0YsRUFBTXNOLEdBQ2pELEdBQUlDLEdBQWtCTCxFQUFVTSxTQUFTeE4sRUFBTXlOLFlBQzFDRixHQUVNQSxJQWFQNVIsRUFBSStSLFNBQVMxTixHQUNiekwsRUFBT3lELGVBQWVpSCxLQUFLZSxFQUFNb0wsVUFmakN6UCxFQUFJd0UsWUFBWUgsVUFzQjVCekwsRUFBT29aLGNBQWdCLFdBQ3JCblosRUFBWW9JLFNBQVM5RyxLQUFLLFNBQVM2RixHQUNqQyxHQUNJeVIsSUFEWXpSLEVBQUl3UixZQUNKcFAsT0FBT0MsS0FBS3pKLEVBQU93RCxnQkFDbkN4RCxHQUFPeUQsa0JBQ1BvVixFQUFVNVMsUUFBUSxTQUFTNlMsR0FDekI5WSxFQUFPd0QsZUFBZXNWLEdBQU03UyxRQUFRLFNBQVN3RixFQUFNc04sR0FDakQzUixFQUFJd0UsWUFBWUgsVUFNeEJ6TCxFQUFPK0gsY0FBZ0IsV0FDaEIxSCxTQUFTcUUsZUFBZSxhQUN6QnJFLFNBQVNxRSxlQUFlLFdBQVdDLE1BQU1DLFFBQVUsU0FFckQ1RSxFQUFPb1osZ0JBQ1BwWixFQUFPd0Qsa0JBQ1BqQixFQUFjOFcsU0FBUzlYLEtBQUssU0FBVTBGLEdBQ3BDLEdBQUlxUyxHQUFZclMsRUFBU1QsS0FBSytTLFFBQzlCdlosR0FBTzRGLFFBQVVxQixFQUFTVCxLQUFLK1MsU0FDL0JELEVBQVVyVCxRQUFRLFNBQVM0USxHQUN6QixHQUFJQSxFQUFRVSxXQUFZLENBQ3RCLEdBQUl2TyxHQUFNNk4sRUFBUUMsU0FBU0MsWUFBWSxHQUNuQzlPLEVBQU00TyxFQUFRQyxTQUFTQyxZQUFZLEdBQ25DeUMsRUFBT25YLEVBQWNxQixRQUFVbVQsRUFBUVUsV0FBV2tDLFFBQ2xEQyxFQUFhdEssRUFBRW9LLE1BQ2pCRyxRQUFTSCxFQUNUSSxVQUFXLEdBQUksSUFDZkMsWUFBYSxHQUFJLElBQ2pCQyxhQUFjLFNBRVpyTyxFQUFRMkQsRUFBRXBELFFBQVEvRCxFQUFLZSxJQUFPd1EsS0FBTUUsR0FPeEMsSUFOQWpPLEVBQU1vTCxRQUFVQSxFQUNoQjdXLEVBQU91RCxlQUFla0ksRUFBTW9MLFFBQVFVLFdBQVd6TCxJQUFNTCxFQUNqRHpMLEVBQU93RCxlQUFlLFNBQVdxVCxFQUFRVSxXQUFXL1gsU0FDdERRLEVBQU93RCxlQUFlLFNBQVdxVCxFQUFRVSxXQUFXL1gsV0FFdERRLEVBQU93RCxlQUFlLFNBQVdxVCxFQUFRVSxXQUFXL1gsT0FBT2tMLEtBQUtlLEdBQzVEb0wsRUFBUVUsV0FBWSxDQUN0QjFOLFNBQVdnTixFQUFRVSxXQUFXekwsR0FDOUJpTyxZQUFjbEQsRUFBUVUsV0FBV3hNLE1BQ2pDb0ssS0FBTywyREFBNkR0TCxTQUFXLFNBQVdrUSxZQUFjLFVBQ3hHLElBQUk5RSxHQUFXOVMsRUFBU2dULE1BQU1uVixFQUM5QnlMLEdBQU15SixVQUFVRCxFQUFTLFFBSS9CNVUsU0FBU3FFLGVBQWUsV0FBV0MsTUFBTUMsUUFBVSxPQUNuRDVFLEVBQU91SSx1QkFLYnZJLEVBQU9nYSxnQkFBa0IsV0FDdkIsR0FBcUIsTUFBbEJoYSxFQUFPaWEsVUFDUixPQUFPLENBRVQsSUFBSXZXLEdBQVVyQixFQUFjcUIsT0FDMUJ3VyxZQUFhLFNBQVMxVCxFQUFNd0YsR0FDMUIsR0FBSW5DLEdBQVdyRCxFQUFLLEdBQ2xCdVQsRUFBY3ZULEVBQUssR0FFakIyTyxFQUFPLDJEQUE2RHRMLEVBQVcsU0FBV2tRLEVBQWMsVUFDNUcsT0FBTzVFLElBS1RnRixjQUFnQixTQUFTdEQsRUFBU3BMLEdBRWhDLEdBQUkwSixHQUFNdEwsRUFBVWtRLENBQ3BCLElBQUlsRCxFQUFRVSxXQUFZLENBQ3RCMU4sRUFBV2dOLEVBQVFVLFdBQVd6TCxHQUM5QmlPLEVBQWNsRCxFQUFRVSxXQUFXeE0sTUFDakNvSyxFQUFPLDJEQUE2RHRMLEVBQVcsU0FBV2tRLEVBQWMsVUFDeEcsSUFBSTlFLEdBQVc5UyxFQUFTZ1QsR0FBTW5WLEVBQzlCeUwsR0FBTXlKLFVBQVVELEVBQVMsTUFJN0JtRixFQUFJLEdBQUloTCxHQUFFaUwsV0FDUnhjLElBQUs2RixFQUFVLHdCQUNmNFcsY0FBYyxFQUNkSCxjQUFlQSxnQkFHakJuYSxFQUFPaWEsVUFBWUcsRUFFckJuYSxFQUFZb0ksU0FBUzlHLEtBQUssU0FBUzZGLEdBQ2pDQSxFQUFJK1IsU0FBU2lCLEtBSWZBLEVBQUU5UixHQUFHLGFBQWMsU0FBUzlDLEdBQzFCeEYsRUFBTzRGLFFBQVVKLEVBQUVnQixLQUFLK1MsV0FJMUJhLEVBQUU5UixHQUFHLFdBQVksU0FBUzlDLEdBQ3hCQSxFQUFFaUcsTUFBTUQsVUFBVSxTQUFTK08sR0FDekIsR0FBSWIsR0FBYXRLLEVBQUVvSyxNQUNqQkcsUUFBU2pXLEVBQVUsSUFBTTZXLEVBQU8xRCxRQUFRVSxXQUFXa0MsUUFDbkRHLFVBQVcsR0FBSSxJQUNmQyxZQUFhLEdBQUksSUFDakJDLGFBQWMsT0FFaEJTLEdBQU9DLFFBQVFkLEdBQzZDZSxTQUF4RHphLEVBQU91RCxlQUFlZ1gsRUFBTzFELFFBQVFVLFdBQVd6TCxNQUNsRDlMLEVBQU91RCxlQUFlZ1gsRUFBTzFELFFBQVFVLFdBQVd6TCxJQUFNeU8sUUFROUR2YSxFQUFPMGEsV0FBYSxTQUFTdlUsR0FFM0IsR0FBSXdVLEdBQXFCdGEsU0FBU0MsdUJBQXVCLDRCQUN0RHFhLEdBQW1CalIsT0FBUyxJQUM3QmlSLEVBQW1CLEdBQUc1TixVQUFZLHFCQUVwQyxJQUFJNk4sR0FBYXZhLFNBQVNxRSxlQUFlLG9CQUFvQnlCLEVBQU9vUixXQUFXekwsR0FDL0U4TyxHQUFXN04sVUFBWSwyQkFHdkIsSUFBSXRCLEdBQVF6TCxFQUFPdUQsZUFBZTRDLEVBQU9vUixXQUFXekwsR0FDcEQ3TCxHQUFZb0ksU0FBUzlHLEtBQUssU0FBUzZGLEdBQ2pDLEdBQUkwUSxHQUFTck0sRUFBTXlOLFlBQ2ZqUixFQUFNNlAsRUFBTzdQLEdBRWpCQSxJQUFZLEtBQ1piLEVBQUkrSCxRQUFRLEdBQUlDLEdBQUVDLE9BQU9wSCxFQUFLNlAsRUFBTzVQLEtBQU0sSUFDM0N1RCxFQUFNSCxlQUtWdEwsRUFBTzZhLFNBQ1A3YSxFQUFPOGEsaUJBQ1A5YSxFQUFPK2EsaUJBQ1AvYSxFQUFPZ2IsMEJBQ1BoYixFQUFPaWIsa0JBQW9CLEdBQzNCamIsRUFBT2tiLGtCQUFvQixHQUUzQmxiLEVBQU9tYixhQUFlLFNBQVN4YSxHQUM3QixHQUNFeWEsR0FERUMsSUFvQkosT0FsQkkxYSxLQUNGeWEsR0FDRUUsUUFDRXhQLEdBQUksSUFDSkksS0FBTXZMLEVBQVEsSUFDZDRhLEtBQU0sU0FBVzVhLEVBQVEsTUFFekJtTCxHQUFJLElBQ0pJLEtBQU12TCxFQUFRLElBQ2Q0YSxLQUFNLFNBQVc1YSxFQUFRLE1BRXpCbUwsR0FBSSxJQUNKSSxLQUFNdkwsRUFBUSxJQUNkNGEsS0FBTSxTQUFXNWEsRUFBUSxPQUc3QjBhLEVBQVdELEVBQUlFLE9BRVZELEdBSVRyYixFQUFPd2IsYUFBZSxTQUFTQyxHQUM3QnpiLEVBQU9rYixrQkFBb0JPLEdBRzdCemIsRUFBTzBiLGFBQWUsV0FDcEIsR0FBSUMsR0FBT3RiLFNBQVNxRSxlQUFlLG9CQUNuQyxJQUF1QixTQUFwQmlYLEVBQUtoWCxNQUFNQyxRQUNaK1csRUFBS2hYLE1BQU1DLFFBQVUsV0FDbEIsQ0FDSCxHQUFJc0gsR0FBT3ZKLEVBQVl1SixJQUNkLE9BQU5BLEVBRURsTSxFQUFPNGIsc0JBR1A1YixFQUFPNmIsbUJBS2I3YixFQUFPNGIsb0JBQXNCLFdBQzNCLEdBQUlELEdBQU90YixTQUFTcUUsZUFBZSxxQkFDL0J5USxFQUFPLHFHQUNYQSxJQUFjLG9GQUNkd0csRUFBS3JOLFVBQVk2RyxFQUNqQmhULEVBQVN3WixHQUFNM2IsR0FDZjJiLEVBQUtoWCxNQUFNbVgsT0FBUyxRQUNwQkgsRUFBS2hYLE1BQU1vWCxNQUFRLFFBQ25CSixFQUFLaFgsTUFBTUMsUUFBVSxTQUd2QjVFLEVBQU82YixlQUFpQjtBQUN0QixHQUFJRixHQUFPdGIsU0FBU3FFLGVBQWUscUJBQy9CeVEsRUFBT3hTLEVBQVl1SixLQUFPLDJHQUM5QmlKLElBQWMsc0ZBQ2RBLEdBQWMsaUdBQ2RBLEdBQWMsZ0ZBQ2R3RyxFQUFLck4sVUFBWTZHLEVBQ2pCaFQsRUFBU3daLEdBQU0zYixHQUNmMmIsRUFBS2hYLE1BQU1tWCxPQUFTLFFBQ3BCSCxFQUFLaFgsTUFBTW9YLE1BQVEsUUFDbkJKLEVBQUtoWCxNQUFNQyxRQUFVLFNBR3ZCNUUsRUFBT2djLGdCQUFrQixXQUN2QjFZLEVBQWFrQixxQkFDYnhFLEVBQU9pYyxRQUFVLEdBQUl4UixPQUNyQnpLLEVBQU9pYyxRQUFRclIsTUFBUSxHQUN2QnhJLEVBQVk2SCxnQkFBZ0Isa0NBQ3RCQyxNQUFPbEssRUFDUHFNLHlCQUF5QixFQUN6QmxDLFVBQVcsZ0JBRVY1SSxLQUFLLFNBQVM2SSxHQUNiL0osU0FBU3FFLGVBQWUscUJBQXFCQyxNQUFNQyxRQUFRLE9BQzNEdEIsRUFBYStHLFlBQWNELEVBQzNCL0osU0FBU3FFLGVBQWUsWUFBWUMsTUFBTUMsUUFBVSxPQUNwRHRCLEVBQWErRyxZQUFZQyxVQUluQ3RLLEVBQU9rYyxtQkFBcUIsV0FDMUI3YixTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsT0FDaEUsSUFBSTRGLEdBQVMsR0FBSUMsTUFDakJELEdBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLFFBQVEsUUFBUTNLLEVBQU9pYyxRQUFRclIsUUFDbEU5SCxFQUFhbUksYUFBYVQsRUFBTyxvQkFDbENuSyxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsT0FDaEVsQyxFQUFZeVosa0JBQWtCbmMsRUFBT2ljLFFBQVFyUixPQUFPckosS0FBSyxTQUFTdUYsR0FDMUMsNEJBQW5CQSxFQUFLTixLQUFLMFIsU0FDWDVVLEVBQWFrQixxQkFDYm5FLFNBQVNxRSxlQUFlLFlBQVlDLE1BQU1DLFFBQVUsUUFDcERoQyxFQUFTLFdBQ1BLLEVBQWEwQyxXQUFXLG1DQUFtQyxzR0FDMUQsTUFFSDdDLEVBQWFvTCxtQkFBbUIsa0JBQWtCcEgsRUFBS04sS0FBSzBSLFlBSWhFN1gsU0FBU3FFLGVBQWUsd0JBQXdCQyxNQUFNQyxRQUFVLFFBSXBFNUUsRUFBT29jLGdCQUFrQixXQUN2QjlZLEVBQWFrQixxQkFDYnhFLEVBQU9pYyxRQUFVLEdBQUl4UixPQUNyQnpLLEVBQU9pYyxRQUFRSSxZQUFjLEdBQzdCcmMsRUFBT2ljLFFBQVFLLFlBQWMsR0FDN0J0YyxFQUFPaWMsUUFBUU0sZ0JBQWtCLEdBQ2pDbmEsRUFBWTZILGdCQUFnQixrQ0FDdEJDLE1BQU9sSyxFQUNQcU0seUJBQXlCLEVBQ3pCbEMsVUFBVyxnQkFFVjVJLEtBQUssU0FBUzZJLEdBQ2IvSixTQUFTcUUsZUFBZSxxQkFBcUJDLE1BQU1DLFFBQVEsT0FDM0R0QixFQUFhK0csWUFBY0QsRUFDM0IvSixTQUFTcUUsZUFBZSxZQUFZQyxNQUFNQyxRQUFVLE9BQ3BEdEIsRUFBYStHLFlBQVlDLFVBSW5DdEssRUFBT3djLG1CQUFxQixXQUMxQm5jLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUNoRSxJQUFJNEYsR0FBUyxHQUFJQyxNQUVqQkQsR0FBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsb0JBQW9CLFVBQVUzSyxFQUFPaWMsUUFBUUksY0FDbkY3UixFQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQixtQkFBbUIsVUFBVTNLLEVBQU9pYyxRQUFRSyxjQUNsRjlSLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLDZCQUE2QixVQUFVM0ssRUFBT2ljLFFBQVFNLGtCQUM1Ri9SLEVBQU9FLEtBQUsxSyxFQUFPeWMsa0NBQWtDLDBDQUEwQyxXQUFXemMsRUFBT2ljLFFBQVFLLFlBQVl0YyxFQUFPaWMsUUFBUU0sa0JBQ2pKelosRUFBYW1JLGFBQWFULEVBQU8sbUJBQ2xDOUgsRUFBWWdhLGdCQUFnQi9aLEVBQVlpSSxNQUFNNUssRUFBT2ljLFFBQVFJLFlBQVlyYyxFQUFPaWMsUUFBUUssWUFBWXRjLEVBQU9pYyxRQUFRTSxpQkFBaUJoYixLQUFLLFNBQVN1RixHQUNoSnpHLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUMxQyxnQ0FBbkJrQyxFQUFLTixLQUFLMFIsU0FDWHZWLEVBQVlpTixlQUFlak4sRUFBWXVKLEtBQU12SixFQUFZaUksTUFBTzVLLEVBQU9pYyxRQUFRSyxZQUFhM1osRUFBWWtOLGtCQUFtQmxOLEVBQVl5SixNQUFPekosRUFBWW1OLGFBQzFKM1IsRUFBVTZSLFNBQVNyTixFQUFZdUosS0FBS3ZKLEVBQVlpSSxNQUFNakksRUFBWXdKLFNBQVN4SixFQUFZa04sa0JBQWtCbE4sRUFBWXlKLE1BQU16SixFQUFZbU4sYUFDdkl4TSxFQUFha0IscUJBQ2JuRSxTQUFTcUUsZUFBZSxZQUFZQyxNQUFNQyxRQUFVLFNBRXBEOUIsRUFBYW9MLG1CQUFtQixrQkFBa0IsK0VBSXREN04sU0FBU3FFLGVBQWUsd0JBQXdCQyxNQUFNQyxRQUFVLFFBSXBFNUUsRUFBTzJLLG1CQUFxQixTQUFTdUIsRUFBS3FCLEVBQUtFLEdBQzdDLEdBQUlrUCxHQUFRLEdBQUlsUyxNQUloQixPQUhBa1MsR0FBTXpRLEtBQU9BLEVBQ2J5USxFQUFNcFAsS0FBT0EsRUFDYm9QLEVBQU1sUCxNQUFRQSxFQUNQa1AsR0FHVDNjLEVBQU95YyxrQ0FBb0MsU0FBU3ZRLEVBQUtxQixFQUFLRSxFQUFNbVAsR0FDbEUsR0FBSUQsR0FBUSxHQUFJbFMsTUFLaEIsT0FKQWtTLEdBQU16USxLQUFPQSxFQUNieVEsRUFBTXBQLEtBQU9BLEVBQ2JvUCxFQUFNbFAsTUFBUUEsRUFDZGtQLEVBQU1DLFlBQWNBLEVBQ2JELEdBR1QzYyxFQUFPNmMsa0JBQW9CLFNBQVNoZixHQUNsQyxHQUFHQSxFQUFJaWYsUUFBUSw4QkFBZ0MsRUFBRSxDQUMvQyxHQUFJQyxHQUFRbGYsRUFBSW1mLE1BQU0sNkJBQ2xCQyxFQUFTLDRCQUE0QkYsRUFBTSxFQUMvQyxPQUFPRSxHQUVULE1BQU9wZixJQUdUbUMsRUFBTzBQLFFBQVUsU0FBUzlFLEVBQU91QixHQUMvQixHQUFHakosRUFBb0JrQixXQUFXLENBQ2hDL0QsU0FBU3FFLGVBQWUsd0JBQXdCQyxNQUFNQyxRQUFVLE9BQ2hFLElBQUk0RixHQUFTLEdBQUlDLE1BQ2pCRCxHQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQixRQUFRLFFBQVFDLElBQ3RESixFQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQixhQUFhLFVBQVV3QixJQUMxRHJKLEVBQWFtSSxhQUFhVCxFQUFPLG1CQUNsQzlILEVBQVlnTixRQUFRdkQsRUFBVXZCLEdBQU9ySixLQUFLLFNBQVN1RixHQUM5Q2hFLEVBQWE2TSw0QkFBNEI3SSxFQUFLLG9CQUMvQ0EsRUFBS04sS0FBS3NKLFlBQWM5UCxFQUFPNmMsa0JBQWtCL1YsRUFBS04sS0FBS3NKLGFBQzNEbk4sRUFBWWlOLGVBQWU5SSxFQUFLTixLQUFLMEYsS0FBTXRCLEVBQU91QixFQUFVckYsRUFBS04sS0FBS3FKLGtCQUFtQi9JLEVBQUtOLEtBQUs0RixNQUFPdEYsRUFBS04sS0FBS3NKLGFBQ3BIM1IsRUFBVTZSLFNBQVNsSixFQUFLTixLQUFLMEYsS0FBS3RCLEVBQU11QixFQUFTckYsRUFBS04sS0FBS3FKLGtCQUFrQi9JLEVBQUtOLEtBQUs0RixNQUFNdEYsRUFBS04sS0FBS3NKLGFBQ3BHaEosRUFBS04sS0FBS3VKLFlBQ1hwTixFQUFZb04sVUFBWWpKLEVBQUtOLEtBQUt1SixXQUdwQzFQLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUNoRTVFLEVBQU9rZCxvQkFFUGxkLEVBQU9pUSxpQkFBaUIsSUFFeEI1UCxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsUUFFakUsU0FBU2tDLEdBR1Z6RyxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsT0FDaEU5QixFQUFhb0wsbUJBQW1CLGtCQUFrQnBILEVBQUtvSixjQUd6RDdQLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxXQUlsRTNCLEdBQWEwQyxXQUFXLDBCQUEwQix3REFJdEQzRixFQUFPbWQsYUFBZSxTQUFTdlMsRUFBT3VCLEdBQ3BDekosRUFBWWdOLFFBQVF2RCxFQUFVdkIsR0FBT3JKLEtBQUssU0FBU3VGLEdBQ2pELE1BQUdoRSxHQUFhc2EsaUNBQWlDdFcsSUFDL0NBLEVBQUtOLEtBQUtzSixZQUFjOVAsRUFBTzZjLGtCQUFrQi9WLEVBQUtOLEtBQUtzSixhQUMzRG5OLEVBQVlpTixlQUFlOUksRUFBS04sS0FBSzBGLEtBQU10QixFQUFPdUIsRUFBVXJGLEVBQUtOLEtBQUtxSixrQkFBbUIvSSxFQUFLTixLQUFLNEYsTUFBT3RGLEVBQUtOLEtBQUtzSixhQUNwSDNSLEVBQVU2UixTQUFTbEosRUFBS04sS0FBSzBGLEtBQUt0QixFQUFNdUIsRUFBU3JGLEVBQUtOLEtBQUtxSixrQkFBa0IvSSxFQUFLTixLQUFLNEYsTUFBTXRGLEVBQUtOLEtBQUtzSixhQUNwR2hKLEVBQUtOLEtBQUt1SixZQUNYcE4sRUFBWW9OLFVBQVlqSixFQUFLTixLQUFLdUosV0FFcEMvUCxFQUFPaVEsaUJBQWlCLEdBQ2pCLEdBRUEsR0FHUixTQUFTbkosR0FHVixNQUFPLE1BSVg5RyxFQUFPcWQsU0FBVyxXQUNoQjFhLEVBQVkyYSxrQkFDWm5mLEVBQVVvZixZQUNWbGQsU0FBU3FFLGVBQWUsV0FBV0MsTUFBTUMsUUFBVSxPQUNuRDVFLEVBQU9pUSxpQkFBaUIsR0FDeEI1UCxTQUFTcUUsZUFBZSxxQkFBcUJDLE1BQU1DLFFBQVEsUUFHN0Q1RSxFQUFPd2Qsd0JBQTBCLFdBRS9CeGQsRUFBT21ULFFBQVUsR0FBSTFJLE9BQ3JCekssRUFBT21ULFFBQVF2SSxNQUFRakksRUFBWWlJLE1BQ25DNUssRUFBT21ULFFBQVFoSCxTQUFXLEdBQzFCbk0sRUFBT21ULFFBQVFzSyxTQUFXOWEsRUFBWXVKLEtBQ3RDbE0sRUFBT21ULFFBQVF1SyxVQUFZL2EsRUFBWWlJLE1BQ3ZDNUssRUFBT21ULFFBQVF3SyxPQUFTaGIsRUFBWWtOLGtCQUNwQzdQLEVBQU9tVCxRQUFReUssVUFBWWpiLEVBQVl5SixNQUN2Q3BNLEVBQU9tVCxRQUFRckQsWUFBYyxLQUNELE1BQXpCbk4sRUFBWW1OLGFBQ2I5UCxFQUFPNmQsYUFBZWxiLEVBQVltTixZQUNWLHNDQUFyQjlQLEVBQU82ZCxlQUNSN2QsRUFBTzZkLGFBQWUsaUNBRXhCdmEsRUFBYWtCLHFCQUNicEMsRUFBWTZILGdCQUFnQiwwQ0FDeEJDLE1BQU9sSyxFQUNQcU0seUJBQXlCLEVBQ3pCbEMsVUFBVyxnQkFFVjVJLEtBQUssU0FBUzZJLEdBQ2IvSixTQUFTcUUsZUFBZSxxQkFBcUJDLE1BQU1DLFFBQVEsT0FDM0R0QixFQUFhK0csWUFBY0QsRUFDM0IvSixTQUFTcUUsZUFBZSxZQUFZQyxNQUFNQyxRQUFVLE9BQ3BEdEIsRUFBYStHLFlBQVlDLFdBRy9CdEssRUFBTzZkLGFBQWUsS0FDdEJ2YSxFQUFha0IscUJBQ2JwQyxFQUFZNkgsZ0JBQWdCLCtCQUN4QkMsTUFBT2xLLEVBQ1BxTSx5QkFBeUIsRUFDekJsQyxVQUFXLGdCQUVWNUksS0FBSyxTQUFTNkksR0FDYnBLLEVBQU84SSxvQkFDUHhGLEVBQWErRyxZQUFjRCxFQUMzQi9KLFNBQVNxRSxlQUFlLFlBQVlDLE1BQU1DLFFBQVUsT0FDcER0QixFQUFhK0csWUFBWUMsV0FLbkN0SyxFQUFPOGQseUJBQTJCLFdBRWhDemQsU0FBU3FFLGVBQWUsWUFBWUMsTUFBTUMsUUFBVSxRQUNwRHRCLEVBQWFrQixzQkFHZnhFLEVBQU8rZCxnQkFBa0IsV0FDdkIvZCxFQUFPZ2UsYUFBYXJiLEVBQVlpSSxNQUFNakksRUFBWXdKLFNBQVNuTSxFQUFPbVQsUUFBUXNLLFNBQVN6ZCxFQUFPbVQsUUFBUXVLLFVBQVUxZCxFQUFPbVQsUUFBUXdLLE9BQU8zZCxFQUFPbVQsUUFBUXlLLFVBQVU1ZCxFQUFPbVQsUUFBUXJELGNBRzVLOVAsRUFBT2dlLGFBQWUsU0FBU3BULEVBQU11QixFQUFVc1IsRUFBVUMsRUFBV0MsRUFBUU0sRUFBWUMsR0FDdEYsR0FBR2hiLEVBQW9Ca0IsV0FBVyxDQUNoQy9ELFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUNoRSxJQUFJNEYsR0FBUyxHQUFJQyxNQUtqQixJQUpBRCxFQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQixxQkFBcUIsUUFBUStTLElBRW5FbFQsRUFBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIsc0JBQXNCLFdBQVdnVCxJQUN2RW5ULEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLG9CQUFvQixZQUFZOFMsSUFDbkUzYSxFQUFhbUksYUFBYVQsRUFBTyxtQkFBbUIsQ0FDckQsR0FBSTJULEdBQWV6YixFQUFZMGIsVUFBVXhULEVBQU11QixFQUFVc1IsRUFBVUMsRUFBV0MsRUFBUU0sRUFBWUMsRUFDN0UsT0FBbEJBLEdBQTRDLElBQWxCQSxFQUMzQkMsRUFBYTVYLFFBQVEsU0FBU0MsRUFBTUMsRUFBUUMsRUFBUXhILEdBQ2xEbUIsU0FBU3FFLGVBQWUsY0FBYzRKLFVBQVksZ0JBRS9DeEwsRUFBYWlNLGlDQUFpQ3ZJLEVBQUssb0JBQ3BEN0QsRUFBWWlOLGVBQWVwSixFQUFLMEYsS0FBTTFGLEVBQUtvRSxNQUFPdUIsRUFBVTNGLEVBQUtxSixrQkFBbUJySixFQUFLNEYsTUFBTzVGLEVBQUtzSixhQUNyR3pQLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUNoRTVFLEVBQU84ZCwyQkFDUDlkLEVBQU9xRSxxQkFFUGhFLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxTQUduRWpHLE1BQU0sU0FBUzZILEVBQU1DLEVBQVFDLEVBQVF4SCxHQUNwQzRELEVBQWFvTCxtQkFBbUIsa0JBQWtCekgsR0FDbERwRyxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsU0FHbEV1WixFQUFhNWMsS0FBSyxTQUFTdUUsR0FDekIsR0FBSVUsR0FBT08sS0FBS0MsTUFBTWxCLEVBQU9tQixTQUMxQm5FLEdBQWFpTSxpQ0FBaUN2SSxFQUFLLG9CQUNwRDdELEVBQVlpTixlQUFlcEosRUFBSzBGLEtBQU0xRixFQUFLb0UsTUFBT3VCLEVBQVUzRixFQUFLcUosa0JBQW1CckosRUFBSzRGLE1BQU81RixFQUFLc0osYUFDckd6UCxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsT0FDaEU1RSxFQUFPOGQsMkJBQ1A5ZCxFQUFPcUUscUJBRVBoRSxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsUUFFakUsU0FBU2pHLEdBQ1YsR0FBSTBmLEdBQVEsV0FBYTFmLEVBQU0yZixJQUMvQkQsR0FBUUEsRUFBUSxZQUFjMWYsRUFBTXVTLE9BQ3BDbU4sRUFBUUEsRUFBUSxhQUFlMWYsRUFBTTRmLE9BQ3JDRixFQUFRQSxFQUFRLGlCQUFtQjFmLEVBQU02ZixZQUN6Q0gsRUFBUUEsRUFBUSxVQUFZMWYsRUFBTThmLEtBQ2xDSixFQUFRQSxFQUFRLGVBQWlCMWYsRUFBTStmLFVBQ3ZDNWIsRUFBYW9MLG1CQUFtQixrQkFBa0IsOEJBQWdDbVEsR0FDbEZoZSxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsUUFDL0QsU0FBU3NDLEdBQ1J0RSxFQUFTLFdBQ1A1QyxFQUFPbU8sZUFBa0JqSCxFQUFTa0gsT0FBU2xILEVBQVNtSCxNQUFTLElBQzdEaE8sU0FBU3FFLGVBQWUsY0FBYzRKLFVBQVksWUFBY0MsS0FBS0MsTUFBTXhPLEVBQU9tTyxnQkFBa0IsWUFLNUc5TixVQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsV0FHbEUzQixHQUFhMEMsV0FBVywwQkFBMEIsMERBS3REM0YsRUFBTzJlLGlCQUFtQixXQUV4QjNlLEVBQU9pYyxRQUFVLEdBQUl4UixPQUNyQnpLLEVBQU9pYyxRQUFRclIsTUFBUSxHQUN2QjVLLEVBQU9pYyxRQUFROVAsU0FBVyxHQUMxQjdJLEVBQWFrQixxQkFDYnBDLEVBQVk2SCxnQkFBZ0IseUJBQ3hCQyxNQUFPbEssRUFDUHFNLHlCQUF5QixFQUN6QmxDLFVBQVcsZ0JBRVY1SSxLQUFLLFNBQVM2SSxHQUNicEssRUFBTzhJLG9CQUNQeEYsRUFBYStHLFlBQWNELEVBQzNCL0osU0FBU3FFLGVBQWUsWUFBWUMsTUFBTUMsUUFBVSxPQUNwRHRCLEVBQWErRyxZQUFZQyxVQUlqQ3RLLEVBQU80ZSxTQUFXLFdBQ2hCNWUsRUFBTzBQLFFBQVExUCxFQUFPaWMsUUFBUXJSLE1BQU01SyxFQUFPaWMsUUFBUTlQLFdBR3JEbk0sRUFBT2tkLGtCQUFvQixXQUN6QjdjLFNBQVNxRSxlQUFlLFlBQVlDLE1BQU1DLFFBQVUsUUFDcER0QixFQUFha0Isc0JBS2Z4RSxFQUFPNmUsbUJBQXFCLFdBRTFCN2UsRUFBTzhlLFFBQVUsR0FBSXJVLE9BQ3JCekssRUFBTzhlLFFBQVFsVSxNQUFRLEdBQ3ZCNUssRUFBTzhlLFFBQVEzUyxTQUFXLEdBQzFCbk0sRUFBTzhlLFFBQVFyQixTQUFXLEdBQzFCemQsRUFBTzhlLFFBQVFuQixPQUFTLEdBQ3hCM2QsRUFBTzhlLFFBQVFsQixVQUFZLEdBQzNCdGEsRUFBYWtCLHFCQUNicEMsRUFBWTZILGdCQUFnQiwwQkFDeEJDLE1BQU9sSyxFQUNQcU0seUJBQXlCLEVBQ3pCbEMsVUFBVyxnQkFFVjVJLEtBQUssU0FBUzZJLEdBQ2JwSyxFQUFPOEksb0JBQ1B4RixFQUFhK0csWUFBY0QsRUFDM0IvSixTQUFTcUUsZUFBZSxZQUFZQyxNQUFNQyxRQUFVLE9BQ3BEdEIsRUFBYStHLFlBQVlDLFVBSWpDdEssRUFBTytlLG9CQUFzQixXQUMzQjFlLFNBQVNxRSxlQUFlLFlBQVlDLE1BQU1DLFFBQVUsUUFDcER0QixFQUFha0Isc0JBR2Z4RSxFQUFPZ2YsUUFBVSxTQUFTcFUsRUFBTTZTLEVBQVN0UixFQUFVd1IsRUFBUU0sR0FDekQsR0FBRy9hLEVBQW9Ca0IsV0FBVyxDQUNoQy9ELFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUNoRSxJQUFJNEYsR0FBUyxHQUFJQyxNQUNqQkQsR0FBT0UsS0FBSzFLLEVBQU8ySyxtQkFBbUIscUJBQXFCLFFBQVFDLElBQ25FSixFQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQixhQUFhLFVBQVV3QixJQUM3RDNCLEVBQU9FLEtBQUsxSyxFQUFPMkssbUJBQW1CLHNCQUFzQixXQUFXZ1QsSUFDdkVuVCxFQUFPRSxLQUFLMUssRUFBTzJLLG1CQUFtQixvQkFBb0IsWUFBWThTLElBQ25FM2EsRUFBYW1JLGFBQWFULEVBQU8sbUJBQ2xDOUgsRUFBWXVjLFlBQVlyVSxFQUFNNlMsRUFBU3RSLEVBQVV3UixFQUFRTSxHQUFZMWMsS0FBSyxTQUFTdUYsR0FDakYsR0FBR2hFLEVBQWE2TSw0QkFBNEI3SSxFQUFLLG1CQUFtQixDQUNsRW5FLEVBQVlpTixlQUFlNk4sRUFBVTdTLEVBQU91QixFQUFVd1IsRUFBUU0sRUFBVyxNQUV6RTVkLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxPQUNoRTVFLEVBQU8rZSxxQkFDUCxJQUFJRyxHQUFhbGUsRUFBWXFkLE9BQzVCdFQsTUFBTywyQkFDUHVCLFNBQVV4RixFQUFLTixLQUFLMFIsU0FFckJnSCxHQUFXM2QsS0FBSyxTQUFTb00sVUFLekJ0TixVQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsUUFFakUsU0FBU2tDLEdBQ1Z6RyxTQUFTcUUsZUFBZSx3QkFBd0JDLE1BQU1DLFFBQVUsT0FDaEU5QixFQUFhb0wsbUJBQW1CLGtCQUFrQnBILEVBQUtvSixjQUd6RDdQLFNBQVNxRSxlQUFlLHdCQUF3QkMsTUFBTUMsUUFBVSxXQUdsRTNCLEdBQWEwQyxXQUFXLDBCQUEwQiw2REFJdEQzRixFQUFPbWYsV0FBYSxXQUNsQm5mLEVBQU9nZixRQUFRaGYsRUFBTzhlLFFBQVFsVSxNQUFNNUssRUFBTzhlLFFBQVFyQixTQUFTemQsRUFBTzhlLFFBQVEzUyxTQUFTbk0sRUFBTzhlLFFBQVFuQixPQUFPM2QsRUFBTzhlLFFBQVFsQixZQUczSDVkLEVBQU9xRSxrQkFBb0IsV0FDekIsR0FBSTZILEdBQU92SixFQUFZdUosSUFDdkIsSUFBUyxNQUFOQSxFQUFXLENBRVYsR0FBSWtULEdBQU9qaEIsRUFBVWtoQixTQUNyQkQsR0FBSzdkLEtBQUssU0FBVTZFLEdBQ0wsTUFBVkEsRUFBSThGLE1BQXdCLElBQVY5RixFQUFJOEYsTUFBc0IsYUFBVjlGLEVBQUk4RixLQUN2Q2xNLEVBQU9tZCxhQUFhL1csRUFBSXdFLE1BQU94RSxFQUFJK0YsVUFFbkNuTSxFQUFPaVEsaUJBQWlCLEtBSjVCbVAsU0FNUyxTQUFVemQsR0FDakIzQixFQUFPaVEsaUJBQWlCLFNBSUEsT0FBekJ0TixFQUFZbU4sYUFBOEMsSUFBekJuTixFQUFZbU4sWUFFOUM5UCxFQUFPaVEsaUJBQWlCLEdBR3hCalEsRUFBT2lRLGlCQUFpQixJQUs5QmpRLEVBQU91RSxpQkFBbUIsV0FDeEIsR0FBSTJILEdBQU92SixFQUFZdUosSUFDdkIsSUFBUyxNQUFOQSxFQUFXLENBRVYsR0FBSWtULEdBQU9qaEIsRUFBVWtoQixTQUNyQkQsR0FBSzdkLEtBQUssU0FBVTZFLEdBQ0wsTUFBVkEsRUFBSThGLE1BQXdCLElBQVY5RixFQUFJOEYsTUFBc0IsYUFBVjlGLEVBQUk4RixLQUV2Q3ZKLEVBQVlpTixlQUFleEosRUFBSThGLEtBQU05RixFQUFJd0UsTUFBT3hFLEVBQUkrRixTQUFVL0YsRUFBSXlKLGtCQUFtQnpKLEVBQUlnRyxNQUFPaEcsRUFBSTBKLGFBRXBHOVAsRUFBT2lRLGlCQUFpQixLQUw1Qm1QLFNBT1MsU0FBVXpkLEdBQ2pCM0IsRUFBT2lRLGlCQUFpQixTQUlBLE9BQXpCdE4sRUFBWW1OLGFBQThDLElBQXpCbk4sRUFBWW1OLFlBRTlDOVAsRUFBT2lRLGlCQUFpQixHQUd4QmpRLEVBQU9pUSxpQkFBaUIsSUFPOUJqUSxFQUFPaVEsaUJBQW1CLFNBQVNxUCxHQUNuQmpmLFNBQVNxRSxlQUFlLGVBQ3pCLElBQVY0YSxFQUVEdGYsRUFBTzJELGtCQUFrQixnQ0FFRyxNQUF6QmhCLEVBQVltTixhQUE4QyxJQUF6Qm5OLEVBQVltTixZQUU5QzlQLEVBQU8yRCxrQkFBa0JoQixFQUFZbU4sWUFJckM5UCxFQUFPMkQsa0JBQWtCLGlDQU0vQjNELEVBQU91ZixRQUFVLFdBQ2J2ZixFQUFPNkksa0JBQWtCLGtCQUN6QjdJLEVBQU84SSxtQkFDUCxJQUFJM0gsSUFBY0MsUUFBUyxJQUFPQyxvQkFBb0IsRUFDdERQLEdBQ0dRLG1CQUFtQkgsR0FDbkJJLEtBQUssU0FBVUMsR0FDVnhCLEVBQU9vSCxJQUFJVSxPQUFPRyxJQUFPekcsRUFBU3NXLE9BQU9DLFNBQ3pDL1gsRUFBT29ILElBQUlVLE9BQU9JLElBQU0xRyxFQUFTc1csT0FBT0UsVUFDeEMvVyxFQUFpQnVYLHlCQUF5QmhYLEVBQVNzVyxPQUFPQyxTQUFTdlcsRUFBU3NXLE9BQU9FLFdBQ2hGOVUsRUFBb0JrQixXQUNyQnBFLEVBQU9vSCxJQUFJVSxPQUFPTSxLQUFPLEdBRXpCcEksRUFBT29ILElBQUlVLE9BQU9NLEtBQU8sR0FFM0JwSSxFQUFPb0gsSUFBSU0sUUFBUXVRLEtBQ2pCaFEsSUFBSXpHLEVBQVNzVyxPQUFPQyxTQUNwQjdQLElBQUkxRyxFQUFTc1csT0FBT0UsVUFDcEJFLFFBQVMsd0hBQ1RDLE9BQU8sRUFDUEMsV0FBVyxFQUNYb0gsZ0JBQWlCLFdBQWEsTUFBT3hmLE1BR3RDLFNBQVMyQixHQUtWM0IsRUFBT3lmLHdCQWlCakJ6ZixHQUFPNEIsSUFBSSxrQ0FBbUMsU0FBU3lELEVBQU9xYSxHQUM1RDFmLEVBQU84SSxvQkFDUG1HLFFBQVFDLElBQUl3USxFQUFjQyxhQUFhQyxPQUFPM1gsS0FDOUNnSCxRQUFRQyxJQUFJd1EsRUFBY0MsYUFBYUMsT0FBTzFYLEtBQzlDakgsRUFBaUJ1WCx5QkFBeUJrSCxFQUFjQyxhQUFhQyxPQUFPM1gsSUFBSXlYLEVBQWNDLGFBQWFDLE9BQU8xWCxLQUNsSGxJLEVBQU8ySSxXQUFXLEtBR3BCM0ksRUFBTzZmLFdBQWEsV0FDbEI3ZixFQUFPOGYsc0JBQ1A3ZSxFQUFpQjhlLGNBQWMsT0FDL0IxYyxFQUFXMmMsd0NBQTBDLEtBR3ZEaGdCLEVBQU9pZ0IsV0FBYSxXQUNsQmpnQixFQUFPOGYsc0JBQ1A3ZSxFQUFpQjhlLGNBQWMsT0FDL0IxYyxFQUFXMmMsMENBQTRDLEtBR3pEaGdCLEVBQU9rZ0IsV0FBYSxXQUNsQmxnQixFQUFPOGYsc0JBQ1A3ZSxFQUFpQjhlLGNBQWMsT0FDL0IxYyxFQUFXMmMsd0NBQTBDLEtBR3ZEaGdCLEVBQU95ZixvQkFBc0IsV0FDM0JyZCxFQUFZNkgsZ0JBQWdCLG9EQUMxQkMsTUFBT2xLLEVBQ1BxTSx5QkFBeUIsRUFDekJsQyxVQUFXLGdCQUVWNUksS0FBSyxTQUFTNkksR0FDYm5KLEVBQWlCWSxjQUFnQnVJLEVBQ2pDbkosRUFBaUJZLGNBQWN5SSxPQUFPL0ksS0FBSyxpQkFLakR2QixFQUFPOGYsb0JBQXNCLFdBQzNCN2UsRUFBaUJZLGNBQWNoRCxPQUMvQm9DLEVBQWlCWSxjQUFjQyxhQzlpRXZDeEUsT0FBT0MsWUFBWXFDLFdBQVcsV0FDN0IsU0FDRCxTQUNBLGNBQ0EsYUFDQSxnQkFDQSxjQUNBLGFBQ0EsSUFDQSxTQUNBLG1CQUNBLGNBQ0EsU0FBU0ksRUFDUGEsRUFDQVosRUFDQXFDLEVBQ0FDLEVBQ0FyQyxFQUNBbUQsRUFDQXJCLEVBQ0FtZSxFQUNBbGYsRUFDQW1CLEdBR0FwQyxFQUFPb2dCLGNBQ0w5UyxLQUFNLFdBQ045TixNQUFPLGVBSVRRLEVBQU80QixJQUFJLHdCQUF5QixXQUV4QjNCLEVBQVlvSSxRQUNjLEtBQWpDcEgsRUFBaUIrRyxlQUNsQjNFLEVBQVcyYyxrQkFBa0IvZSxFQUFpQitHLGVBQWdCL0csRUFBaUJrSCxlQUFnQixJQUMxRCxJQUE5QmxILEVBQWlCd0gsWUFDeEJwRixFQUFXMmMsa0JBQWtCL2UsRUFBaUJ3SCxZQUFheEgsRUFBaUJ5SCxZQUFhLElBR3pGMUksRUFBT3lmLHdCQUlYemYsRUFBTzZmLFdBQWEsV0FDbEI3ZixFQUFPOGYsc0JBQ1A3ZSxFQUFpQjhlLGNBQWMsT0FDL0IxYyxFQUFXMmMsd0NBQTBDLEtBR3ZEaGdCLEVBQU9pZ0IsV0FBYSxXQUNsQmpnQixFQUFPOGYsc0JBQ1A3ZSxFQUFpQjhlLGNBQWMsT0FDL0IxYyxFQUFXMmMsMENBQTRDLEtBR3pEaGdCLEVBQU9rZ0IsV0FBYSxXQUNsQmxnQixFQUFPOGYsc0JBQ1A3ZSxFQUFpQjhlLGNBQWMsT0FDL0IxYyxFQUFXMmMsd0NBQTBDLEtBR3ZEaGdCLEVBQU95ZixvQkFBc0IsV0FDM0JyZCxFQUFZNkgsZ0JBQWdCLG9EQUMxQkMsTUFBT2xLLEVBQ1BxTSx5QkFBeUIsRUFDekJsQyxVQUFXLGdCQUVWNUksS0FBSyxTQUFTNkksR0FDYm5KLEVBQWlCWSxjQUFnQnVJLEVBQ2pDbkosRUFBaUJZLGNBQWN5SSxPQUFPL0ksS0FBSyxpQkFLakR2QixFQUFPOGYsb0JBQXNCLFdBQzNCN2UsRUFBaUJZLGNBQWNoRCxPQUMvQm9DLEVBQWlCWSxjQUFjQyxVQU1qQzlCLEVBQU9xZ0IsV0FBYSxjQUNwQnJnQixFQUFPaUYsVUFBV3FiLE1BQU0sS0FBS0MsUUFBUSxLQUFLQyxNQUFNLEtBTWhELElBQUlDLElBQXFCQyxLQUFLLEtBQUtDLGNBQ25DM2dCLEdBQU80QixJQUFJLHNCQUF1QixXQUNoQzVCLEVBQU9HLHVCQUF5QjNDLFFBQVE0QyxRQUFRQyxTQUFTQyx1QkFBdUIscUJBRWhGTixFQUFPRyx1QkFBdUJJLEtBQUssdUJBQXdCUCxFQUFPUSxXQUlwRVIsRUFBTzRnQixXQUFhLFdBRWxCLEdBQUlDLEdBQU1DLEVBQVcxUixFQUFFb0ssTUFDckJHLFFBQVMsaUJBQ1RDLFVBQVcsR0FBSSxLQUNmQyxnQkFBa0IsS0FHYSxnQkFBN0I3WixFQUFPb2dCLGFBQWE1Z0IsUUFFdEJRLEVBQU9vZ0IsYUFBYTlTLEtBQU8sWUFDM0J0TixFQUFPb2dCLGFBQWE1Z0IsTUFBUSxnQkFHNUJTLEVBQVlvSSxTQUFTOUcsS0FBSyxTQUFTNkYsR0FDakN5WixFQUFPLEdBQUl6UixHQUFFcEQsT0FBTzVFLEVBQUltUixhQUN0QmlCLEtBQU1zSCxFQUNOQyxXQUFXLElBQ1ZoTSxNQUFNM04sR0FFVDdFLEVBQWN3RyxPQUNkeEcsRUFBY3llLFFBQVFDLFVBQVU3WixFQUFJbVIsYUFHcEN2WSxFQUFPRyx1QkFBeUIzQyxRQUFRNEMsUUFBUUMsU0FBU0MsdUJBQXVCLHFCQUNoRk4sRUFBT0csdUJBQXVCSSxLQUFLLHVCQUF3QlAsRUFBT1EsYUFVeEVSLEVBQU9raEIsVUFBWSxTQUFTQyxHQUMxQixPQUFRQyxNQUFNQyxXQUFXRixLQUFPRyxTQUFTSCxJQUczQ25oQixFQUFPVSxlQUFpQixTQUFTQyxHQUMvQixHQUFJNGdCLEVBQ0osSUFBSTVnQixHQUFTQSxFQUFNK0ksUUFBUSxFQUFHLENBQzVCLEdBQXlCLGVBQXJCMUosRUFBT3FnQixXQUNUa0IsRUFBZ0JyaEIsRUFBWVUsb0JBQW9CRCxPQUMzQyxDQUVMLEdBQUdYLEVBQU9raEIsVUFBVXZnQixFQUFNNmdCLFFBQVEsQ0FDaEMsR0FBSWxHLE1BQ0F4QyxHQUFRMkksU0FBVyxTQUFTQyxRQUFVL2dCLEVBQU1zSCxJQUFNdEgsRUFFdEQsT0FEQTJhLEdBQU0sR0FBS3hDLEVBQ0p3QyxFQUVQaUcsRUFBZ0JyaEIsRUFBWXloQixvQkFDMUJyQixNQUFPdGdCLEVBQU80aEIsYUFBYTNaLElBQzNCc1ksUUFBUzVmLElBSWYsTUFBTzRnQixHQUVILFVBSVJ2aEIsRUFBT1EsUUFBVSxXQUVmUixFQUFPRyx1QkFBdUJQLFdBQVcsbUJBQW1CYSxhQUk5RFQsRUFBTzZoQixhQUFlLFNBQVNwRyxHQU03QixHQUpBemIsRUFBT2liLGtCQUFvQlEsRUFFM0J6YixFQUFPNGhCLGFBQWVuRyxFQUFTM0MsS0FDL0I5WSxFQUFPOGhCLDZCQUErQnRrQixRQUFRNEMsUUFBUUMsU0FBU0MsdUJBQXVCLDRCQUM3RCxrQkFBckJOLEVBQU9xZ0IsV0FBZ0MsQ0FDekNJLEVBQW1CRSxjQUNuQjNnQixFQUFPaUYsU0FBU3NiLFFBQVN2Z0IsRUFBTzRoQixhQUNoQ25CLEVBQW1CRSxXQUFXalcsS0FBSzFLLEVBQU9pRixTQUFTcWIsTUFBTXJZLEtBQ3pEd1ksRUFBbUJFLFdBQVdqVyxLQUFLMUssRUFBT2lGLFNBQVNzYixRQUFRdFksSUFDM0QsSUFBSThaLEdBQVcsR0FDWHJCLEVBQU8sRUFDUjFnQixHQUFPa2hCLFVBQVVsaEIsRUFBTzRoQixhQUFhRixVQUV0Q2pCLEVBQW1CQyxLQUFLLFlBQ3hCQSxFQUFPLFNBR1BELEVBQW1CQyxLQUFLLFVBQ3hCcUIsRUFBVyxVQUNYckIsRUFBTyxVQUdUeGdCLEVBQVk4aEIsbUJBQW1CaGlCLEVBQU9pRixTQUFTcWIsTUFBTXJZLElBQUlqSSxFQUFPaUYsU0FBU3NiLFFBQVF0WSxJQUFJeVksR0FBTW5mLEtBQUssU0FBU3VFLEdBRXZHLEdBQUlvRyxHQUFPbE0sRUFBT2lGLFNBQVNxYixNQUFNb0IsUUFBVSxJQUFNSyxFQUFXLElBQU0vaEIsRUFBTzRoQixhQUFhRixPQUN0RnJlLEdBQVc0ZSxVQUFVL1YsRUFBTXBHLEVBQU9VLEtBQUt1UixTQUFTalMsRUFBT1UsS0FBS3dSLFVBQVVoWSxHQUN0RUEsRUFBT3FnQixXQUFhLGNBQ3BCcmdCLEVBQU84aEIsNkJBQTZCSSxLQUFLLGNBQWUsZ0JBQ3hEbGlCLEVBQU84YSx1QkFHVDlhLEdBQU9pRixTQUFTcWIsTUFBT3RnQixFQUFPNGhCLGFBQzlCNWhCLEVBQU9xZ0IsV0FBYSxpQkFDcEJyZ0IsRUFBTzhoQiw2QkFBNkJJLEtBQUssY0FBZSxvQkFDeERsaUIsRUFBT0csdUJBQXVCUCxXQUFXLG1CQUFtQmEsWUFDNURULEVBQU9nYiwyQkFzQlhoYixFQUFPbWlCLGNBQWUsU0FBU0MsR0FDN0IsR0FBSUMsR0FBWUMsU0FBU0YsRUFBTUcsWUFDNUJDLFFBQU9DLFVBQVVKLEtBRWxCNUIsRUFBbUJDLEtBQUssWUFDeEJELEVBQW1CRSxXQUFXalcsS0FBSzFLLEVBQU9pRixTQUFTcWIsTUFBTW9DLFFBQ3pEakMsRUFBbUJFLFdBQVdqVyxLQUFLMlgsR0FDbkNuaUIsRUFBWXlpQixnQkFBZ0JsQyxHQUFvQmxmLEtBQUssU0FBU3VFLEdBQzlEekMsRUFBVzRlLFVBQVV6a0IsUUFBUW9sQixRQUFRQyxPQUFPN2lCLEVBQU80aEIsYUFBYWlCLE9BQVMsSUFBTVIsR0FBWXZjLEdBQVE5RixHQUNuR0EsRUFBT3FnQixXQUFhLGVBRXBCLFNBQVMxaEIsR0FFVHdoQixFQUFPMkMsVUFBVSxRQUFRLDJCQUEyQnZoQixLQUFLLFNBQVNvTSxHQUM5RDNOLEVBQU9HLHVCQUF1QlAsV0FBVyxtQkFBbUJhLHFCQ2pQdEVuRCxPQUFPSSxTQUFTcWxCLFFBQVEsZUFBZ0IsUUFBUyx1QkFBd0IsZ0JBQWlCLFNBQVNDLEVBQU85Z0IsRUFBc0JHLEdBRTlILEdBQUlxQixHQUFVckIsRUFBY3FCLFFBQVUsYUFFdEMsUUFDRWdNLFFBQVMsU0FBVXZELEVBQVV2QixHQUMzQixNQUFPb1ksR0FBTUMsSUFBSXZmLEVBQVUsV0FBYXdmLGlCQUFpQixFQUFNQyxRQUFVdFksaUJBQWtCc0IsRUFBVXZCLE1BQU9BLE1BRzlHeVMsU0FBVSxTQUFVbFIsRUFBVXZCLEdBQzVCLE1BQU9vWSxHQUFNQyxJQUFJdmYsRUFBVSxZQUFjd2YsaUJBQWlCLEVBQU1DLFFBQVV0WSxpQkFBa0JzQixFQUFVdkIsTUFBT0EsTUFHL0dxVSxZQUFhLFNBQVVyVSxFQUFNNlMsRUFBU3RSLEVBQVV3UixFQUFRTSxHQUN0RCxNQUFPK0UsR0FBTUMsSUFBSXZmLEVBQVUsZUFBaUJ3ZixpQkFBaUIsRUFBTUMsUUFBVUMsV0FBWXhZLEVBQU9zQixLQUFNdVIsRUFBVTRGLGtCQUFtQmxYLEVBQzdFMEQsa0JBQW1COE4sRUFBUXZSLE1BQU82UixNQUcxRjlCLGtCQUFtQixTQUFVdlIsR0FDM0IsTUFBT29ZLEdBQU1DLElBQUl2ZixFQUFVLG1CQUFxQnlmLFFBQVVHLFlBQWExWSxNQUl6RThSLGdCQUFpQixTQUFVOVIsRUFBTXlSLEVBQVlDLEVBQVlDLEdBRXZELEdBQUlrQyxHQUFPLFNBQVM3VCxFQUFNLHFCQUFxQnlSLEVBQVksaUJBQWlCQyxFQUFZLFlBQVlDLENBQ3BHLE9BQU95RyxHQUFNTyxLQUFLN2YsRUFBVSxrQkFBbUIrYSxHQUFNL1gsU0FBVThjLGVBQWdCLHdDQUtqRnBGLFVBQVcsU0FBVXhULEVBQU11QixFQUFVc1IsRUFBVUMsRUFBV0MsRUFBUU0sRUFBWUMsR0FDNUUsR0FBc0IsTUFBbEJBLEdBQTRDLElBQWxCQSxFQUFzQixDQUNsRCxHQUFJbFosSUFDSHllLFFBQVMsUUFJVFAsaUJBQWlCLEVBQ2pCQyxRQUFZdlksTUFBT0EsRUFDUEMsaUJBQWtCc0IsRUFDbEJELEtBQU11UixFQUNOQyxVQUFXQSxFQUNYN04sa0JBQW1COE4sRUFDbkJ2UixNQUFPNlIsSUFHaEJ5RixHQUFnQixDQUNwQixPQUFPeGhCLEdBQXFCeWhCLE9BQU9qZ0IsRUFBVSxZQUFhd2EsRUFBa0JsWixFQUFTMGUsR0FFckYsTUFBT1YsR0FBTUMsSUFBSXZmLEVBQVUsYUFBZXdmLGlCQUFpQixFQUFNQyxRQUFVdlksTUFBT0EsRUFDOUJDLGlCQUFrQnNCLEVBQ2xCRCxLQUFNdVIsRUFDTkMsVUFBV0EsRUFDWDdOLGtCQUFtQjhOLEVBQ25CdlIsTUFBTzZSLFVDdkRuRTNnQixPQUFPSSxTQUFTcWxCLFFBQVEscUJBQXNCLFFBQVEsbUJBQW9CLGdCQUFpQixZQUFhLFNBQVNDLEVBQU0vaEIsRUFBa0JvQixFQUFlbEUsR0FFdEosR0FBSXVGLEdBQVVyQixFQUFjcUIsUUFBVSxtQkFDbENrZ0IsRUFBaUJ2aEIsRUFBY3FCLFFBQVUsa0JBRTdDLFFBQ0V1RixJQUFLLFdBQ0gsTUFBTytaLEdBQU1DLElBQUl2ZixHQUFXeWYsUUFBVWxiLElBQUtoSCxFQUFpQitHLGVBQWdCZ0IsSUFBSy9ILEVBQWlCa0gsZUFBZ0IwYixPQUFRLFdBRzVIck0sZ0JBQWlCLFNBQVVKLEdBQ3pCLE1BQU80TCxHQUFNQyxJQUFJVyxHQUFrQlQsUUFBVVcsUUFBUyxPQUFRQyxLQUFNM00sTUFHdEU3TixvQkFBcUIsV0FDbkIsTUFBT3BMLEdBQVU2bEIscUJDZnZCMW1CLE9BQU9JLFNBQVNxbEIsUUFBUSxpQkFBa0IsUUFBUyxTQUFTQyxHQUUxRCxHQUFJaUIsS0FTSixPQVBBQSxHQUFVdmdCLFFBQVUsUUFDakI1RSxNQUFNQyxTQUFTdUcsY0FDaEIyZSxFQUFVdmdCLFFBQVUsNENBR3RCdWdCLEVBQVUxTixZQUFjLHdCQUVqQjBOLEtDWFQzbUIsT0FBT0ksU0FBU3FsQixRQUFRLHVCQUF3QixrQkFBbUIsU0FBUzdrQixHQUUxRSxPQUNFa0csU0FBVSxXQUNSLE9BQU8sR0FhVDhmLFVBQVcsV0FDVCxPQUFPLE9DbEJiNW1CLE9BQU9JLFNBQVNxbEIsUUFBUSxhQUFjLEtBQU0sU0FBU29CLEdBa0JsRCxRQUFTblUsR0FBU29VLEVBQVdDLEVBQVlDLEVBQWVDLEVBQWF0RyxFQUFZQyxHQUMzRSxHQUFJa0IsSUFDRHZZLElBQUssY0FDTHFGLEtBQU1rWSxFQUNOeFosTUFBT3laLEVBQ1BsWSxTQUFVbVksRUFDVnpVLGtCQUFtQjBVLEVBQ25CblksTUFBTzZSLEVBQ1BuTyxZQUFhb08sRUFFaEJtQixLQUFVOWQsS0FBSyxTQUFVNkUsR0FFdkIsTUFEQWdaLEdBQUtvRixLQUFPcGUsRUFBSW9lLEtBQ1RMLEVBQUdNLEtBQUtDLEVBQUlDLElBQUl2RixNQUZ6QkMsU0FHUyxTQUFVMWQsR0FDakIsTUFBT3dpQixHQUFHTSxLQUFLQyxFQUFJQyxJQUFJdkYsTUFJaEMsUUFBU0MsS0FDTixNQUFPOEUsR0FBR00sS0FBS0MsRUFBSXpCLElBQUksZ0JBRzFCLFFBQVMxRixLQUNQNEcsRUFBR00sS0FBS0MsRUFBSXpCLElBQUksZ0JBQWdCMWhCLEtBQUssU0FBUzZFLEdBQzVDLE1BQU8rZCxHQUFHTSxLQUFLQyxFQUFJNWlCLE9BQU9zRSxNQUk3QixRQUFTbkgsS0FJTCxNQURBeWxCLEdBQU0sR0FBSUUsU0FBUSxXQUFZQyxRQUFTLGlCQUFrQkMsb0JBQXFCLFlBSWxGLFFBQVNuVSxHQUFXeEssR0FFakIsR0FBSWdLLEdBQU8sR0FBSUMsTUFDWDJVLEVBQWdCLFVBQVk1VSxFQUFLTyxlQUFpQlAsRUFBS0ssV0FBYSxHQUFLTCxFQUFLRyxVQUFZSCxFQUFLNlUsaUJBRW5HLE9BREE3ZSxHQUFPVSxJQUFNa2UsRUFDTlosRUFBR00sS0FBS0MsRUFBSUMsSUFBSXhlLElBRzFCLFFBQVMrRSxHQUFhL0UsR0FDcEIsTUFBT2dlLEdBQUdNLEtBQUtDLEVBQUlDLElBQUl4ZSxJQUd6QixRQUFTNmQsS0FDUCxNQUFPRyxHQUFHTSxLQUFLQyxFQUFJekIsSUFBSSxvQkFHekIsUUFBUzlaLEdBQWVFLEdBQ3RCMmEsSUFBZ0J6aUIsS0FBSyxTQUFVNkUsR0FFN0IsTUFEQWlELEdBQVdtYixLQUFPcGUsRUFBSW9lLEtBQ2ZMLEVBQUdNLEtBQUtDLEVBQUlDLElBQUl0YixNQUZ6QjJhLFNBR1MsU0FBVXJpQixHQUVqQixNQURBMEgsR0FBV3hDLElBQU0sa0JBQ1ZzZCxFQUFHTSxLQUFLQyxFQUFJQyxJQUFJdGIsTUFJNUIsUUFBUzRiLEdBQVVwYixHQUNoQixNQUFPc2EsR0FBR00sS0FBS0MsRUFBSXpCLElBQUlwWixJQUd6QixRQUFTaEUsS0FDUCxNQUFPc2UsR0FBR00sS0FBS0MsRUFBSVEsU0FDbEJDLGNBQWMsRUFDZEMsYUFBYSxFQUNiQyxTQUFVLFNBQ1ZDLE9BQVEsYUFJWixRQUFTMWUsR0FBYTJlLEdBQ3BCcEIsRUFBR00sS0FBS2UsR0FBR3ZDLElBQUlzQyxJQUFZaGtCLEtBQUssU0FBUzZFLEdBQ3ZDLE1BQU8rZCxHQUFHTSxLQUFLQyxFQUFJNWlCLE9BQU9zRSxNQUk5QixRQUFTMkYsR0FBa0I1RixHQUN6QixNQUFPZ2UsR0FBR00sS0FBS0MsRUFBSTVpQixPQUFPcUUsSUFsRzNCLEdBQUl1ZSxFQUVKLFFBQ0l6bEIsT0FBUUEsRUFDUitRLFNBQVVBLEVBQ1ZxUCxRQUFTQSxFQUNUOUIsVUFBV0EsRUFDWDVNLFdBQVlBLEVBQ1pzVSxVQUFXQSxFQUNYcGYsY0FBZUEsRUFDZnFGLGFBQWNBLEVBQ2R0RSxhQUFjQSxFQUNkbUYsa0JBQW1CQSxFQUNuQmlZLGNBQWVBLEVBQ2Y3YSxlQUFnQkEsTUNmdkI3TCxPQUFPSSxTQUFTcWxCLFFBQVEsZ0JBQWlCLFFBQVEsY0FBZSxvQkFBcUIsU0FBU0MsRUFBTWhpQixFQUFZeWtCLEdBRTlHLE9BQ0U5Viw0QkFBNkIsU0FBVStWLEVBQVlDLEdBQ2pELEdBQUlDLEdBQVd2bEIsU0FBU3FFLGVBQWVpaEIsRUFDdkMsT0FBMkIsSUFBeEJELEVBQVdsZixLQUFLVixRQUNqQjhmLEVBQVN0WCxVQUFVLE9BQVNvWCxFQUFXbGYsS0FBSzBSLFFBQVUsUUFDdEQwTixFQUFTamhCLE1BQU1DLFFBQVUsU0FDbEIsSUFFUGdoQixFQUFTamhCLE1BQU1DLFFBQVUsUUFDbEIsSUFJWHdZLGlDQUFrQyxTQUFVc0ksR0FDMUMsTUFBMkIsSUFBeEJBLEVBQVdsZixLQUFLVixRQU9yQm9ELGtDQUFtQyxTQUFVd2MsR0FDM0MsR0FBMkIsR0FBeEJBLEVBQVdsZixLQUFLVixPQUFVLENBQzNCLEdBQUlvWixHQUFhbGUsRUFBWXFkLE9BQzVCdFQsTUFBTyxRQUNQdUIsU0FBVW9aLEVBQVdsZixLQUFLMFIsU0FLM0IsT0FIQWdILEdBQVczZCxLQUFLLFNBQVNvTSxHQUN2QixPQUFPLEtBRUYsRUFFUCxPQUFPLEdBSVhvQixpQ0FBa0MsU0FBVXZJLEVBQU1tZixHQUNoRCxHQUFJQyxHQUFXdmxCLFNBQVNxRSxlQUFlaWhCLEVBQ3ZDLE9BQWdCLElBQWJuZixFQUFLVixRQUNOOGYsRUFBU3RYLFVBQVUsT0FBUzlILEVBQUswUixRQUFVLFFBQzNDME4sRUFBU2poQixNQUFNQyxRQUFVLFNBQ2xCLElBRVBnaEIsRUFBU2poQixNQUFNQyxRQUFVLFFBQ2xCLElBSVgrQixzQ0FBdUMsU0FBVUgsR0FDL0MsTUFBZ0IsSUFBYkEsRUFBS1YsUUFPVm9JLG1CQUFvQixTQUFVeVgsRUFBa0J6TixHQUM1QyxHQUFJME4sR0FBV3ZsQixTQUFTcUUsZUFBZWloQixFQUd2QyxPQUZBQyxHQUFTdFgsVUFBVSxPQUFTNEosRUFBVSxRQUN0QzBOLEVBQVNqaEIsTUFBTUMsUUFBVSxTQUNsQixHQUdYK1MseUJBQTBCLFNBQVVPLEdBQ2hDLEdBQUlnSCxHQUFhbGUsRUFBWXFkLE9BQzVCdFQsTUFBTyxRQUNQdUIsU0FBVTRMLEdBS1gsT0FIQWdILEdBQVczZCxLQUFLLFNBQVNvTSxHQUN2QixPQUFPLEtBRUYsR0FHWDFDLGFBQWMsU0FBVVQsRUFBUW1iLEdBQzlCLEdBQUlFLEdBQVMsRUE0QmIsSUEzQkFyYixFQUFPdkUsUUFBUSxTQUFTMFcsR0FDUCxXQUFaQSxFQUFNcFAsT0FDSGtZLEVBQWtCSyxtQkFBbUJuSixFQUFNbFAsU0FDN0NvWSxFQUFTQSxFQUFTLG1CQUFxQmxKLEVBQU16USxLQUFPLGlDQUd6QyxTQUFaeVEsRUFBTXBQLE9BQ0hrWSxFQUFrQk0sZUFBZXBKLEVBQU1sUCxTQUN6Q29ZLEVBQVNBLEVBQVMsbUJBQXFCbEosRUFBTXpRLEtBQU8saURBR3pDLFlBQVp5USxFQUFNcFAsT0FDSGtZLEVBQWtCTyxrQkFBa0JySixFQUFNbFAsU0FDNUNvWSxFQUFTQSxFQUFTLG1CQUFxQmxKLEVBQU16USxLQUFPLDZDQUd6QyxhQUFaeVEsRUFBTXBQLE9BQ0hrWSxFQUFrQlEsbUJBQW1CdEosRUFBTWxQLFNBQzdDb1ksRUFBU0EsRUFBUyxtQkFBcUJsSixFQUFNelEsS0FBTyxnREFHekMsWUFBWnlRLEVBQU1wUCxPQUNIa1ksRUFBa0JTLGtCQUFrQnZKLEVBQU1sUCxNQUFPa1AsRUFBTUMsZUFDekRpSixFQUFTQSxFQUFTLHFCQUF1QmxKLEVBQU16USxLQUFPLDJCQUloRCxJQUFUMlosRUFDRCxPQUFPLENBRVAsSUFBSUQsR0FBV3ZsQixTQUFTcUUsZUFBZWloQixFQUd2QyxPQUZBQyxHQUFTdFgsVUFBV3VYLEVBQ3BCRCxFQUFTamhCLE1BQU1DLFFBQVUsU0FDbEIsT0MvR2Z0SCxPQUFPSSxTQUFTcWxCLFFBQVEsY0FBZSxRQUFTLGdCQUFpQixTQUFTQyxFQUFPM2dCLEdBRS9FLEdBQUlxQixHQUFVckIsRUFBY3FCLFFBQVUsTUFFdEMsUUFDRXVGLElBQUssV0FDSCxNQUFPK1osR0FBTUMsSUFBSXZmLEdBQVd5ZixRQUFVZ0QsS0FBTSxZQ05sRDdvQixPQUFPSSxTQUFTcWxCLFFBQVEsVUFBVyxnQkFBaUIsV0FBVyxjQUFjLFNBQVNxRCxFQUFjeGpCLEVBQVM1QixHQUUzRyxHQUFJcWxCLElBRUZDLFlBQWEsU0FBU2haLEdBQ3BCQSxFQUFPQSxHQUFRLGFBQ2Y4WSxFQUFjOWIsTUFDWmdDLFNBQVVnQixLQUlkaVosWUFBYSxXQUNYSCxFQUFjdm5CLFFBR2hCMm5CLHlCQUEwQixTQUFTbFosRUFBTWxNLEdBQ3ZDLEdBQUlxbEIsR0FBT0MsSUFFWEQsR0FBS0gsWUFBWWhaLEdBRWpCMUssRUFBUyxXQUNQNmpCLEVBQUtGLGVBQ0pubEIsR0FBVyxNQUdoQnVOLGFBQWEsU0FBUzVELEVBQU11QyxHQUMxQixHQUFJcUIsR0FBZTNOLEVBQVkybEIsU0FDaEM1YixNQUFPQSxFQUNQdUIsU0FBVWdCLEdBRVosT0FBT3FCLElBSU5tVSxVQUFVLFNBQVM4RCxFQUFPQyxHQUN4QixHQUFJM0gsR0FBYWxlLEVBQVlxZCxPQUMzQnRULE1BQU82YixFQUNQdGEsU0FBVXVhLEdBRVosT0FBTzNILElBSVgsT0FBT21ILE1DM0NUL29CLE9BQU9JLFNBQVNxbEIsUUFBUSxvQkFBc0IsV0FFNUMsR0FBSStELEtBMEJKLE9BekJBQSxHQUFhcmUsWUFBYyxHQUMzQnFlLEVBQWFwZSxZQUFjLEdBQzNCb2UsRUFBYTllLGVBQWlCLEdBQzlCOGUsRUFBYTNlLGVBQWlCLEdBQzlCMmUsRUFBYWpsQixjQUFnQixLQUM3QmlsQixFQUFhQyxpQkFBbUIsS0FFaENELEVBQWEvRyxjQUFnQixTQUFTaUgsR0FDcENGLEVBQWFDLGlCQUFvQkMsR0FHbkNGLEVBQWFybEIsc0JBQXdCLFNBQVNELEdBQzVDc2xCLEVBQWFyZSxZQUFlakgsRUFBU3NXLE9BQU9DLFNBQzVDK08sRUFBYXBlLFlBQWVsSCxFQUFTc1csT0FBT0UsV0FHOUM4TyxFQUFhdE8seUJBQTJCLFNBQVN2USxFQUFJQyxHQUNuRDRlLEVBQWE5ZSxlQUFpQkMsRUFDOUI2ZSxFQUFhM2UsZUFBaUJELEVBQzlCNGUsRUFBYXJlLFlBQWVSLEVBQzVCNmUsRUFBYXBlLFlBQWVSLEdBRzlCNGUsRUFBYUcsa0JBRU5ILEtDM0JSeHBCLE9BQU9JLFNBQVNxbEIsUUFBUSxjQUFlLGNBQWUsV0FBWSxTQUFTOWlCLEVBQWFrQyxHQUd0RitrQixNQUFNQyxLQUFLLGFBQWMsd0VBR3pCLElBQUlDLEtBNkNKLE9BM0NBQSxHQUFXbkYsVUFBWSxTQUFTL1YsRUFBS2pFLEVBQUllLEVBQUlrQixHQUM1QyxHQUFJbWQsSUFDTTlaLEtBQVEsb0JBQ1IrWixLQUFTL1osS0FBUSxPQUNUZ0ssWUFDUXJMLEtBQVEsZ0NBR3hCcU4sV0FDSWhNLEtBQVEsVUFDVnVKLFVBQ092SixLQUFPLFFBQ1B3SixhQUFlOU8sRUFBSWUsSUFFMUJ1TyxZQUNNc0wsT0FBVTNXLEtBSzNCak0sR0FBWW9JLFNBQVM5RyxLQUFLLFNBQVM2RixHQUNsQyxHQUFJbWdCLEdBQ0M5YixFQUFRMkQsRUFBRW9ZLEtBQUtDLFFBQVFKLEdBQ3pCSyxhQUFnQixTQUFTN1EsRUFBUytJLEdBQ2hDMkgsRUFBVTNILENBQ1YsSUFBSStILEdBQVkscUJBQXFCOVEsRUFBUVUsV0FBV3NMLE9BQU8sOENBQThDMEUsRUFBUXRmLElBQUksSUFBSXNmLEVBQVFyZixJQUFJLG1DQUNySStNLEVBQVc5UyxFQUFTd2xCLEdBQVd6ZCxFQUNuQyxPQUFPa0YsR0FBRXBELE9BQU80VCxHQUFRMUssVUFBVUQsRUFBUyxNQUkvQ3hKLEdBQU1zSixNQUFNM04sR0FDWkEsRUFBSStILFFBQVFvWSxFQUFTLElBQ3JCOWIsRUFBTUgsZUFJWDhiLEVBQVdwSCxrQkFBb0IsU0FBUy9YLEVBQUlDLEVBQUlFLEdBQzdDbkksRUFBWW9JLFNBQVM5RyxLQUFLLFNBQVM2RixHQUNoQ0EsRUFBSStILFFBQVEsR0FBSUMsR0FBRUMsT0FBT3BILEVBQUtDLEdBQUtFLE1BSWpDZ2YsS0NwRFY5cEIsT0FBT0ksU0FBU3FsQixRQUFRLGdCQUFrQixXQUV4QyxHQUFJNkUsS0FVSixPQVRBQSxHQUFTdmQsWUFBYyxLQUV2QnVkLEVBQVNwakIsbUJBQXFCLFdBQ3pCb2pCLEVBQVN2ZCxjQUNWdWQsRUFBU3ZkLFlBQVl4TCxPQUNyQitvQixFQUFTdmQsWUFBWXZJLFdBSWxCOGxCLEtDWlR0cUIsT0FBT0ksU0FBU3FsQixRQUFRLGNBQWUsUUFBUyxjQUFlLHVCQUF3QixnQkFBaUIsU0FBU0MsRUFBTy9pQixFQUFhaUMsRUFBcUJHLEdBRXhKLEdBQUl3bEIsR0FBT3hsQixFQUFjcUIsUUFFckJwQixHQUVGNkQsT0FBUSxTQUFTMmhCLEdBRWYsR0FEQTdZLFFBQVFDLElBQUk0WSxHQUNSQSxFQUFLeGhCLEtBQU0sQ0FDYixHQUFJdEIsSUFDSHllLFFBQVMsUUFDVHNFLFNBQVUsYUFDVkMsYUFBYSxFQUNiQyxTQUFVLGFBQ1Y5RSxPQUFTMkUsRUFDVDVFLGlCQUFpQixFQUVsQmxlLEdBQVEwQixTQUNOd2hCLFdBQVksUUFFZCxJQUFJeEUsSUFBZ0IsQ0FDcEIsT0FBT3hoQixHQUFxQnloQixPQUFPa0UsRUFBTyxxQkFBc0JDLEVBQUt4aEIsS0FBTXRCLEVBQVMwZSxHQUVwRixNQUFPVixHQUFNQyxJQUFJNEUsRUFBTyxzQkFBd0IxRSxPQUFRMkUsS0FJNURyWixVQUFXLFNBQVU3RCxFQUFNMmEsR0FDekIsTUFBT3ZDLEdBQU1DLElBQUk0RSxFQUFPLHlCQUEyQjFFLFFBQVVnRixNQUFPdmQsRUFBT2tCLEdBQUl5WixFQUFXaFksS0FBTSxjQUdsR0wsTUFBTyxTQUFVdEMsRUFBTTJhLEVBQVdyWixFQUFNa2MsRUFBU2xRLEdBQy9DLE1BQU84SyxHQUFNQyxJQUFJNEUsRUFBTyx3QkFBMEIxRSxRQUFVa0YsR0FBSXpkLEVBQU9rQixHQUFJeVosRUFBV3JaLEtBQU1BLEVBQU1rYyxRQUFTQSxFQUFTbFEsUUFBU0EsTUFHL0hyWixLQUFNLFNBQVUwbUIsR0FDZCxHQUFJK0MsR0FBWSx1QkFBeUIvQyxDQUN6QyxPQUFPdkMsR0FBTUMsSUFBSTRFLEVBQU9TLEdBQWFuRixhQUd2Q3JWLFFBQVMsU0FBVUEsR0FVakIsR0FUa0IsR0FBZkEsRUFBUTZJLGFBQ0Y3SSxHQUFRNkksTUFFQyxNQUFmN0ksRUFBUXRPLGFBQ0ZzTyxHQUFRdE8sTUFFUSxNQUF0QnNPLEVBQVF3SixvQkFDRnhKLEdBQVF3SixhQUVieEosRUFBUUcsTUFBTyxDQUNqQixHQUFJakosSUFDSHllLFFBQVMsUUFDVHNFLFNBQVUsYUFDVkMsYUFBYSxFQUNiQyxTQUFVLGFBQ1Y5RSxPQUFTclYsRUFDVG9WLGlCQUFpQixFQUVsQmxlLEdBQVEwQixTQUNOd2hCLFdBQVksUUFFZCxJQUFJeEUsSUFBZ0IsQ0FDcEIsT0FBT3hoQixHQUFxQnloQixPQUFPa0UsRUFBTyxpQkFBa0IvWixFQUFRRyxNQUFPakosRUFBUzBlLEdBRXBGLE1BQU9WLEdBQU1DLElBQUk0RSxFQUFPLGtCQUFvQjNFLGlCQUFpQixFQUFNQyxPQUFRclYsS0FJaEZrSixTQUFVLFNBQVVoTyxFQUFJZixHQUN0QixHQUFJc2dCLEdBQVcsMENBQTBDdmYsRUFBSSxJQUFJZixDQUNqRSxPQUFPK2EsR0FBTUMsSUFBSXNGLEdBQVlwRixhQUloQyxPQUFPN2dCLE1DM0VUaEYsT0FBT0ksU0FBU3FsQixRQUFRLGdCQUFpQixjQUFjLG9CQUFxQixTQUFTL2hCLEVBQVl5a0IsR0FFL0YsT0FDRTlmLFdBQVksU0FBVTZpQixFQUFZQyxHQUM5QixHQUFJdkosR0FBYWxlLEVBQVlxZCxPQUM1QnRULE1BQU95ZCxFQUNQbGMsU0FBVW1jLEdBS1gsT0FIQXZKLEdBQVczZCxLQUFLLFNBQVNvTSxHQUN2QixPQUFPLEtBRUYsR0FHWmdCLGFBQWMsU0FBUzVELEVBQU11QyxHQUMzQixHQUFJcUIsR0FBZTNOLEVBQVkybEIsU0FDWDViLE1BQU9BLEVBQ1B1QixTQUFVZ0IsR0FFOUIsT0FBT3FCLElBR1RDLG9CQUFxQixTQUFTMUUsRUFBTWEsRUFBTXVDLEVBQUtvYixFQUFXQyxHQUN2RDNvQixPQUFTa0ssQ0FDVCxJQUFJMGUsR0FBVTVuQixFQUFZc0osTUFDMUJnQyxTQUFVb2MsRUFBYSxvRkFDdkIzZCxNQUFPQSxFQUNQcUMsU0FBVUUsRUFDVnBELE1BQU9sSyxPQUNQcU4sVUFDSUMsS0FBTSxhQUVOQSxLQUFNLGdCQUNOQyxLQUFNLGtCQUNOQyxNQUFPLFNBQVNoSSxHQUNkLEdBQUlxZ0IsR0FBUyxHQUNUcFksRUFBUXBOLFNBQVNxRSxlQUFlLG1CQUFtQitJLEtBcUJ2RCxJQXBCbUIsV0FBaEJrYixJQUNHbEQsRUFBa0JLLG1CQUFtQnJZLEtBQ3ZDb1ksRUFBU0EsRUFBUyxtQkFBcUI2QyxFQUFhLGlDQUdyQyxTQUFoQkMsSUFDR2xELEVBQWtCTSxlQUFldFksS0FDbkNvWSxFQUFTQSxFQUFTLG1CQUFxQjZDLEVBQWEsaURBR3JDLFlBQWhCQyxJQUNHbEQsRUFBa0JPLGtCQUFrQnZZLEtBQ3RDb1ksRUFBU0EsRUFBUyxtQkFBcUI2QyxFQUFhLDZDQUdyQyxhQUFoQkMsSUFDR2xELEVBQWtCUSxtQkFBbUJ4WSxLQUN2Q29ZLEVBQVNBLEVBQVMsbUJBQXFCNkMsRUFBYSxnREFHN0MsSUFBUjdDLEVBT0QsTUFBT3BZLEVBTlAsSUFBSW1ZLEdBQVd2bEIsU0FBU3FFLGVBQWUseUJBQ3ZDa2hCLEdBQVN0WCxVQUFXdVgsRUFDcEJELEVBQVNqaEIsTUFBTUMsUUFBVSxRQUV6QlksRUFBRWtJLHFCQVFaLE9BQU9rYixRQ3RFWHRyQixPQUFPSSxTQUFTcWxCLFFBQVEsaUJBQWtCLFFBQVMsY0FBYyxnQkFBaUIsU0FBU0MsRUFBTy9pQixFQUFhb0MsR0FZN0csUUFBU3dtQixHQUFPQyxHQUNkdHJCLFFBQVFvbEIsT0FBTzhELEtBQU1vQyxHQVh2QixHQUFJcGxCLEdBQVVyQixFQUFjcUIsUUFBVSxnQkFFbENxbEIsRUFBVTFtQixFQUFjcUIsUUFBVSw0REF3RXBDLE9BNURGbWxCLEdBQU96UyxRQUFVLFNBQVN0SyxHQUN4QixHQUFJak8sR0FBTTZGLEVBQVVvSSxDQUNwQixPQUFPa1gsR0FBTUMsSUFBSXBsQixHQUFLMEQsS0FBSyxTQUFTdUUsR0FDMUIsTUFBT0EsTUFJbkIraUIsRUFBT3hQLE9BQVMsV0FDZCxNQUFPMkosR0FBTUMsSUFBSThGLEdBQVc1RixhQUc5QjBGLEVBQU9HLFNBQVcsV0FDaEIsR0FBSUYsSUFDRjdnQixJQUFLLEVBQ0xlLElBQUssRUFDTCtCLE1BQU8sS0FDUEMsT0FBUSxLQUNSeUwsY0FBZSxFQUNmM0wsU0FBVSxLQUNWc0IsTUFBTyxLQUNQNmMsR0FBSSxHQUNKM2lCLEtBQU0sS0FDTjRGLEtBQU0sS0FDTnRCLE1BQU8sS0FDUHNlLGVBQWdCLEVBQ2hCcmUsaUJBQWtCLEtBQ2xCc2UsWUFBWSxFQUVkLE9BQU8sSUFBSU4sR0FBT0MsSUFFbEJELEVBQU9PLFFBQ1BQLEVBQU83SCxXQUNQNkgsRUFBTzlmLEtBQU8sV0FHWixNQUFPOGYsR0FBT0csWUFTaEJILEVBQU9RLE1BQVEsU0FBU1AsR0FFdEIsTUFBTyxJQUFJRCxHQUNUQyxJQUlKRCxFQUFPUyxVQUFVckksVUFBWSxTQUFVckIsR0FFckM4RyxLQUFLemUsSUFBTTJYLEVBQU8zWCxJQUNsQnllLEtBQUsxZCxJQUFNNFcsRUFBTzFYLEtBTWIyZ0IsS0M1RVh2ckIsT0FBT0ksU0FBU3FsQixRQUFRLGVBQWdCLFFBQVMsS0FBTSxnQkFBaUIsa0JBQW1CLGdCQUFpQixtQkFBb0IsU0FBU0MsRUFBT21CLEVBQUlvRixFQUFlQyxFQUFpQm5uQixFQUFlcEIsR0FFak0sR0FBSXdvQixHQUFjLHNCQUdkdnBCLElBaUVKLE9BL0RBQSxHQUFZVSxvQkFBc0IsU0FBUzhvQixHQU96QyxHQUFJaG1CLEdBQVVyQixFQUFjcUIsUUFBVSxzQkFBd0J6QyxFQUFpQjhsQixpQkFBbUIsSUFBTTJDLENBQ3hHLE9BQU8xRyxHQUFNQyxJQUFJdmYsR0FDZmltQixPQUFRLE1BQ1J4RyxhQUtKampCLEVBQVl5aEIsbUJBQXFCLFNBQVMrSCxHQVV0QyxHQUFJaG1CLEdBQVVyQixFQUFjcUIsUUFBVSxzQkFBd0J6QyxFQUFpQjhsQixpQkFBbUIsSUFDbEYyQyxFQUFVcEosTUFBUSxJQUFNb0osRUFBVW5KLE9BQ2xELE9BQU95QyxHQUFNQyxJQUFJdmYsR0FDZmltQixPQUFRLE1BQ1J4RyxhQUlOampCLEVBQVl5aUIsZ0JBQWtCLFNBQVMrRyxHQUVyQyxJQUFLLEdBREQ3ckIsR0FBTTByQixFQUFjMXJCLElBQU0sSUFBTTRyQixFQUFjdnBCLEVBQVkwcEIsbUJBQW1CRixFQUFVaEosTUFDbEZyTSxFQUFJLEVBQUdBLEVBQUlxVixFQUFVL0ksV0FBV2pYLE9BQVEySyxJQUMvQ3hXLEdBQU8sSUFBTTZyQixFQUFVL0ksV0FBV3RNLEVBRXBDLE9BQU8yTyxHQUFNQyxJQUFJdmYsU0FBU25DLEtBQUssU0FBUzBGLEdBQ3RDLE1BQU9BLEdBQVNULFFBSXBCdEcsRUFBWThoQixtQkFBcUIsU0FBUzFCLEVBQU11SixFQUFlbkosR0FDN0QsR0FBSWhkLEdBQVVyQixFQUFjcUIsUUFBVSxzQkFBd0J6QyxFQUFpQjhsQixpQkFBbUIsSUFDdEZ6RyxFQUFRLElBQU11SixFQUFpQixJQUFNbkosQ0FFakQsT0FBT3NDLEdBQU1DLElBQUl2ZixJQUluQnhELEVBQVkwcEIsbUJBQXFCLFNBQVNFLEdBRXhDLEdBQUlDLElBQ0ZDLFFBQVUsV0FDVkMsVUFBWSxhQUdkLE9BQU9GLEdBQXVCRCxJQUt6QjVwQixLQ3RFVDVDLE9BQU9JLFNBQVNxbEIsUUFBUSxLQUFNLFdBQzVCLE1BQU8xa0IsUUFBTzJELEtDRGhCMUUsT0FBT0ksU0FBU3FsQixRQUFRLGVBQWdCLFFBQVMsU0FBU0MsR0FHeEQsR0FBSWtILEtBK0NKLE9BOUNBQSxHQUFRaGUsS0FBTyxLQUNmZ2UsRUFBUXRmLE1BQVEsS0FDaEJzZixFQUFRL2QsU0FBVyxLQUNuQitkLEVBQVFyYSxrQkFBb0IsS0FDNUJxYSxFQUFROWQsTUFBUSxHQUNoQjhkLEVBQVFwYSxZQUFjLHFDQUN0Qm9hLEVBQVFuYSxVQUFZLEtBR3BCbWEsRUFBUXRhLGVBQWlCLFNBQVV3VSxFQUFXQyxFQUFZQyxFQUFlQyxFQUFhdEcsRUFBWUMsR0FDOUZnTSxFQUFRaGUsS0FBT2tZLEVBQ2Y4RixFQUFRdGYsTUFBUXlaLEVBQ2hCNkYsRUFBUS9kLFNBQVdtWSxFQUNuQjRGLEVBQVFyYSxrQkFBb0IwVSxFQUM1QjJGLEVBQVE5ZCxNQUFRNlIsRUFDaEJpTSxFQUFRcGEsWUFBY29PLEdBSTFCZ00sRUFBUTVNLGdCQUFrQixXQUN4QjRNLEVBQVFoZSxLQUFPLEtBQ2ZnZSxFQUFRdGYsTUFBUSxLQUNoQnNmLEVBQVEvZCxTQUFXLEtBQ25CK2QsRUFBUXJhLGtCQUFvQixLQUM1QnFhLEVBQVE5ZCxNQUFRLEtBQ2hCOGQsRUFBUXBhLFlBQWMsTUFJeEJvYSxFQUFRQyxjQUFnQixhQUl4QkQsRUFBUUUsVUFBWSxTQUFVbE0sR0FDNUJnTSxFQUFRcGEsWUFBY29PLEdBR3hCZ00sRUFBUWplLFNBQVcsV0FDakIsTUFBaUIsT0FBZGllLEVBQVFoZSxNQUE0QixJQUFkZ2UsRUFBUWhlLE1BUTVCZ2UsS0NsRFQ1c0IsT0FBT0ksU0FBU3FsQixRQUFRLHFCQUFzQixRQUFRLGNBQWUsU0FBU0MsRUFBTWhpQixHQUVsRixPQUNFOGtCLG1CQUFvQixTQUFVclksR0FDMUIsTUFBVSxPQUFQQSxHQUFzQixhQUFQQSxHQUE2QixJQUFQQSxHQU81Q3dZLG1CQUFvQixTQUFVeFksR0FDMUIsR0FBVSxNQUFQQSxHQUFzQixhQUFQQSxHQUE2QixJQUFQQSxFQUFVLENBQ2hELEdBQUk0YyxHQUFTNWMsRUFBTXVQLE1BQU0sS0FBS3NOLE9BQU8sU0FBU0MsR0FBRyxNQUFXLEtBQUpBLEdBQ3hELE9BQUlGLEdBQU8zZ0IsT0FBUyxFQVFwQixPQUFPLEdBSWJ3YyxrQkFBbUIsU0FBVXpZLEVBQU1tUCxHQUNqQyxNQUFHblAsSUFBT21QLEdBT1ptSixlQUFnQixTQUFVdFksR0FDdEIsR0FBVSxNQUFQQSxHQUFzQixhQUFQQSxHQUE2QixJQUFQQSxFQUFVLENBQ2hELEdBQUkrYyxHQUFLLHdKQUNULE9BQU9BLEdBQUdDLEtBQUtoZCxHQUVmLE9BQU8sR0FJYnVZLGtCQUFtQixTQUFVdlksR0FDM0IsR0FBVSxNQUFQQSxHQUFzQixhQUFQQSxHQUE2QixJQUFQQSxFQUFVLENBQzlDQSxFQUFRQSxFQUFNNkksUUFBUSxNQUFPLEdBQzdCLElBQUlvVSxHQUFNamQsRUFBTUEsRUFBTS9ELE9BQVMsR0FDM0JpaEIsRUFBSSxFQUFPdFcsRUFBSSxDQUNuQixJQUFHNUcsRUFBTS9ELFFBQVUsRUFDakIsSUFBSTJLLEVBQUk1RyxFQUFNL0QsT0FBUTJLLEVBQUksRUFBR0EsSUFDM0I1RyxFQUFRLElBQU1BLENBR2xCLEtBQUk0RyxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFDaEJzVyxHQUFNckksU0FBUyxVQUFVak8sSUFBTWlPLFNBQVM3VSxFQUFNNEcsSUFBTyxFQUV2RCxJQUFJdk8sRUFNSixPQUpFQSxHQURDNmtCLEVBQUUsS0FBTyxFQUNELEVBRUEsR0FBS0EsRUFBSSxHQUVqQkQsR0FBTzVrQixFQU1aLE9BQU8iLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW9uaWMgU3RhcnRlciBBcHBcblxuLy8gYW5ndWxhci5tb2R1bGUgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyIG1vZHVsZXNcbi8vICdwbWJfaW0nIGlzIHRoZSBuYW1lIG9mIHRoaXMgYW5ndWxhciBtb2R1bGUgZXhhbXBsZSAoYWxzbyBzZXQgaW4gYSA8Ym9keT4gYXR0cmlidXRlIGluIGluZGV4Lmh0bWwpXG4vLyB0aGUgMm5kIHBhcmFtZXRlciBpcyBhbiBhcnJheSBvZiAncmVxdWlyZXMnXG4vLyAnc3RhcnRlci5zZXJ2aWNlcycgaXMgZm91bmQgaW4gc2VydmljZXMuanNcbi8vICdzdGFydGVyLmNvbnRyb2xsZXJzJyBpcyBmb3VuZCBpbiBjb250cm9sbGVycy5qc1xudmFyIHBtYl9pbSA9IHtcbiAgY29udHJvbGxlcnM6IGFuZ3VsYXIubW9kdWxlKCdwbWJfaW0uY29udHJvbGxlcnMnLCBbXSksXG4gIHNlcnZpY2VzOiBhbmd1bGFyLm1vZHVsZSgncG1iX2ltLnNlcnZpY2VzJywgW10pXG59O1xuXG5wbWJfaW0uYXBwID0gYW5ndWxhci5tb2R1bGUoJ3BtYl9pbScsIFsnaW9uaWMnLCdpb25pYy53aXphcmQnLCdpb24tYXV0b2NvbXBsZXRlJywnbGVhZmxldC1kaXJlY3RpdmUnLCAncG1iX2ltLmNvbnRyb2xsZXJzJywgJ3BtYl9pbS5zZXJ2aWNlcycsICduZ0NvcmRvdmEnLCAnaW9uaWMtY2FjaGUtc3JjJ10pXG5cbi5jb25zdGFudCgnQXBpSW1FbmRwb2ludCcsIHtcbiAgdXJsOiAnaHR0cDovL3d3dy5tb250ZXZpZGVvLmd1Yi51eSdcbn0pXG5cbi5jb25zdGFudCgnQXBpRGF0YUVuZHBvaW50Jywge1xuICB1cmw6ICcvZGF0YSdcbn0pXG5cblxuLnJ1bihmdW5jdGlvbigkaW9uaWNQbGF0Zm9ybSwgJHJvb3RTY29wZSwgJGNvcmRvdmFLZXlib2FyZCwkY29yZG92YU5ldHdvcmssREJTZXJ2aWNlKSB7XG4gICRyb290U2NvcGUuVkVSU0lPTiA9IHdpbmRvdy5WRVJTSU9OO1xuICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAvLyBIaWRlIHRoZSBhY2Nlc3NvcnkgYmFyIGJ5IGRlZmF1bHQgKHJlbW92ZSB0aGlzIHRvIHNob3cgdGhlIGFjY2Vzc29yeSBiYXIgYWJvdmUgdGhlIGtleWJvYXJkXG4gICAgLy8gZm9yIGZvcm0gaW5wdXRzKVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29yZG92YS5wbHVnaW5zLktleWJvYXJkLmhpZGVLZXlib2FyZEFjY2Vzc29yeUJhcih0cnVlKTtcbiAgICAgICB9XG4gICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgfVxuICAgICAgLy9jb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuZGlzYWJsZVNjcm9sbChmYWxzZSk7XG4gICAgICB0cnkge1xuICAgICAgICB3aW5kb3cuS2V5Ym9hcmQuaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyKHRydWUpO1xuICAgICAgIH1cbiAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICB9XG4gICAgXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIEtleWJvYXJkLmhpZGVLZXlib2FyZEFjY2Vzc29yeUJhcih0cnVlKTtcbiAgICAgICB9XG4gICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBTdGF0dXNCYXIuaGlkZSgpO1xuICAgICAgIH1cbiAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICB9XG5cblxuICAgIGlvbmljLlBsYXRmb3JtLmlzRnVsbFNjcmVlbiA9IHRydWU7XG5cbiAgICB2YXIgZGIgPSBEQlNlcnZpY2UuaW5pdERCKCk7XG5cblxuICB9KTtcbn0pXG5cbi5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGNvbXBpbGVQcm92aWRlciwgJGlvbmljQ29uZmlnUHJvdmlkZXIpIHtcbiAgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKTtcbiAgLy8kaW9uaWNDb25maWdQcm92aWRlci5zY3JvbGxpbmcuanNTY3JvbGxpbmcodHJ1ZSk7XG5cbiAgLy8gSW9uaWMgdXNlcyBBbmd1bGFyVUkgUm91dGVyIHdoaWNoIHVzZXMgdGhlIGNvbmNlcHQgb2Ygc3RhdGVzXG4gIC8vIExlYXJuIG1vcmUgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvdWktcm91dGVyXG4gIC8vIFNldCB1cCB0aGUgdmFyaW91cyBzdGF0ZXMgd2hpY2ggdGhlIGFwcCBjYW4gYmUgaW4uXG4gIC8vIEVhY2ggc3RhdGUncyBjb250cm9sbGVyIGNhbiBiZSBmb3VuZCBpbiBjb250cm9sbGVycy5qc1xuICAkc3RhdGVQcm92aWRlclxuXG4uc3RhdGUoJ2FwcCcsIHtcbiAgICBjYWNoZTogZmFsc2UsXG4gICAgdXJsOiBcIi9hcHBcIixcbiAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvbWVudS5odG1sXCIsXG4gICAgY29udHJvbGxlcjogJ01hcENvbnRyb2xsZXInXG4gIH0pXG5cbi5zdGF0ZSgnYXBwLm1hcCcsIHtcbiAgICBjYWNoZTogZmFsc2UsXG4gICAgdXJsOiBcIi9tYXAvXCIsXG4gICAgdmlld3M6IHtcbiAgICAgICdtZW51Q29udGVudCcgOntcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL21hcC5odG1sXCIsXG4gICAgICAgIGNvbnRyb2xsZXIgOiBcIlBNQkN0cmxcIlxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuLnN0YXRlKCdhcHAuaW50cm8nLCB7XG4gIGNhY2hlOiBmYWxzZSxcbiAgdXJsOiBcIi9pbnRyb1wiLFxuICB2aWV3czoge1xuICAgICdtZW51Q29udGVudCcgOntcbiAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9pbnRyby5odG1sXCIsXG4gICAgICBjb250cm9sbGVyIDogXCJJbnRyb0N0cmxcIlxuICAgIH1cbiAgfVxufSlcblxuLy8gaWYgbm9uZSBvZiB0aGUgYWJvdmUgc3RhdGVzIGFyZSBtYXRjaGVkLCB1c2UgdGhpcyBhcyB0aGUgZmFsbGJhY2tcbiR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9hcHAvaW50cm8nKTtcblxufSk7XG4iLCJwbWJfaW0uY29udHJvbGxlcnMuY29udHJvbGxlcignQXV0b0NvbXBsZXRlQ3RybCcsIFsnJHNjb3BlJywgJ2xlYWZsZXREYXRhJywgJ2xvY2F0aW9uQVBJJywgZnVuY3Rpb24oJHNjb3BlLCBsZWFmbGV0RGF0YSwgbG9jYXRpb25BUEkpIHtcblxuXG4gICRzY29wZS5pb25BdXRvY29tcGxldGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJpb24tYXV0b2NvbXBsZXRlXCIpKTtcbiAgJHNjb3BlLmlvbkF1dG9jb21wbGV0ZUVsZW1lbnQuYmluZCgndG91Y2hlbmQgY2xpY2sgZm9jdXMnLCAkc2NvcGUub25DbGljayk7XG5cbiAgJHNjb3BlLm9uQ2xpY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICRzY29wZS5pb25BdXRvY29tcGxldGVFbGVtZW50LmNvbnRyb2xsZXIoJ2lvbkF1dG9jb21wbGV0ZScpLnNob3dNb2RhbCgpO1xuXG5cbiAgfTtcblxuXG5cbiAgJHNjb3BlLnNlYXJjaExvY2F0aW9uID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIC8vY29uc29sZS5sb2coXCJxdWVyeT0gXCIgKyBxdWVyeSk7XG4gICAgICByZXR1cm4gbG9jYXRpb25BUEkuc2VhcmNoTG9jYXRpb25CeVN0cihxdWVyeSk7XG5cbiAgICB9XG4gIH07XG5cblxufV0pO1xuIiwicG1iX2ltLmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0ludHJvQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsXG4gICckY29yZG92YUdlb2xvY2F0aW9uJyxcbiAgJyRzdGF0ZVBhcmFtcycsXG4gICckaW9uaWNQbGF0Zm9ybScsXG4gICckaW9uaWNQb3B1cCcsXG4gICdMb2NhdGlvbnNTZXJ2aWNlJyxcbiAgJ0RCU2VydmljZScsXG4gIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCAkY29yZG92YUdlb2xvY2F0aW9uLCAkc3RhdGVQYXJhbXMsICRpb25pY1BsYXRmb3JtLCAkaW9uaWNQb3B1cCwgTG9jYXRpb25zU2VydmljZSwgREJTZXJ2aWNlKSB7XG5cblxuICAkc2NvcGUuZ2VvbG9jYXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBwb3NPcHRpb25zID0ge3RpbWVvdXQ6IDM1MDAsIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZX07XG4gICAgICAkY29yZG92YUdlb2xvY2F0aW9uXG4gICAgICAgIC5nZXRDdXJyZW50UG9zaXRpb24ocG9zT3B0aW9ucylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgICBMb2NhdGlvbnNTZXJ2aWNlLnNhdmVfaW5pdGlhbF9wb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgICAgJHN0YXRlLmdvKFwiYXBwLm1hcFwiKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgJHN0YXRlLmdvKFwiYXBwLm1hcFwiKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5lbnRlcicsIGZ1bmN0aW9uKCl7IC8vVGhpcyBpcyBmaXJlZCB0d2ljZSBpbiBhIHJvd1xuICAgICAgaWYoTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsIT1udWxsKXtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsLmhpZGUoKTtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgICRzY29wZS5nZW9sb2NhdGUoKTtcbiAgIH0pO1xuXG4gIH1cbl0pO1xuIiwicG1iX2ltLmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ01hcENvbnRyb2xsZXInLCBbJyRzY29wZScsICckc2NlJywgJ18nLFxuICAnJGNvcmRvdmFDYW1lcmEnLFxuICAnJGNvcmRvdmFGaWxlVHJhbnNmZXInLFxuICAnJGNvcmRvdmFHZW9sb2NhdGlvbicsXG4gICckY29tcGlsZScsXG4gICckc3RhdGUnLFxuICAnJHN0YXRlUGFyYW1zJyxcbiAgJyRpb25pY01vZGFsJyxcbiAgJyRpb25pY1BvcHVwJyxcbiAgJ2xlYWZsZXREYXRhJyxcbiAgJ0NvbmZpZ1NlcnZpY2UnLFxuICAnUE1CU2VydmljZScsXG4gICdMb2NhdGlvbnNTZXJ2aWNlJyxcbiAgJ1JlcG9ydFNlcnZpY2UnLFxuICAnRmFxU2VydmljZScsXG4gICdDYXRlZ29yaWVzU2VydmljZScsXG4gICdBdXRoU2VydmljZScsXG4gICdVc2VyU2VydmljZScsXG4gICdEQlNlcnZpY2UnLFxuICAnJHRpbWVvdXQnLFxuICAnJGxvY2F0aW9uJyxcbiAgJ0Vycm9yU2VydmljZScsXG4gICckaW9uaWNTbGlkZUJveERlbGVnYXRlJyxcbiAgJyRpb25pY1Njcm9sbERlbGVnYXRlJyxcbiAgJyRjb3Jkb3ZhTmV0d29yaycsXG4gICdQb3BVcFNlcnZpY2UnLFxuICAnJGlvbmljUGxhdGZvcm0nLFxuICAnQ29ubmVjdGl2aXR5U2VydmljZScsXG4gICckY29yZG92YUluQXBwQnJvd3NlcicsXG4gICckaW50ZXJ2YWwnLFxuICAnJGNvcmRvdmFLZXlib2FyZCcsXG4gICdNYXBTZXJ2aWNlJyxcbiAgJ01vZGFsU2VydmljZScsXG4gIGZ1bmN0aW9uKFxuICAgICRzY29wZSxcbiAgICAkc2NlLFxuICAgIF8sXG4gICAgJGNvcmRvdmFDYW1lcmEsXG4gICAgJGNvcmRvdmFGaWxlVHJhbnNmZXIsXG4gICAgJGNvcmRvdmFHZW9sb2NhdGlvbixcbiAgICAkY29tcGlsZSxcbiAgICAkc3RhdGUsXG4gICAgJHN0YXRlUGFyYW1zLFxuICAgICRpb25pY01vZGFsLFxuICAgICRpb25pY1BvcHVwLFxuICAgIGxlYWZsZXREYXRhLFxuICAgIENvbmZpZ1NlcnZpY2UsXG4gICAgUE1CU2VydmljZSxcbiAgICBMb2NhdGlvbnNTZXJ2aWNlLFxuICAgIFJlcG9ydFNlcnZpY2UsXG4gICAgRmFxU2VydmljZSxcbiAgICBDYXRlZ29yaWVzU2VydmljZSxcbiAgICBBdXRoU2VydmljZSxcbiAgICBVc2VyU2VydmljZSxcbiAgICBEQlNlcnZpY2UsXG4gICAgJHRpbWVvdXQsXG4gICAgJGxvY2F0aW9uLFxuICAgIEVycm9yU2VydmljZSxcbiAgICAkaW9uaWNTbGlkZUJveERlbGVnYXRlLFxuICAgICRpb25pY1Njcm9sbERlbGVnYXRlLFxuICAgICRjb3Jkb3ZhTmV0d29yayxcbiAgICBQb3BVcFNlcnZpY2UsXG4gICAgJGlvbmljUGxhdGZvcm0sXG4gICAgQ29ubmVjdGl2aXR5U2VydmljZSxcbiAgICAkY29yZG92YUluQXBwQnJvd3NlcixcbiAgICAkaW50ZXJ2YWwsXG4gICAgJGNvcmRvdmFLZXlib2FyZCxcbiAgICBNYXBTZXJ2aWNlLFxuICAgIE1vZGFsU2VydmljZVxuICApIHtcblxuICAgIC8qKlxuICAgICAqIE9uY2Ugc3RhdGUgbG9hZGVkLCBnZXQgcHV0IG1hcCBvbiBzY29wZS5cbiAgICAgKi9cbiAgICAkc2NvcGUuZmVhdHVyZVJlcG9ydHMgPSB7fTtcbiAgICAkc2NvcGUucmVwb3J0c0J5U3RhdGUgPSB7fTtcbiAgICAkc2NvcGUucmVwb3J0c1Zpc2libGUgPSB7fTtcbiAgICAkc2NvcGUuYmFzZVVSTCA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTDtcbiAgICAkc2NvcGUudXNlcl9jYWNoZWRfaW1hZ2UgPSBcIlwiO1xuICAgICRzY29wZS5yZXBvcnRfZGV0YWlsX2lkID0gbnVsbDtcbiAgICAkc2NvcGUub25lX3ZhbHVlX3BvcHVwID0gbnVsbDtcbiAgICAkc2NvcGUuYWJ1c2VfbmFtZSA9IG51bGw7XG4gICAgJHNjb3BlLmFidXNlX2VtYWlsID0gbnVsbDtcbiAgICAkc2NvcGUuYWJ1c2Vfc3ViamVjdCA9IG51bGw7XG4gICAgJHNjb3BlLmFidXNlX21lc3NhZ2UgPSBudWxsO1xuICAgICRzY29wZS5hbGxDYXRlZ29yaWVzRnJvbUJveUFyZWEgPSBudWxsO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRldmljZXJlYWR5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmKENvbm5lY3Rpdml0eVNlcnZpY2UuaXNPbmxpbmUoKSl7XG4gICAgICAgICRzY29wZS5jaGVja191c2VyX2xvZ2dlZCgpO1xuICAgICAgICAkc2NvcGUuc2VuZF9vZmZsaW5lX3JlcG9ydHMoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICAkc2NvcGUuc2V0X29mZmxpbmVfdXNlcigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgICRzY29wZS4kb24oXCIkaW9uaWNWaWV3LmJlZm9yZUVudGVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgICAgJHNjb3BlLnNldF9uZXR3b3JrX2V2ZW50cygpO1xuICAgICAgdmFyIGNoZWNrT2ZmbGluZVJlcG9ydHMgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5zZW5kX29mZmxpbmVfcmVwb3J0cygpO1xuICAgICAgfSwgNjAwMDApO1xuICAgICAgaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKSE9bnVsbCl7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgfVxuXG4gICAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgICAkc2NvcGUuY3JlYXRlX29ubGluZV9tYXAoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICAkc2NvcGUuY3JlYXRlX29mZmxpbmVfbWFwKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUub3BlbldlYnNpdGUgPSBmdW5jdGlvbih1cmwpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnbm8nLFxuICAgICAgICAgICAgICAgIGNsZWFyY2FjaGU6ICd5ZXMnLFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6ICdubydcbiAgICAgICAgICAgIH07XG5cbiAgICAgJGNvcmRvdmFJbkFwcEJyb3dzZXIub3Blbih1cmwsICdfYmxhbmsnLCBvcHRpb25zKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBzdWNjZXNzXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIGVycm9yXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5zZXRfbmV0d29ya19ldmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmKGlvbmljLlBsYXRmb3JtLmlzV2ViVmlldygpKXtcbiAgICAgICAgJHNjb3BlLiRvbignJGNvcmRvdmFOZXR3b3JrOm9ubGluZScsIGZ1bmN0aW9uKGV2ZW50LCBuZXR3b3JrU3RhdGUpe1xuICAgICAgICAgICRzY29wZS5jaGVja191c2VyX2xvZ2dlZCgpO1xuICAgICAgICAgICRzY29wZS5zZW5kX29mZmxpbmVfcmVwb3J0cygpO1xuICAgICAgICAgIC8vJHNjb3BlLmFkZFJlcG9ydHNMYXllcigpO1xuICAgICAgICAgICRzY29wZS5jcmVhdGVfb25saW5lX21hcCgpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUuJG9uKCckY29yZG92YU5ldHdvcms6b2ZmbGluZScsIGZ1bmN0aW9uKGV2ZW50LCBuZXR3b3JrU3RhdGUpe1xuICAgICAgICAgICRzY29wZS5jcmVhdGVfb2ZmbGluZV9tYXAoKTtcbiAgICAgICAgICAkc2NvcGUuc2V0X29mZmxpbmVfdXNlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgJHNjb3BlLmNoZWNrX3VzZXJfbG9nZ2VkKCk7XG4gICAgICAgICAgJHNjb3BlLnNlbmRfb2ZmbGluZV9yZXBvcnRzKCk7XG4gICAgICAgICAgLy8kc2NvcGUuYWRkUmVwb3J0c0xheWVyKCk7XG4gICAgICAgICAgJHNjb3BlLmNyZWF0ZV9vbmxpbmVfbWFwKCk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAkc2NvcGUuY3JlYXRlX29mZmxpbmVfbWFwKCk7XG4gICAgICAgICAgJHNjb3BlLnNldF9vZmZsaW5lX3VzZXIoKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuc2VuZF9vZmZsaW5lX3JlcG9ydHNfZnJvbV9tZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgICAkc2NvcGUuc2VuZF9vZmZsaW5lX3JlcG9ydHMoKTtcbiAgICAgICAgJHNjb3BlLmxpc3Rfb2ZmbGluZV9yZXBvcnRzKCk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoJ0Vycm9yIGRlIGNvbmV4acOzbicsJ1BhcmEgcG9kZXIgZW52aWFyIGxvcyByZXBvcnRlcyBwZW5kaWVudGVzIGRlYmUgZXN0YXIgY29uZWN0YWRvIGEgaW50ZXJuZXQuJyk7XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgJHNjb3BlLnNlbmRfb2ZmbGluZV9yZXBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgICB2YXIgcmVwb3J0cyA9IERCU2VydmljZS5nZXRBbGxSZXBvcnRzKCk7XG4gICAgICAgIHJlcG9ydHMudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgLy8gaGFuZGxlIHJlc3VsdFxuICAgICAgICAgIGlmKHJlc3VsdCE9bnVsbCAmJiByZXN1bHQudG90YWxfcm93cz4wKXtcbiAgICAgICAgICAgIHJlc3VsdC5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydCA9IHJvdy5kb2M7XG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydF9zZW50ID0gUE1CU2VydmljZS5yZXBvcnQocmVwb3J0KTtcbiAgICAgICAgICAgICAgICBpZihyZXBvcnQuZmlsZT09bnVsbCl7XG4gICAgICAgICAgICAgICAgICByZXBvcnRfc2VudC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycyxjb25maWcpe1xuICAgICAgICAgICAgICAgICAgICBpZihFcnJvclNlcnZpY2UuaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheChkYXRhKSl7XG4gICAgICAgICAgICAgICAgICAgICAgREJTZXJ2aWNlLmRlbGV0ZVJlcG9ydChyZXBvcnQuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgLy9FUlJPUiBTRU5ESU5HIFRIRSBSRVBPUlQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpe1xuICAgICAgICAgICAgICAgICAgICAvL0VSUk9SIFNFTkRJTkcgVEhFIFJFUE9SVDtcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICByZXBvcnRfc2VudC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3AucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZihFcnJvclNlcnZpY2UuaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheChkYXRhKSl7XG4gICAgICAgICAgICAgICAgICAgICAgREJTZXJ2aWNlLmRlbGV0ZVJlcG9ydChyZXBvcnQuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgLy9FUlJPUiBTRU5ESU5HIFRIRSBSRVBPUlQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy9FUlJPUiBTRU5ESU5HIFRIRSBSRVBPUlQ7XG4gICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihwcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUuc2VuZF9vZmZsaW5lX3JlcG9ydCA9IGZ1bmN0aW9uKHJlcG9ydCkge1xuICAgICAgdmFyIHJlcG9ydF9zZW50ID0gUE1CU2VydmljZS5yZXBvcnQocmVwb3J0KTtcbiAgICAgIGlmKHJlcG9ydC5maWxlPT1udWxsKXtcbiAgICAgICAgcmVwb3J0X3NlbnQuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsY29uZmlnKXtcbiAgICAgICAgICBpZihFcnJvclNlcnZpY2UuaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheChkYXRhKSl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZyl7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgfWVsc2V7XG4gICAgICAgIHJlcG9ydF9zZW50LnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShyZXNwLnJlc3BvbnNlKTtcbiAgICAgICAgICBpZihFcnJvclNlcnZpY2UuaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheChkYXRhKSl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICB9O1xuXG4gICAgJHNjb3BlLmNyZWF0ZV9vZmZsaW5lX21hcCA9IGZ1bmN0aW9uKCl7XG4gICAgICBpZigkc2NvcGUubWFwIT1udWxsKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgJHNjb3BlLm1hcCA9IHtcbiAgICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgdGlsZUxheWVyOiAnLi9vZmZsaW5lX3RpbGVzL3t6fS97eH0ve3l9LnBuZycsXG4gICAgICAgICAgICAvL21pblpvb206IDEyLFxuICAgICAgICAgICAgbWluWm9vbTogMTYsXG4gICAgICAgICAgICBtYXhab29tOiAxNixcbiAgICAgICAgICAgIHpvb21Db250cm9sUG9zaXRpb246ICd0b3BsZWZ0JyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hcmtlcnM6IHt9LFxuICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICAgIGVuYWJsZTogWydjb250ZXh0J10sXG4gICAgICAgICAgICAgIGxvZ2ljOiAnZW1pdCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgICRzY29wZS5jcmVhdGVfb25saW5lX21hcCA9IGZ1bmN0aW9uKCl7XG4gICAgICBpZigkc2NvcGUubWFwIT1udWxsICYmICRzY29wZS5tYXAuZGVmYXVsdHMudGlsZUxheWVyPT0nLi9vZmZsaW5lX3RpbGVzL3t6fS97eH0ve3l9LnBuZycpe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAkc2NvcGUubWFwID0ge1xuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgIC8vdGlsZUxheWVyOiAnaHR0cDovL3tzfS50aWxlLm9zbS5vcmcve3p9L3t4fS97eX0ucG5nJyxcbiAgICAgICAgICB0aWxlTGF5ZXI6ICdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsXG4gICAgICAgICAgbWluWm9vbTogMTIsXG4gICAgICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICAgICAgem9vbUNvbnRyb2xQb3NpdGlvbjogJ3RvcGxlZnQnLFxuICAgICAgICB9LFxuICAgICAgICBtYXJrZXJzOiB7fSxcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICBlbmFibGU6IFsnY29udGV4dCddLFxuICAgICAgICAgICAgbG9naWM6ICdlbWl0J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2VudGVyOiB7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAkc2NvcGUubG9hZFBpbnNMYXllcigpO1xuICAgICAgaWYoTG9jYXRpb25zU2VydmljZS5uZXdfcmVwb3J0X2xhdCE9XCJcIil7XG4gICAgICAgICRzY29wZS5tYXAuY2VudGVyID0ge1xuICAgICAgICAgICAgbGF0OiBMb2NhdGlvbnNTZXJ2aWNlLm5ld19yZXBvcnRfbGF0LFxuICAgICAgICAgICAgbG5nOiBMb2NhdGlvbnNTZXJ2aWNlLm5ld19yZXBvcnRfbG5nLFxuICAgICAgICAgICAgem9vbTogMTZcbiAgICAgICAgICB9O1xuICAgICAgfWVsc2V7XG4gICAgICAgICRzY29wZS5tYXAuY2VudGVyID0ge1xuICAgICAgICAgICAgbGF0OiAtMzQuOTAxMTEzLFxuICAgICAgICAgICAgbG5nOiAtNTYuMTY0NTMxLFxuICAgICAgICAgICAgem9vbTogMTZcbiAgICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICBtYXAub24oJ21vdmVlbmQnLCAkc2NvcGUuaGlkZU9mZlNjcmVlblBpbnMpO1xuICAgICAgfSk7XG4gICAgfTtcblxuXG4gICAgdmFyIExvY2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTG9jYXRpb24pKSByZXR1cm4gbmV3IExvY2F0aW9uKCk7XG4gICAgICB0aGlzLmxhdCA9IFwiXCI7XG4gICAgICB0aGlzLmxuZyA9IFwiXCI7XG4gICAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICAgIH07XG5cbiAgICAkc2NvcGUubmV3X3JlcG9ydF9mcm9tX2xhdGxvbiA9IGZ1bmN0aW9uKGxhdCxsbmcpIHtcbiAgICAgIExvY2F0aW9uc1NlcnZpY2UubmV3X3JlcG9ydF9sYXQgPSBsYXQ7XG4gICAgICBMb2NhdGlvbnNTZXJ2aWNlLm5ld19yZXBvcnRfbG5nID0gbG5nO1xuICAgICAgTG9jYXRpb25zU2VydmljZS5pbml0aWFsX2xhdCA9ICBsYXQ7XG4gICAgICBMb2NhdGlvbnNTZXJ2aWNlLmluaXRpYWxfbG5nID0gIGxuZztcbiAgICAgICRzY29wZS5uZXdfcmVwb3J0KDEpO1xuICAgIH1cblxuICAgICRzY29wZS5uZXdfcmVwb3J0ID0gZnVuY3Rpb24oYWxyZWFkeUxvY2F0ZWQpIHtcbiAgICAgICRzY29wZS5zZXRfYWN0aXZlX29wdGlvbignYnV0dG9uLXJlcG9ydCcpO1xuICAgICAgJHNjb3BlLmhpZGVfc3BlY2lhbF9kaXZzKCk7XG4gICAgICBpZihhbHJlYWR5TG9jYXRlZD09MSl7XG4gICAgICAgIExvY2F0aW9uc1NlcnZpY2UuaW5pdGlhbF9sYXQgPSBMb2NhdGlvbnNTZXJ2aWNlLm5ld19yZXBvcnRfbGF0O1xuICAgICAgICBMb2NhdGlvbnNTZXJ2aWNlLmluaXRpYWxfbG5nID0gTG9jYXRpb25zU2VydmljZS5uZXdfcmVwb3J0X2xhdDtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIGlmKENvbm5lY3Rpdml0eVNlcnZpY2UuaXNPbmxpbmUoKSl7XG4gICAgICAgICAgJHNjb3BlLnJlcG9ydCA9IFJlcG9ydFNlcnZpY2UuX25ldygpO1xuICAgICAgICAgICRzY29wZS5yZXBvcnQubGF0ID0gTG9jYXRpb25zU2VydmljZS5uZXdfcmVwb3J0X2xhdDtcbiAgICAgICAgICAkc2NvcGUucmVwb3J0LmxvbiA9IExvY2F0aW9uc1NlcnZpY2UubmV3X3JlcG9ydF9sbmc7XG4gICAgICAgICAgQ2F0ZWdvcmllc1NlcnZpY2UuYWxsKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmKEVycm9yU2VydmljZS5odHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfcG9wdXAocmVzcG9uc2UpKXtcbiAgICAgICAgICAgICAgREJTZXJ2aWNlLnNhdmVDYXRlZ29yaWVzKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAkc2NvcGUuc2hvd19yZXBvcnRfZm9ybShyZXNwb25zZS5kYXRhLmNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgLy9PRkZMSU5FIFJFUE9SVC4gRmlyc3QgbmVlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBhbnkgY2FjaGVkIGNhdGVnb3JpZXMuIElmIG5vdCwgaXQncyB0aGUgZmlyc3QgdGltZVxuICAgICAgICAgIC8vcnVuaW5nIHRoZSBhcHAgc28gbmVlZCB0byBzaG93IG1lc3NhZ2Ugc2F5aW5nIHRoYXQgZmlyc3QgdGltZSByZXBvcnQgaGFzIHRvIGJlIG9ubGluZS5cbiAgICAgICAgICB2YXIgY2F0ZWdvcmllc0RvYyA9IENhdGVnb3JpZXNTZXJ2aWNlLmdldENhY2hlZENhdGVnb3JpZXMoKTtcbiAgICAgICAgICBjYXRlZ29yaWVzRG9jLnRoZW4oZnVuY3Rpb24oZG9jKXtcbiAgICAgICAgICAgIGlmKGRvYyAmJiBkb2MuY2F0ZWdvcmllcyAmJiBPYmplY3Qua2V5cyhkb2MuY2F0ZWdvcmllcykubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0ID0gUmVwb3J0U2VydmljZS5fbmV3KCk7XG4gICAgICAgICAgICAgICRzY29wZS5yZXBvcnQubGF0ID0gTG9jYXRpb25zU2VydmljZS5uZXdfcmVwb3J0X2xhdDtcbiAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydC5sb24gPSBMb2NhdGlvbnNTZXJ2aWNlLm5ld19yZXBvcnRfbG5nO1xuICAgICAgICAgICAgICAkc2NvcGUuc2hvd19yZXBvcnRfZm9ybShkb2MuY2F0ZWdvcmllcyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgLy9GaXJzdCB0aW1lIHJlcG9ydFxuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXJcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydCgnUHJpbWVyIHJlcG9ydGUnLCdMYSBwcmltZXJhIHZleiBxdWUgcmVhbGl6YSB1biByZXBvcnRlIGRlYmUgZW5jb250cmFyc2UgY29uZWN0YWRvIGEgaW50ZXJuZXQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAvL0ZpcnN0IHRpbWUgcmVwb3J0XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIFBvcFVwU2VydmljZS5zaG93X2FsZXJ0KCdQcmltZXIgcmVwb3J0ZScsJ0xhIHByaW1lcmEgdmV6IHF1ZSByZWFsaXphIHVuIHJlcG9ydGUgZGViZSBlbmNvbnRyYXJzZSBjb25lY3RhZG8gYSBpbnRlcm5ldC4nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgJHNjb3BlLmFkZE1hcENvbnRyb2xzKCk7XG4gICAgICAgIC8vUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoJ051ZXZvIHJlcG9ydGUnLCdQYXJhIHJlYWxpemFyIHVuIG51ZXZvIHJlcG9ydGUsIG1hbnTDqW4gcHJlc2lvbmFkbyBzb2JyZSBsYSB1YmljYWNpw7NuIGRlc2VhZGEuJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS5lZGl0T2ZmbGluZVJlcG9ydCA9IGZ1bmN0aW9uKHJlcG9ydElkKSB7XG4gICAgICAgICRzY29wZS5zZXRfYWN0aXZlX29wdGlvbignYnV0dG9uLXJlcG9ydCcpO1xuICAgICAgICAkc2NvcGUuaGlkZV9zcGVjaWFsX2RpdnMoKTtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIC8vT0ZGTElORSBSRVBPUlQuIEZpcnN0IG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgYW55IGNhY2hlZCBjYXRlZ29yaWVzLiBJZiBub3QsIGl0J3MgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgIC8vcnVuaW5nIHRoZSBhcHAgc28gbmVlZCB0byBzaG93IG1lc3NhZ2Ugc2F5aW5nIHRoYXQgZmlyc3QgdGltZSByZXBvcnQgaGFzIHRvIGJlIG9ubGluZS5cbiAgICAgICAgICAgIHZhciBjYXRlZ29yaWVzRG9jID0gQ2F0ZWdvcmllc1NlcnZpY2UuZ2V0Q2FjaGVkQ2F0ZWdvcmllcygpO1xuICAgICAgICAgICAgY2F0ZWdvcmllc0RvYy50aGVuKGZ1bmN0aW9uKGRvYyl7XG4gICAgICAgICAgICAgIGlmKGRvYyAmJiBkb2MuY2F0ZWdvcmllcyAmJiBPYmplY3Qua2V5cyhkb2MuY2F0ZWdvcmllcykubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnQgPSAgJHNjb3BlLm9mZmxpbmVSZXBvcnRzW3JlcG9ydElkXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd19vZmZsaW5lX3JlcG9ydF9mb3JtKGRvYy5jYXRlZ29yaWVzKTtcbiAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgLy9GaXJzdCB0aW1lIHJlcG9ydFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoJ1ByaW1lciByZXBvcnRlJywnTGEgcHJpbWVyYSB2ZXogcXVlIHJlYWxpemEgdW4gcmVwb3J0ZSBkZWJlIGVuY29udHJhcnNlIGNvbmVjdGFkbyBhIGludGVybmV0LicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgIC8vRmlyc3QgdGltZSByZXBvcnRcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoJ1ByaW1lciByZXBvcnRlJywnTGEgcHJpbWVyYSB2ZXogcXVlIHJlYWxpemEgdW4gcmVwb3J0ZSBkZWJlIGVuY29udHJhcnNlIGNvbmVjdGFkbyBhIGludGVybmV0LicpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgIH07XG5cbiAgJHNjb3BlLmRlbGV0ZU9mZmxpbmVSZXBvcnQgPSBmdW5jdGlvbihyZXBvcnRJZCkge1xuICAgIC8vJHNjb3BlLnNldF9hY3RpdmVfb3B0aW9uKCdidXR0b24tcmVwb3J0Jyk7XG4gICAgJHNjb3BlLmhpZGVfc3BlY2lhbF9kaXZzKCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgJHNjb3BlLnJlcG9ydCA9ICAkc2NvcGUub2ZmbGluZVJlcG9ydHNbcmVwb3J0SWRdO1xuICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9kZWxldGUtb2ZmbGluZS1yZXBvcnQuaHRtbCcsIHtcbiAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAvL2hhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICBNb2RhbFNlcnZpY2UuYWN0aXZlTW9kYWwgPSBtb2RhbDtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIE1vZGFsU2VydmljZS5zaG93KCk7XG4gICAgICB9KTtcbiAgfTtcblxuICAkc2NvcGUudXBkYXRlT2ZmbGluZVJlcG9ydCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGZpZWxkcyA9IG5ldyBBcnJheSgpO1xuICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJFbWFpbFwiLFwiZW1haWxcIiwkc2NvcGUucmVwb3J0LmVtYWlsKSk7XG4gICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkNvbnRyYXNlw7FhXCIsXCJub3ROdWxsXCIsJHNjb3BlLnJlcG9ydC5wYXNzd29yZF9zaWduX2luKSk7XG4gICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIlNlbGVjY2lvbmUgdW5hIHN1YmNhdGVnb3LDrWFcIixcIm5vdE51bGxcIiwkc2NvcGUucmVwb3J0LmNhdGVnb3J5KSk7XG4gICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIlTDrXR1bG9cIixcIm5vdE51bGxcIiwkc2NvcGUucmVwb3J0LnRpdGxlKSk7XG4gICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkRldGFsbGVzXCIsXCJub3ROdWxsXCIsJHNjb3BlLnJlcG9ydC5kZXRhaWwpKTtcbiAgICBpZihFcnJvclNlcnZpY2UuY2hlY2tfZmllbGRzKGZpZWxkcyxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICBEQlNlcnZpY2UudXBkYXRlUmVwb3J0KCRzY29wZS5yZXBvcnQpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKHRydWUpO1xuICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydChcIkVudsOtbyBwZW5kaWVudGVcIixcIlNlIGhhbiBndWFyZGFkbyBsb3MgY2FtYmlvcyBhbCByZXBvcnRlLiBTZSBlbnZpYXLDoSBjdWFuZG8gdXRpbGljZSBlc3RhIGFwbGljYWNpw7NuIGNvbmVjdGFkbyBhIGludGVybmV0XCIpO1xuICAgICAgICAkc2NvcGUubGlzdF9yZXBvcnRzKCk7XG4gICAgICAgICRzY29wZS5vZmZsaW5lUmVwb3J0c01hcmtlcnNbJHNjb3BlLnJlcG9ydC5faWRdLm9wZW5Qb3B1cCgpO1xuICAgICAgfSk7XG4gICAgfWVsc2V7XG4gICAgICAkc2NvcGUuYmFja190b19tYXAoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gICRzY29wZS5jbGVhbk9mZmxpbmVNYXJrZXJzID0gZnVuY3Rpb24obWFwKXtcbiAgICAgIG1hcC5lYWNoTGF5ZXIoZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgIGlmKGxheWVyLl91cmwhPVwidW5kZWZpbmVkXCIgJiYgbGF5ZXIuX3VybCE9bnVsbCl7XG4gICAgICAgICAgLy9JVCdzIFRIRSBNQVAgSVRTRUxGXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGlmKGxheWVyLm9wdGlvbnMuYWx0ID09IFwiUmVwb3J0ZSBwZW5kaWVudGUgZGUgZW52w61vXCIpe1xuICAgICAgICAgICAgbWFwLnJlbW92ZUxheWVyKGxheWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgfVxuXG4gICRzY29wZS5kZWxldGVPZmZsaW5lUmVwb3J0T2sgPSBmdW5jdGlvbigpe1xuICAgIHZhciBpZCA9ICRzY29wZS5yZXBvcnQuX2lkO1xuICAgIERCU2VydmljZS5kZWxldGVHaXZlblJlcG9ydCgkc2NvcGUucmVwb3J0KS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbWFya2VyID0gJHNjb3BlLm9mZmxpbmVSZXBvcnRzTWFya2Vyc1tpZF07XG4gICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICBtYXAucmVtb3ZlTGF5ZXIobWFya2VyKTtcbiAgICAgIH0pO1xuICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUub2ZmbGluZVJlcG9ydHNNYXJrZXJzW3JlcG9ydC5pZF0pO1xuICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKHRydWUpO1xuICAgICAgJHNjb3BlLmxpc3RfcmVwb3J0cygpO1xuICAgIH0pO1xuICB9XG5cbiAgJHNjb3BlLnNob3dfcmVwb3J0X2Zvcm0gPSBmdW5jdGlvbihjYXRlZ29yaWVzKXtcbiAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RfYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgaWYoVXNlclNlcnZpY2UuaXNMb2dnZWQoKSl7XG4gICAgICAkc2NvcGUucmVwb3J0Lm5hbWUgPSBVc2VyU2VydmljZS5uYW1lO1xuICAgICAgJHNjb3BlLnJlcG9ydC5lbWFpbCA9IFVzZXJTZXJ2aWNlLmVtYWlsO1xuICAgICAgJHNjb3BlLnJlcG9ydC5wYXNzd29yZF9zaWduX2luID0gVXNlclNlcnZpY2UucGFzc3dvcmQ7XG4gICAgICAkc2NvcGUucmVwb3J0LnBob25lID0gVXNlclNlcnZpY2UucGhvbmU7XG4gICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9wbWItd2l6YXJkLmh0bWwnLCB7XG4gICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgICAgLy9mb2N1c0ZpcnN0SW5wdXQ6IHRydWUsXG4gICAgICAgIGhhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZVxuICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbCA9IG1vZGFsO1xuICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgIH1lbHNle1xuICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCd0ZW1wbGF0ZXMvcG1iLXdpemFyZC13aXRoLWxvZ2luLmh0bWwnLCB7XG4gICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgIGhhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnLFxuICAgICAgICAvL2ZvY3VzRmlyc3RJbnB1dDogdHJ1ZVxuICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbCA9IG1vZGFsO1xuICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuICB9XG5cbiAgJHNjb3BlLnNob3dfb2ZmbGluZV9yZXBvcnRfZm9ybSA9IGZ1bmN0aW9uKGNhdGVnb3JpZXMpe1xuICAgICRzY29wZS5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXJcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIHZhciB0ZW1wbGF0ZSA9IFwiXCI7XG4gICAgaWYoVXNlclNlcnZpY2UuaXNMb2dnZWQoKSl7XG4gICAgICAkc2NvcGUucmVwb3J0Lm5hbWUgPSBVc2VyU2VydmljZS5uYW1lO1xuICAgICAgJHNjb3BlLnJlcG9ydC5lbWFpbCA9IFVzZXJTZXJ2aWNlLmVtYWlsO1xuICAgICAgJHNjb3BlLnJlcG9ydC5wYXNzd29yZF9zaWduX2luID0gVXNlclNlcnZpY2UucGFzc3dvcmQ7XG4gICAgICAkc2NvcGUucmVwb3J0LnBob25lID0gVXNlclNlcnZpY2UucGhvbmU7XG4gICAgICB0ZW1wbGF0ZSA9IFwidGVtcGxhdGVzL3BtYi1vZmZsaW5lLXdpemFyZC5odG1sXCI7XG4gICAgfWVsc2V7XG4gICAgICAvL3RlbXBsYXRlID0gXCJ0ZW1wbGF0ZXMvcG1iLW9mZmxpbmUtd2l6YXJkLXdpdGgtbG9naW4uaHRtbFwiO1xuICAgICAgdGVtcGxhdGUgPSBcInRlbXBsYXRlcy9wbWItb2ZmbGluZS13aXphcmQuaHRtbFwiO1xuICAgICAgLy9TZSBsbGFtYSBzaWVtcHJlIGFsIGZvcm0gcXVlIG5vIHBpZGUgdXN1YXJpbyBwb3JxdWUgeWEgc2UgZ3VhcmTDsyBlbCB1c3VhcmlvIGxhIHByaW1lcmEgdmV6XG4gICAgfVxuICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9wbWItb2ZmbGluZS13aXphcmQuaHRtbCcsIHtcbiAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAvL2hhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICBNb2RhbFNlcnZpY2UuYWN0aXZlTW9kYWwgPSBtb2RhbDtcbiAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsLnNob3coKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHZhciBjYXRlZ29yeWdyb3VwID0gJHNjb3BlLnJlcG9ydC5jYXRlZ29yeWdyb3VwO1xuICAgICAgICAgICAgICB2YXIgY2F0ZWdvcmllc19zZWxlY3QgPSBhbmd1bGFyLmVsZW1lbnQoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcjY2F0ZWdvcmllc1NlbGVjdCcgKSApO1xuICAgICAgICAgICAgICBjYXRlZ29yaWVzX3NlbGVjdC52YWwoY2F0ZWdvcnlncm91cCk7XG4gICAgICAgICAgICAgICRzY29wZS51cGRhdGVfc3ViY2F0ZWdvcmllcygpO1xuICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSAkc2NvcGUucmVwb3J0LmNhdGVnb3J5O1xuICAgICAgICAgICAgICB2YXIgc3ViX3NlbGVjdF9pZCA9IFwiI3N1YmNhdGVnb3JpZXNTZWxlY3RfXCIrY2F0ZWdvcnlncm91cDtcbiAgICAgICAgICAgICAgdmFyIHN1Yl9jYXRlZ29yaWVzX3NlbGVjdCA9IGFuZ3VsYXIuZWxlbWVudCggZG9jdW1lbnQucXVlcnlTZWxlY3Rvciggc3ViX3NlbGVjdF9pZCApICk7XG4gICAgICAgICAgICAgIHN1Yl9jYXRlZ29yaWVzX3NlbGVjdC52YWwoY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAvL3ZhciBjb21waWxlZCA9ICRjb21waWxlKGVsZW1lbnQuY29udGVudHMoKSkoJHNjb3BlKTtcbiAgICAgICAgICAgIH0pOztcbiAgICB9KTtcbiAgfVxuXG4gICRzY29wZS51cGRhdGVfc3ViY2F0ZWdvcmllcyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGFsbF9zdWJjYXRzX3NlbGVjdHNfYWN0aXZlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInN1YmNhdGVnb3J5LWFjdGl2ZVwiKTtcbiAgICBpZiAoYWxsX3N1YmNhdHNfc2VsZWN0c19hY3RpdmUgIT0gJ3VuZGVmaW5lZCcgJiYgYWxsX3N1YmNhdHNfc2VsZWN0c19hY3RpdmUubGVuZ3RoPjApe1xuICAgICAgYWxsX3N1YmNhdHNfc2VsZWN0c19hY3RpdmVbMF0uY2xhc3NOYW1lID0gXCJzdWJjYXRlZ29yeS1oaWRkZW5cIjtcbiAgICB9XG4gICAgdmFyIGlkQ2F0ID0gJHNjb3BlLnJlcG9ydC5jYXRlZ29yeWdyb3VwO1xuICAgIHZhciBhY3RpdmVfc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1YmNhdGVnb3JpZXNTZWxlY3RfJytpZENhdCk7XG4gICAgYWN0aXZlX3NlbGVjdC5jbGFzc05hbWUgPSBcInN1YmNhdGVnb3J5LWFjdGl2ZVwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3ViY2F0ZWdvcmllc1NlbGVjdENvbnRhaW5lclwiKS5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIjtcbiAgfTtcblxuICAkc2NvcGUuYWJ1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb25maXJtQWJ1c2UgPSAkaW9uaWNQb3B1cC5zaG93KHtcbiAgICAgIHRlbXBsYXRlOiAnTm9tYnJlOiA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImFidXNlX25hbWVcIj48YnIvPkVtYWlsOiA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImFidXNlX2VtYWlsXCI+PGJyLz5Bc3VudG86IDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiYWJ1c2Vfc3ViamVjdFwiPjxici8+TWVuc2FqZTx0ZXh0YXJlYSByb3dzPVwiNlwiIGlkPVwiYWJ1c2VfbWVzc2FnZVwiPjwvdGV4dGFyZWE+PGRpdiBpZD1cImVycm9yX2NvbnRhaW5lcl9pbnNpZGVcIj48L2Rpdj4nLFxuICAgICAgdGl0bGU6IFwiRGVudW5jaWFyIGFidXNvXCIsXG4gICAgICBzdWJUaXRsZTogXCJFc3TDoXMgcmVwb3J0YW5kbyBwb3IgYWJ1c2l2YSBhbCBzaWd1aWVudGUgcmVwb3J0ZSwgcXVlIGNvbnRpZW5lIGluZm9ybWFjacOzbiBwZXJzb25hbCwgbyBzaW1pbGFyOlwiLFxuICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAgeyB0ZXh0OiAnQ2FuY2VsYXInIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0OiAnPGI+RW52aWFyPC9iPicsXG4gICAgICAgICAgdHlwZTogJ2J1dHRvbi1wb3NpdGl2ZScsXG4gICAgICAgICAgb25UYXA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgICRzY29wZS5hYnVzZV9lbWFpbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWJ1c2VfZW1haWxcIikudmFsdWU7XG4gICAgICAgICAgICAkc2NvcGUuYWJ1c2VfbmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWJ1c2VfbmFtZVwiKS52YWx1ZTtcbiAgICAgICAgICAgICRzY29wZS5hYnVzZV9zdWJqZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhYnVzZV9zdWJqZWN0XCIpLnZhbHVlO1xuICAgICAgICAgICAgJHNjb3BlLmFidXNlX21lc3NhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFidXNlX21lc3NhZ2VcIikudmFsdWU7XG4gICAgICAgICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiTm9tYnJlXCIsXCJub3ROdWxsXCIsJHNjb3BlLmFidXNlX25hbWUpKTtcbiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJFbWFpbFwiLFwiZW1haWxcIiwkc2NvcGUuYWJ1c2VfZW1haWwpKTtcbiAgICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJBc3VudG9cIixcIm5vdE51bGxcIiwkc2NvcGUuYWJ1c2Vfc3ViamVjdCkpO1xuICAgICAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIk1lbnNhamVcIixcIm5vdE51bGxcIiwkc2NvcGUuYWJ1c2VfbWVzc2FnZSkpO1xuICAgICAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmNoZWNrX2ZpZWxkcyhmaWVsZHMsXCJlcnJvcl9jb250YWluZXJfaW5zaWRlXCIpKXtcbiAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hYnVzZV9lbWFpbDtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gICAgY29uZmlybUFidXNlLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgIGlmKHJlcykge1xuICAgICAgIHZhciBodHRwX3JlcXVlc3QgPSBQTUJTZXJ2aWNlLmFidXNlKCRzY29wZS5hYnVzZV9lbWFpbCwkc2NvcGUucmVwb3J0X2RldGFpbF9pZCwkc2NvcGUuYWJ1c2VfbmFtZSxhYnVzZV9zdWJqZWN0LCRzY29wZS5hYnVzZV9tZXNzYWdlKTtcbiAgICAgICBodHRwX3JlcXVlc3QudGhlbihmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgICAgLy92YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcC5yZXNwb25zZSk7XG4gICAgICAgICAgLy9pZihFcnJvclNlcnZpY2UuaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWwoZGF0YSxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydChcIkRlbnVuY2lhIGVudmlhZGFcIixcIkdyYWNpYXMgcG9yIHR1cyBjb21lbnRhcmlvcy4gwqFOb3MgcG9uZHJlbW9zIGVuIGNvbnRhY3RvIGNvbiB1c3RlZCB0YW4gcHJvbnRvIGNvbW8gbm9zIHNlYSBwb3NpYmxlIVwiKTtcbiAgICAgICAgICAgICRzY29wZS5hYnVzZV9uYW1lID0gbnVsbDtcbiAgICAgICAgICAgICRzY29wZS5hYnVzZV9lbWFpbCA9IG51bGw7XG4gICAgICAgICAgICAkc2NvcGUuYWJ1c2Vfc3ViamVjdCA9IG51bGw7XG4gICAgICAgICAgICAkc2NvcGUuYWJ1c2VfbWVzc2FnZSA9IG51bGw7XG4gICAgICAgICAgLy99XG4gICAgICAgfSk7XG4gICAgfVxuICAgfSk7XG4gIH07XG5cbiAgJHNjb3BlLnNlbmRfY29tbWVudCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGZpZWxkcyA9IG5ldyBBcnJheSgpO1xuICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDb21lbnRhcmlvXCIsXCJub3ROdWxsXCIsJHNjb3BlLmNvbW1lbnQudXBkYXRlKSk7XG4gICAgaWYoRXJyb3JTZXJ2aWNlLmNoZWNrX2ZpZWxkcyhmaWVsZHMsXCJlcnJvcl9jb250YWluZXJfaW5zaWRlXCIpKXtcbiAgICAgIGNvbW1lbnRfc2VudCA9IFBNQlNlcnZpY2UuY29tbWVudCgkc2NvcGUuY29tbWVudCk7XG4gICAgICBpZigkc2NvcGUuY29tbWVudC5waG90bz09bnVsbCl7XG4gICAgICAgICAgY29tbWVudF9zZW50LnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLGNvbmZpZyl7XG4gICAgICAgICAgICAkc2NvcGUuYmFja190b19tYXAodHJ1ZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpe1xuICAgICAgICAgICAgRXJyb3JTZXJ2aWNlLnNob3dfZXJyb3JfbWVzc2FnZShcImVycm9yX2NvbnRhaW5lcl9pbnNpZGVcIixzdGF0dXMpO1xuICAgICAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKGZhbHNlKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBjb21tZW50X3NlbnQudGhlbihmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgICAgICAkc2NvcGUuYmFja190b19tYXAodHJ1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICB9LCBmdW5jdGlvbihwcm9ncmVzcykge1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICRzY29wZS51cGxvYWRQcm9ncmVzcyA9IChwcm9ncmVzcy5sb2FkZWQgLyBwcm9ncmVzcy50b3RhbCkgKiAxMDA7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VudF9sYWJlbFwiKS5pbm5lckhUTUwgPSBcIkVudmlhZG86IFwiICsgTWF0aC5yb3VuZCgkc2NvcGUudXBsb2FkUHJvZ3Jlc3MpICsgXCIlXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICRzY29wZS5zdWJzY3JpYmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZihVc2VyU2VydmljZS5pc0xvZ2dlZCgpKXtcbiAgICAgIHZhciBjb25maXJtU3Vic2NyaWJlID0gUG9wVXBTZXJ2aWNlLmNvbmZpcm1Qb3B1cChcIlN1YnNjcmliaXJzZVwiLFwiwr9Fc3TDoSBzZWd1cm8gcXVlIGRlc2VhIHJlY2liaXIgdW4gY29ycmVvIGEgbGEgZGlyZWNjacOzbiBcIitVc2VyU2VydmljZS5lbWFpbCtcIiBjdWFuZG8gc2UgZGVqZW4gY29tZW50YXJpb3Mgc29icmUgZXN0ZSBwcm9ibGVtYT9cIik7XG4gICAgICBjb25maXJtU3Vic2NyaWJlLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgaWYocmVzKSB7XG4gICAgICAgIHZhciBodHRwX3JlcXVlc3QgPSBQTUJTZXJ2aWNlLnN1YnNjcmliZShVc2VyU2VydmljZS5lbWFpbCwkc2NvcGUucmVwb3J0X2RldGFpbF9pZCk7XG4gICAgICAgIGh0dHBfcmVxdWVzdC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgLy92YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcC5yZXNwb25zZSk7XG4gICAgICAgICAgIC8vaWYoRXJyb3JTZXJ2aWNlLmh0dHBfZGF0YV9yZXNwb25zZV9pc19zdWNjZXNzZnVsKGRhdGEsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICAgICAvL31cbiAgICAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJDb25maXJtZSBzdSBjb3JyZW9cIixcIlNlIGhhIGVudmlhZG8gdW4gbGluayBhIGxhIGRpcmVjY2nDs24gXCIgKyBVc2VyU2VydmljZS5lbWFpbCArIFwiIHBhcmEgY29uZmlybWFyIHN1IGNvcnJlby4gTHVlZ28gZGUgZXN0byBjb21lbnphcsOhbiBhIGxsZWdhcmxlIGxhcyBhbGVydGFzIHNvYnJlIG51ZXZvcyBjb21lbnRhcmlvcy5cIilcbiAgICAgICAgfSk7XG4gICAgICAgfVxuICAgICB9KTtcbiAgICB9ZWxzZXtcbiAgICAgIHZhciBjb25maXJtU3Vic2NyaWJlID0gUG9wVXBTZXJ2aWNlLmFza0Zvck9uZVZhbHVlUG9wVXAoJHNjb3BlLFwiU3Vic2NyaWJpcnNlXCIsXCJQb3IgZmF2b3IsIGluZ3Jlc2UgdW4gY29ycmVvIGFsIHF1ZSBkZXNlYSByZWNpYmlyIG1lbnNhamVzIGN1YW5kbyBzZSBkZWplbiBjb21lbnRhcmlvcyBzb2JyZSBlc3RlIHByb2JsZW1hLlwiLCBcIkVtYWlsXCIsIFwiZW1haWxcIik7XG4gICAgICBjb25maXJtU3Vic2NyaWJlLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgaWYocmVzKSB7XG4gICAgICAgICAkc2NvcGUub25lX3ZhbHVlX3BvcHVwID0gcmVzO1xuICAgICAgICAgdmFyIGh0dHBfcmVxdWVzdCA9IFBNQlNlcnZpY2Uuc3Vic2NyaWJlKCRzY29wZS5vbmVfdmFsdWVfcG9wdXAsJHNjb3BlLnJlcG9ydF9kZXRhaWxfaWQpO1xuICAgICAgICAgaHR0cF9yZXF1ZXN0LnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgLy92YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcC5yZXNwb25zZSk7XG4gICAgICAgICAgICAvL2lmKEVycm9yU2VydmljZS5odHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bChkYXRhLFwiZXJyb3JfY29udGFpbmVyXCIpKXtcbiAgICAgICAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJDb25maXJtZSBzdSBjb3JyZW9cIixcIlNlIGhhIGVudmlhZG8gdW4gbGluayBhIGxhIGRpcmVjY2nDs24gXCIgKyAkc2NvcGUub25lX3ZhbHVlX3BvcHVwICsgXCIgcGFyYSBjb25maXJtYXIgc3UgY29ycmVvLiBMdWVnbyBkZSBlc3RvIGNvbWVuemFyw6FuIGEgbGxlZ2FybGUgbGFzIGFsZXJ0YXMgc29icmUgbnVldm9zIGNvbWVudGFyaW9zLlwiKVxuICAgICAgICAgICAgICAkc2NvcGUub25lX3ZhbHVlX3BvcHVwID0gbnVsbDtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgIH0pO1xuICAgIH1cblxuICB9O1xuXG4gICRzY29wZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYoVXNlclNlcnZpY2UuaXNMb2dnZWQoKSl7XG4gICAgICB2YXIgY29uZmlybUhpZGUgPSBQb3BVcFNlcnZpY2UuY29uZmlybVBvcHVwKFwiT2N1bHRhclwiLFwiwr9Fc3TDoSBzZWd1cm8gZGUgcXVlIGRlc2VhIG9jdWx0YXIgc3UgcmVwb3J0ZT8gRXN0ZSBubyBhcGFyZWNlcsOhIG3DoXMgbmkgZW4gbGEgcMOhZ2luYSBuaSBlbiBsYSBhcGxpY2FjacOzbiBzaSBlcyBvY3VsdGFkby5cIik7XG4gICAgICBjb25maXJtSGlkZS50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgIGlmKHJlcykge1xuICAgICAgICB2YXIgaHR0cF9yZXF1ZXN0ID0gUE1CU2VydmljZS5oaWRlKCRzY29wZS5yZXBvcnRfZGV0YWlsX2lkKTtcbiAgICAgICAgaHR0cF9yZXF1ZXN0LnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydChcIk9jdWx0YXJcIixcIlNlIGhhIG9jdWx0YWRvIGVsIHJlcG9ydGUuIE5vIHNlcsOhIHZpc2libGUgZW4gZWwgZnV0dXJvLlwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgfVxuICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmNvbmZpcm1SZXBvcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgdmFyIGZpZWxkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIlNlbGVjY2lvbmUgdW5hIHN1YmNhdGVnb3LDrWFcIixcIm5vdE51bGxcIiwkc2NvcGUucmVwb3J0LmNhdGVnb3J5KSk7XG4gICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiVMOtdHVsb1wiLFwibm90TnVsbFwiLCRzY29wZS5yZXBvcnQudGl0bGUpKTtcbiAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJEZXRhbGxlc1wiLFwibm90TnVsbFwiLCRzY29wZS5yZXBvcnQuZGV0YWlsKSk7XG4gICAgICBpZihFcnJvclNlcnZpY2UuY2hlY2tfZmllbGRzKGZpZWxkcyxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgIHZhciByZXBvcnRfc2VudCA9IFBNQlNlcnZpY2UucmVwb3J0KCRzY29wZS5yZXBvcnQpO1xuICAgICAgICB2YXIgYmFja190b19tYXAgPSBmYWxzZTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICBpZigkc2NvcGUucmVwb3J0LmZpbGU9PW51bGwpe1xuICAgICAgICAgIHJlcG9ydF9zZW50LnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLGNvbmZpZyl7XG4gICAgICAgICAgICBpZihFcnJvclNlcnZpY2UuaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWwoZGF0YSxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgICAgICRzY29wZS5iYWNrX3RvX21hcCh0cnVlKTtcbiAgICAgICAgICAgICAgLy8kc2NvcGUuYWRkUmVwb3J0c0xheWVyKCk7XG4gICAgICAgICAgICAgICRzY29wZS5sb2FkUGluc0xheWVyKCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZyl7XG4gICAgICAgICAgICBFcnJvclNlcnZpY2Uuc2hvd19lcnJvcl9tZXNzYWdlKFwiZXJyb3JfY29udGFpbmVyXCIsc3RhdHVzKTtcbiAgICAgICAgICAgICRzY29wZS5iYWNrX3RvX21hcChmYWxzZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgdmFyIHJlcG9ydGVFbnZpYWRvID0gJHNjb3BlLnJlcG9ydDtcbiAgICAgICAgICByZXBvcnRfc2VudC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3ApO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3AucmVzcG9uc2UpO1xuICAgICAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmh0dHBfZGF0YV9yZXNwb25zZV9pc19zdWNjZXNzZnVsKGRhdGEsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICAgICAgICAkc2NvcGUuYmFja190b19tYXAodHJ1ZSk7XG4gICAgICAgICAgICAgIC8vJHNjb3BlLmFkZFJlcG9ydHNMYXllcigpO1xuICAgICAgICAgICAgICAkc2NvcGUubG9hZFBpbnNMYXllcigpO1xuICAgICAgICAgICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXQgPSByZXBvcnRlRW52aWFkby5sYXQ7XG4gICAgICAgICAgICAgICAgLy9Nb3ZlIGEgbGl0dGxlIHRoZSBtYXAgY2VudGVyIGJlY2F1c2UgdGhlIG1hcCB2aWV3IGlzIHNtYWxsZXIgKHJlcG9ydCBsaXN0IGlzIGRpc3BsYXllZClcbiAgICAgICAgICAgICAgICBsYXQgPSBsYXQgLSAwLjAwMDY7XG4gICAgICAgICAgICAgICAgbWFwLnNldFZpZXcobmV3IEwuTGF0TG5nKGxhdCwgcmVwb3J0ZUVudmlhZG8ubG9uKSwgMTgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKHRydWUpO1xuICAgICAgICAgICAgLy8kc2NvcGUuYWRkUmVwb3J0c0xheWVyKCk7XG4gICAgICAgICAgICAkc2NvcGUubG9hZFBpbnNMYXllcigpO1xuICAgICAgICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcbiAgICAgICAgICAgICAgdmFyIGxhdCA9IHJlcG9ydGVFbnZpYWRvLmxhdDtcbiAgICAgICAgICAgICAgLy9Nb3ZlIGEgbGl0dGxlIHRoZSBtYXAgY2VudGVyIGJlY2F1c2UgdGhlIG1hcCB2aWV3IGlzIHNtYWxsZXIgKHJlcG9ydCBsaXN0IGlzIGRpc3BsYXllZClcbiAgICAgICAgICAgICAgbGF0ID0gbGF0IC0gMC4wMDA2O1xuICAgICAgICAgICAgICBtYXAuc2V0VmlldyhuZXcgTC5MYXRMbmcobGF0LCByZXBvcnRlRW52aWFkby5sb24pLCAxOCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8qJHNjb3BlLnNhdmVfb2ZmbGluZV9yZXBvcnQoKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKHRydWUpO1xuICAgICAgICAgICAgICAvLyRzY29wZS5saXN0X3JlcG9ydHNfYW5kX2dvKHJlc3BvbnNlLmlkKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmxpc3RfcmVwb3J0cygpO1xuICAgICAgICAgICAgICB2YXIgYWxlcnQgPSBcIkPDs2RpZ286IFwiICsgZXJyb3IuY29kZTtcbiAgICAgICAgICAgICAgYWxlcnQgPSBhbGVydCArIFwiIE9yaWdlbjogXCIgKyBlcnJvci5zb3VyY2U7XG4gICAgICAgICAgICAgIGFsZXJ0ID0gYWxlcnQgKyBcIiBEZXN0aW5vOiBcIiArIGVycm9yLnRhcmdldDtcbiAgICAgICAgICAgICAgYWxlcnQgPSBhbGVydCArIFwiIGh0dHBfc3RhdHVzOiBcIiArIGVycm9yLmh0dHBfc3RhdHVzO1xuICAgICAgICAgICAgICAvL2FsZXJ0ID0gYWxlcnQgKyBcIiBCb2R5OiBcIiArIGVycm9yLmJvZHk7XG4gICAgICAgICAgICAvLyAgYWxlcnQgPSBhbGVydCArIFwiIEV4Y2VwdGlvbjogXCIgKyBlcnJvci5leGNlcHRpb247XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYWxlcnQpO1xuICAgICAgICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydChcIkVycm9yIGVuIGVsIGVudsOtb1wiLFwiSHVibyB1biBlcnJvciBlbiBlbCBlbnbDrW86IFwiICsgYWxlcnQgKyBcIi4gRWwgcmVwb3J0ZSBzZSBoYSBndWFyZGFkbyBlbiBzdSBkaXNwb3NpdGl2byB5IHNlIGVudmlhcsOhIGN1YW5kbyB1dGlsaWNlIGVzdGEgYXBsaWNhY2nDs24gY29uZWN0YWRvIGEgaW50ZXJuZXRcIik7XG4gICAgICAgICAgICB9KTsqL1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICAgICAgICAvKiR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkc2NvcGUudXBsb2FkUHJvZ3Jlc3MgPSAocHJvZ3Jlc3MubG9hZGVkIC8gcHJvZ3Jlc3MudG90YWwpICogMTAwO1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlbnRfbGFiZWxcIikuaW5uZXJIVE1MID0gXCJFbnZpYWRvOiBcIiArIE1hdGgucm91bmQoJHNjb3BlLnVwbG9hZFByb2dyZXNzKSArIFwiJVwiO1xuICAgICAgICAgICAgfSk7Ki9cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgICRzY29wZS5iYWNrX3RvX21hcChmYWxzZSk7XG4gICAgICB9XG4gICAgfWVsc2V7XG4gICAgICAkc2NvcGUuc2F2ZV9vZmZsaW5lX3JlcG9ydCgpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAkc2NvcGUuYmFja190b19tYXAodHJ1ZSk7XG4gICAgICAgIC8vJHNjb3BlLmxpc3RfcmVwb3J0c19hbmRfZ28ocmVzcG9uc2UuaWQpO1xuICAgICAgICAkc2NvcGUubGlzdF9yZXBvcnRzKCk7XG4gICAgICAgIFBvcFVwU2VydmljZS5zaG93X2FsZXJ0KFwiRW52w61vIHBlbmRpZW50ZVwiLFwiRWwgcmVwb3J0ZSBzZSBoYSBndWFyZGFkbyBlbiBzdSBkaXNwb3NpdGl2byB5IHNlIGVudmlhcsOhIGN1YW5kbyB1dGlsaWNlIGVzdGEgYXBsaWNhY2nDs24gY29uZWN0YWRvIGEgaW50ZXJuZXRcIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAkaW9uaWNTbGlkZUJveERlbGVnYXRlLm5leHQoKTtcbiAgfTtcblxuICAkc2NvcGUucHJldmlvdXMgPSBmdW5jdGlvbigpIHtcbiAgICAkaW9uaWNTbGlkZUJveERlbGVnYXRlLnByZXZpb3VzKCk7XG4gIH07XG5cbiAgJHNjb3BlLmNvbmZpcm1SZXBvcnRXaXRoTG9naW4gPSBmdW5jdGlvbigpIHtcbiAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiRW1haWxcIixcImVtYWlsXCIsJHNjb3BlLnJlcG9ydC5lbWFpbCkpO1xuICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkNvbnRyYXNlw7FhXCIsXCJub3ROdWxsXCIsJHNjb3BlLnJlcG9ydC5wYXNzd29yZF9zaWduX2luKSk7XG4gICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiU2VsZWNjaW9uZSB1bmEgc3ViY2F0ZWdvcsOtYVwiLFwibm90TnVsbFwiLCRzY29wZS5yZXBvcnQuY2F0ZWdvcnkpKTtcbiAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJUw610dWxvXCIsXCJub3ROdWxsXCIsJHNjb3BlLnJlcG9ydC50aXRsZSkpO1xuICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkRldGFsbGVzXCIsXCJub3ROdWxsXCIsJHNjb3BlLnJlcG9ydC5kZXRhaWwpKTtcbiAgICAgIGlmKEVycm9yU2VydmljZS5jaGVja19maWVsZHMoZmllbGRzLFwiZXJyb3JfY29udGFpbmVyXCIpKXtcbiAgICAgICAgQXV0aFNlcnZpY2Uuc2lnbl9pbigkc2NvcGUucmVwb3J0LnBhc3N3b3JkX3NpZ25faW4sICRzY29wZS5yZXBvcnQuZW1haWwpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgIGlmKEVycm9yU2VydmljZS5odHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWwocmVzcCxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgICBVc2VyU2VydmljZS5zYXZlX3VzZXJfZGF0YShyZXNwLmRhdGEubmFtZSwgJHNjb3BlLnJlcG9ydC5lbWFpbCwgJHNjb3BlLnJlcG9ydC5wYXNzd29yZF9zaWduX2luLCByZXNwLmRhdGEuaWRlbnRpdHlfZG9jdW1lbnQsIHJlc3AuZGF0YS5waG9uZSwgcmVzcC5kYXRhLnBpY3R1cmVfdXJsKTtcbiAgICAgICAgICAgIGlmKHJlc3AuZGF0YS5mcm9tX2JvZHkpe1xuICAgICAgICAgICAgICBVc2VyU2VydmljZS5mcm9tX2JvZHkgPSByZXNwLmRhdGEuZnJvbV9ib2R5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgREJTZXJ2aWNlLnNhdmVVc2VyKHJlc3AuZGF0YS5uYW1lLCRzY29wZS5yZXBvcnQuZW1haWwsJHNjb3BlLnJlcG9ydC5wYXNzd29yZF9zaWduX2luLHJlc3AuZGF0YS5pZGVudGl0eV9kb2N1bWVudCxyZXNwLmRhdGEucGhvbmUscmVzcC5kYXRhLnBpY3R1cmVfdXJsKTtcbiAgICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDEpO1xuICAgICAgICAgICAgJHNjb3BlLmNvbmZpcm1SZXBvcnQoKTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICRzY29wZS5iYWNrX3RvX21hcChmYWxzZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgRXJyb3JTZXJ2aWNlLnNob3dfZXJyb3JfbWVzc2FnZShcImVycm9yX2NvbnRhaW5lclwiLHJlc3Auc3RhdHVzVGV4dCk7XG4gICAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgJHNjb3BlLmJhY2tfdG9fbWFwKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgICRzY29wZS5zYXZlX29mZmxpbmVfcmVwb3J0KCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICRzY29wZS5iYWNrX3RvX21hcCh0cnVlKTtcbiAgICAgICAgLy8kc2NvcGUubGlzdF9yZXBvcnRzX2FuZF9nbyhyZXNwb25zZS5pZCk7XG4gICAgICAgICRzY29wZS5saXN0X3JlcG9ydHMoKTtcbiAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJFbnbDrW8gcGVuZGllbnRlXCIsXCJFbCByZXBvcnRlIHNlIGhhIGd1YXJkYWRvIGVuIHN1IGRpc3Bvc2l0aXZvIHkgc2UgZW52aWFyw6EgY3VhbmRvIHV0aWxpY2UgZXN0YSBhcGxpY2FjacOzbiBjb25lY3RhZG8gYSBpbnRlcm5ldFwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuc2F2ZV9vZmZsaW5lX3JlcG9ydCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIHZhciBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgbW9udGggPSBtb250aCArIDE7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgJHNjb3BlLnJlcG9ydC5kYXRlID0gZGF5ICsgXCIvXCIgKyBtb250aCArIFwiL1wiICsgeWVhcjtcbiAgICByZXR1cm4gREJTZXJ2aWNlLnNhdmVSZXBvcnQoJHNjb3BlLnJlcG9ydCk7XG4gIH1cblxuICAkc2NvcGUuYmFja190b19tYXAgPSBmdW5jdGlvbihiYWNrX3RvX21hcCl7XG4gICAgaWYoYmFja190b19tYXApe1xuICAgICAgLy9Mb2NhdGlvbnNTZXJ2aWNlLmluaXRpYWxfbGF0ID0gJHNjb3BlLnJlcG9ydC5sYXQ7XG4gICAgICAvL0xvY2F0aW9uc1NlcnZpY2UuaW5pdGlhbF9sbmcgPSAkc2NvcGUucmVwb3J0LmxvbjtcbiAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgLy8kc2NvcGUuYWRkUmVwb3J0c0xheWVyKCk7XG4gICAgfWVsc2V7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG4gIH1cblxuICAkc2NvcGUuY2FuY2VsUmVwb3J0ID0gZnVuY3Rpb24oKXtcbiAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICB9XG5cbiAgJHNjb3BlLmltYWdlID0gbnVsbDtcblxuICAkc2NvcGUuYWRkSW1hZ2UgPSBmdW5jdGlvbihpc0Zyb21BbGJ1bSwgaXNVc2VyUGhvdG8sIGlzQ29tbWVudFBob3RvKSB7XG4gICAgY29uc29sZS5sb2coaXNGcm9tQWxidW0pO1xuICAgIGNvbnNvbGUubG9nKGlzVXNlclBob3RvKTtcbiAgICBjb25zb2xlLmxvZyhpc0NvbW1lbnRQaG90byk7XG4gICAgLy9hbGVydChcImFkZEltYWdlXCIpO1xuICAgICRzY29wZS5pc1VzZXJQaG90byA9IGlzVXNlclBob3RvO1xuICAgICRzY29wZS5pc0NvbW1lbnRQaG90byA9IGlzQ29tbWVudFBob3RvO1xuXG4gICAgdmFyIHNvdXJjZSA9IENhbWVyYS5QaWN0dXJlU291cmNlVHlwZS5DQU1FUkE7XG4gICAgdmFyIGZpeF9vcmllbnRhdGlvbiA9IGZhbHNlO1xuICAgIHZhciBzYXZlX3RvX2dhbGxlcnkgPSBmYWxzZTtcbiAgICBpZihpc0Zyb21BbGJ1bT09MSl7XG4gICAgICBzb3VyY2UgPSBDYW1lcmEuUGljdHVyZVNvdXJjZVR5cGUuUEhPVE9MSUJSQVJZO1xuICAgICAgZml4X29yaWVudGF0aW9uID0gZmFsc2U7XG4gICAgICBzYXZlX3RvX2dhbGxlcnkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHF1YWxpdHk6IDUwLFxuICAgICAgZGVzdGluYXRpb25UeXBlOiBDYW1lcmEuRGVzdGluYXRpb25UeXBlLkZJTEVfVVJJLFxuICAgICAgc291cmNlVHlwZTogc291cmNlLFxuICAgICAgYWxsb3dFZGl0OiBmYWxzZSxcbiAgICAgIGNvcnJlY3RPcmllbnRhdGlvbiA6IGZpeF9vcmllbnRhdGlvbixcbiAgICAgIGVuY29kaW5nVHlwZTogQ2FtZXJhLkVuY29kaW5nVHlwZS5KUEVHLFxuICAgICAgcG9wb3Zlck9wdGlvbnM6IENhbWVyYVBvcG92ZXJPcHRpb25zLFxuICAgICAgc2F2ZVRvUGhvdG9BbGJ1bTogc2F2ZV90b19nYWxsZXJ5LFxuICAgICAgbWVkaWFUeXBlOiBDYW1lcmEuTWVkaWFUeXBlLlBJQ1RVUkUsXG4gICAgICB0YXJnZXRXaWR0aDogMzYwLFxuICAgICAgdGFyZ2V0SGVpZ2h0OiAzNjBcbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuXG4gICAgJGNvcmRvdmFDYW1lcmEuZ2V0UGljdHVyZShvcHRpb25zKS50aGVuKGZ1bmN0aW9uKGltYWdlRGF0YSkge1xuICAgICAgY29uc29sZS5sb2coaW1hZ2VEYXRhKTtcbiAgICAgIG9uSW1hZ2VTdWNjZXNzKGltYWdlRGF0YSk7XG5cbiAgICAgIGZ1bmN0aW9uIG9uSW1hZ2VTdWNjZXNzKGZpbGVVUkkpIHtcbiAgICAgICAgLy9hbGVydChmaWxlVVJJKTtcbiAgICAgICAgY29uc29sZS5sb2coZmlsZVVSSSk7XG4gICAgICAgIHdpbmRvdy5yZXNvbHZlTG9jYWxGaWxlU3lzdGVtVVJMKGZpbGVVUkksIGZ1bmN0aW9uIHN1Y2Nlc3MoZmlsZUVudHJ5KSB7XG5cbiAgICAgICAgICAgICAvLyBEbyBzb21ldGhpbmcgd2l0aCB0aGUgRmlsZUVudHJ5IG9iamVjdCwgbGlrZSB3cml0ZSB0byBpdCwgdXBsb2FkIGl0LCBldGMuXG4gICAgICAgICAgICAgLy8gd3JpdGVGaWxlKGZpbGVFbnRyeSwgaW1nVXJpKTtcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImdvdCBmaWxlOiBcIiArIGZpbGVFbnRyeS50b1VSTCgpKTtcbiAgICAgICAgICAgICB2YXIgZnVsbEZpbGVQYXRoID0gZmlsZUVudHJ5LnRvVVJMKCk7XG4gICAgICAgICAgICAgLy8gZGlzcGxheUZpbGVEYXRhKGZpbGVFbnRyeS5uYXRpdmVVUkwsIFwiTmF0aXZlIFVSTFwiKTtcbiAgICAgICAgICAgICBpZigkc2NvcGUuaXNVc2VyUGhvdG89PTEpe1xuICAgICAgICAgICAgICAgLy9Vc2VyU2VydmljZS5hZGRfcGhvdG8oZmlsZVVSSSk7XG4gICAgICAgICAgICAgICAkc2NvcGUucHJvZmlsZS5waWN0dXJlX3VybCA9IGZ1bGxGaWxlUGF0aDtcbiAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgIGlmKCRzY29wZS5pc0NvbW1lbnRQaG90bz09MSl7XG4gICAgICAgICAgICAgICAgICRzY29wZS5jb21tZW50LmZpbGUgPSBmdWxsRmlsZVBhdGg7XG4gICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydC5maWxlID0gZnVsbEZpbGVQYXRoO1xuICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUucmVwb3J0KTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgJHNjb3BlLmltZ1VSSSA9IGZ1bGxGaWxlUGF0aDtcblxuICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAvLyBJZiBkb24ndCBnZXQgdGhlIEZpbGVFbnRyeSAod2hpY2ggbWF5IGhhcHBlbiB3aGVuIHRlc3RpbmdcbiAgICAgICAgICAgLy8gb24gc29tZSBlbXVsYXRvcnMpLCBjb3B5IHRvIGEgbmV3IEZpbGVFbnRyeS5cbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGVuIGZpbGUgZW50cnk6IFwiICsgZmlsZVVSSSk7XG4gICAgICAgICAgICAgY3JlYXRlRmlsZUVudHJ5KGZpbGVVUkkpO1xuICAgICAgICAgfSk7XG5cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY3JlYXRlRmlsZUVudHJ5KGZpbGVVUkkpIHtcbiAgICAgICAgd2luZG93LnJlc29sdmVMb2NhbEZpbGVTeXN0ZW1VUkwoZmlsZVVSSSwgY29weUZpbGUsIGZhaWwpO1xuICAgICAgfVxuXG4gICAgICAvLyA1XG4gICAgICBmdW5jdGlvbiBjb3B5RmlsZShmaWxlRW50cnkpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBmaWxlRW50cnkuZnVsbFBhdGguc3Vic3RyKGZpbGVFbnRyeS5mdWxsUGF0aC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICAgIHZhciBuZXdOYW1lID0gbWFrZWlkKCkgKyBuYW1lO1xuXG4gICAgICAgIHdpbmRvdy5yZXNvbHZlTG9jYWxGaWxlU3lzdGVtVVJMKGNvcmRvdmEuZmlsZS5kYXRhRGlyZWN0b3J5LCBmdW5jdGlvbihmaWxlU3lzdGVtMikge1xuICAgICAgICAgICAgZmlsZUVudHJ5LmNvcHlUbyhcbiAgICAgICAgICAgICAgZmlsZVN5c3RlbTIsXG4gICAgICAgICAgICAgIG5ld05hbWUsXG4gICAgICAgICAgICAgIG9uQ29weVN1Y2Nlc3MsXG4gICAgICAgICAgICAgIGZhaWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmYWlsKTtcbiAgICAgIH1cblxuICAgICAgLy8gNlxuICAgICAgZnVuY3Rpb24gb25Db3B5U3VjY2VzcyhlbnRyeSkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5pbWFnZSA9IGVudHJ5Lm5hdGl2ZVVSTDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZhaWwoZXJyb3IpIHtcblxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtYWtlaWQoKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gXCJcIjtcbiAgICAgICAgdmFyIHBvc3NpYmxlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICB9XG5cbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7XG4gIH07XG5cbiAgJHNjb3BlLnVybEZvckltYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGltYWdlVVJMID0gXCJodHRwOi8vcGxhY2Vob2xkLml0LzIwMHgyMDBcIjtcbiAgICBpZiAoJHNjb3BlLmltYWdlKSB7XG4gICAgICB2YXIgbmFtZSA9ICRzY29wZS5pbWFnZS5zdWJzdHIoJHNjb3BlLmltYWdlLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIGltYWdlVVJMID0gY29yZG92YS5maWxlLmRhdGFEaXJlY3RvcnkgKyBuYW1lO1xuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nKFwiSW1hZ2VVUkwgPSBcIiArIGltYWdlVVJMKTtcbiAgICByZXR1cm4gaW1hZ2VVUkw7XG4gIH07XG5cblxuICAgICRzY29wZS5saXN0X3JlcG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5oaWRlX3NwZWNpYWxfZGl2cygpO1xuICAgICAgJHNjb3BlLnNldF9hY3RpdmVfb3B0aW9uKCdidXR0b24tbGlzdC1yZXBvcnRzJyk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7XG4gICAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgICAvL1NIT1cgT05MSU5FIFJFUE9SVFMgKGxvZ2ljIGluc2lkZSB0ZW1wbGF0ZSBtYXAuaHRtbClcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXBvcnQtbGlzdC1zY3JvbGxcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL1NIT1cgT0ZGTElORSBSRVBPUlRTXG4gICAgICAgICRzY29wZS5saXN0X29mZmxpbmVfcmVwb3J0cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUubGlzdF9vZmZsaW5lX3JlcG9ydHNfbWVudSA9IGZ1bmN0aW9uKCl7XG4gICAgICAkc2NvcGUuaGlkZV9zcGVjaWFsX2RpdnMoKTtcbiAgICAgICRzY29wZS5saXN0X29mZmxpbmVfcmVwb3J0cygpO1xuICAgIH1cblxuICAgICRzY29wZS5saXN0X29mZmxpbmVfcmVwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICAkc2NvcGUuY2xlYW5PZmZsaW5lTWFya2VycyhtYXApO1xuICAgICAgICB2YXIgcmVwb3J0cyA9IERCU2VydmljZS5nZXRBbGxSZXBvcnRzKCk7XG4gICAgICAgIHZhciBkaXYgPSAnPGlvbi1zY3JvbGwgZGlyZWN0aW9uPVwieVwiIGlkPVwib2ZmbGluZS1yZXBvcnQtbGlzdC1zY3JvbGxcIj48ZGl2IGNsYXNzPVwic2Nyb2xsXCI+PGRpdiBpZD1cInJlcG9ydC1saXN0LW9mZmxpbmVcIj4nO1xuICAgICAgICAkc2NvcGUub2ZmbGluZVJlcG9ydHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgJHNjb3BlLm9mZmxpbmVSZXBvcnRzTWFya2VycyA9IG5ldyBBcnJheSgpO1xuICAgICAgICByZXBvcnRzLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgIC8vIGhhbmRsZSByZXN1bHRcbiAgICAgICAgICBkaXYgPSBkaXYgKyAnPGgzPjxiPlJlcG9ydGVzIGd1YXJkYWRvcyBlbiBlbCBkaXNwb3NpdGl2byB5IHBlbmRpZW50ZXMgZGUgZW52w61vOjwvYj48L2gzPic7XG4gICAgICAgICAgaWYocmVzdWx0IT1udWxsICYmIHJlc3VsdC5yb3dzLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIHJlc3VsdC5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydCA9IHJvdy5kb2M7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm9mZmxpbmVSZXBvcnRzW3JlcG9ydC5faWRdPXJlcG9ydDtcbiAgICAgICAgICAgICAgICBkaXYgPSBkaXYgKyAkc2NvcGUuYWRkX29mZmxpbmVfcmVwb3J0X2RpdihyZXBvcnQpO1xuICAgICAgICAgICAgICAgIHZhciBtYXJrZXJPcHRpb25zID0ge2FsdDogXCJSZXBvcnRlIHBlbmRpZW50ZSBkZSBlbnbDrW9cIn07XG4gICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IEwubWFya2VyKFtyZXBvcnQubGF0LCByZXBvcnQubG9uXSxtYXJrZXJPcHRpb25zKS5hZGRUbyhtYXApO1xuICAgICAgICAgICAgICAgIHZhciBtYXJrZXJIVE1MID0gJzxhIGNsYXNzPVwidGV4dCByZXBvcnQtbGlua1wiIG5nLWNsaWNrPVwiZWRpdE9mZmxpbmVSZXBvcnQoXFwnJyArIHJlcG9ydC5faWQgKyAnXFwnKVwiPjxwPicgKyByZXBvcnQudGl0bGUgKyAnPC9wPjwvYT48cCBjbGFzcz1cIm9mZmxpbmUtcGVuZGluZ1wiPihwZW5kaWVudGUgZGUgZW52w61vKTwvcD4nO1xuICAgICAgICAgICAgICAgIHZhciBjb21waWxlZCA9ICRjb21waWxlKG1hcmtlckhUTUwpKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgbWFya2VyLmJpbmRQb3B1cChjb21waWxlZFswXSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm9mZmxpbmVSZXBvcnRzTWFya2Vyc1tyZXBvcnQuX2lkXT1tYXJrZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRpdiA9IGRpdiArIFwiPGJyLz48aDM+PGEgbmctY2xpY2s9J3NlbmRfb2ZmbGluZV9yZXBvcnRzX2Zyb21fbWVudSgpJz4tIEVudmlhciB0b2RvcyBsb3MgcmVwb3J0ZXMgcGVuZGllbnRlczwvYT48L2gzPlwiO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgZGl2ID0gZGl2ICsgJzxici8+PGgzPk5vIGhheSBuaW5nw7puIHJlcG9ydGUgcGVuZGllbnRlIGRlIGVudsOtby48L2gzPic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpdiA9IGRpdiArICc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwic2Nyb2xsLWJhciBzY3JvbGwtYmFyLXZcIj48ZGl2IGNsYXNzPVwic2Nyb2xsLWJhci1pbmRpY2F0b3Igc2Nyb2xsLWJhci1mYWRlLW91dFwiPjwvZGl2PjwvZGl2PjwvaW9uLXNjcm9sbD4nO1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnI29mZmxpbmUtcmVwb3J0LWxpc3QtY29udGFpbmVyJyApICk7XG4gICAgICAgICAgZWxlbWVudC5odG1sKGRpdik7XG4gICAgICAgICAgdmFyIGNvbXBpbGVkID0gJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKSgkc2NvcGUpO1xuICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwucmVzaXplJyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBkaXYgPSBkaXYgKyAnPGJyLz48aDM+Tm8gaGF5IG5pbmfDum4gcmVwb3J0ZSBwZW5kaWVudGUgZGUgZW52w61vLjwvaDM+JztcbiAgICAgICAgICBkaXYgPSBkaXYgKyAnPC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cInNjcm9sbC1iYXIgc2Nyb2xsLWJhci12XCI+PGRpdiBjbGFzcz1cInNjcm9sbC1iYXItaW5kaWNhdG9yIHNjcm9sbC1iYXItZmFkZS1vdXRcIj48L2Rpdj48L2Rpdj48L2lvbi1zY3JvbGw+JztcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib2ZmbGluZS1yZXBvcnQtbGlzdC1jb250YWluZXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgJHNjb3BlLmxpc3RfcmVwb3J0c19hbmRfZ28gPSBmdW5jdGlvbihyZXBvcnRJZCkge1xuICAgICAgJHNjb3BlLnNldF9hY3RpdmVfb3B0aW9uKCdidXR0b24tbGlzdC1yZXBvcnRzJyk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7XG4gICAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgICAvL1NIT1cgT05MSU5FIFJFUE9SVFMgKGxvZ2ljIGluc2lkZSB0ZW1wbGF0ZSBtYXAuaHRtbClcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXBvcnQtbGlzdC1zY3JvbGxcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL1NIT1cgT0ZGTElORSBSRVBPUlRTXG4gICAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24obWFwKSB7XG4gICAgICAgICAgbWFwLmVhY2hMYXllcihmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIGlmKGxheWVyLl91cmwhPVwidW5kZWZpbmVkXCIgJiYgbGF5ZXIuX3VybCE9bnVsbCl7XG4gICAgICAgICAgICAgIC8vSVQncyBUSEUgTUFQIElUU0VMRlxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIG1hcC5yZW1vdmVMYXllcihsYXllcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciByZXBvcnRzID0gREJTZXJ2aWNlLmdldEFsbFJlcG9ydHMoKTtcbiAgICAgICAgICB2YXIgZGl2ID0gJzxkaXYgaWQ9XCJyZXBvcnQtbGlzdC1vZmZsaW5lXCI+JztcbiAgICAgICAgICAkc2NvcGUub2ZmbGluZVJlcG9ydHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAkc2NvcGUub2ZmbGluZVJlcG9ydHNNYXJrZXJzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgcmVwb3J0cy50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSByZXN1bHRcbiAgICAgICAgICAgIGRpdiA9IGRpdiArICc8aDM+PGI+UmVwb3J0ZXMgZ3VhcmRhZG9zIGVuIGVsIGRpc3Bvc2l0aXZvIHkgcGVuZGllbnRlcyBkZSBlbnbDrW86PC9iPjwvaDM+JztcbiAgICAgICAgICAgIGlmKHJlc3VsdCE9bnVsbCAmJiByZXN1bHQucm93cy5sZW5ndGg+MCl7XG4gICAgICAgICAgICAgIHJlc3VsdC5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVwb3J0ID0gcm93LmRvYztcbiAgICAgICAgICAgICAgICAgICRzY29wZS5vZmZsaW5lUmVwb3J0c1tyZXBvcnQuX2lkXT1yZXBvcnQ7XG4gICAgICAgICAgICAgICAgICBkaXYgPSBkaXYgKyAkc2NvcGUuYWRkX29mZmxpbmVfcmVwb3J0X2RpdihyZXBvcnQpO1xuICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IEwubWFya2VyKFtyZXBvcnQubGF0LCByZXBvcnQubG9uXSkuYWRkVG8obWFwKTtcbiAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJIVE1MID0gJzxhIGNsYXNzPVwidGV4dCByZXBvcnQtbGlua1wiIG5nLWNsaWNrPVwiZWRpdE9mZmxpbmVSZXBvcnQoXFwnJyArIHJlcG9ydC5faWQgKyAnXFwnKVwiPjxwPicgKyByZXBvcnQudGl0bGUgKyAnPC9wPjwvYT48cCBjbGFzcz1cIm9mZmxpbmUtcGVuZGluZ1wiPihwZW5kaWVudGUgZGUgZW52w61vKTwvcD4nO1xuICAgICAgICAgICAgICAgICAgdmFyIGNvbXBpbGVkID0gJGNvbXBpbGUobWFya2VySFRNTCkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgIG1hcmtlci5iaW5kUG9wdXAoY29tcGlsZWRbMF0pO1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLm9mZmxpbmVSZXBvcnRzTWFya2Vyc1tyZXBvcnQuX2lkXT1tYXJrZXI7XG4gICAgICAgICAgICAgICAgICBpZihyZXBvcnQuX2lkID09IHJlcG9ydElkKXtcbiAgICAgICAgICAgICAgICAgICAgZ29Ub09mZmxpbmVSZXBvcnQocmVwb3J0SWQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICBkaXYgPSBkaXYgKyAnPGJyLz48aDM+Tm8gaGF5IG5pbmfDum4gcmVwb3J0ZSBwZW5kaWVudGUgZGUgZW52w61vLjwvaDM+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpdiA9IGRpdiArICc8L2Rpdj4nO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcjb2ZmbGluZS1yZXBvcnQtbGlzdC1jb250YWluZXInICkgKTtcbiAgICAgICAgICAgIGVsZW1lbnQuaHRtbChkaXYpO1xuICAgICAgICAgICAgdmFyIGNvbXBpbGVkID0gJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKSgkc2NvcGUpO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGRpdiA9IGRpdiArICc8YnIvPjxoMz5ObyBoYXkgbmluZ8O6biByZXBvcnRlIHBlbmRpZW50ZSBkZSBlbnbDrW8uPC9oMz4nO1xuICAgICAgICAgICAgZGl2ID0gZGl2ICsgJzwvZGl2Pic7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvZmZsaW5lLXJlcG9ydC1saXN0LWNvbnRhaW5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuZ29Ub09mZmxpbmVSZXBvcnQgPSBmdW5jdGlvbihyZXBvcnRJZCl7XG4gICAgICB2YXIgcmVwb3J0ID0gJHNjb3BlLm9mZmxpbmVSZXBvcnRzW3JlcG9ydElkXTtcbiAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24obWFwKSB7XG4gICAgICAgIHZhciBsYXQgPSByZXBvcnQubGF0O1xuICAgICAgICAvL01vdmUgYSBsaXR0bGUgdGhlIG1hcCBjZW50ZXIgYmVjYXVzZSB0aGUgbWFwIHZpZXcgaXMgc21hbGxlciAocmVwb3J0IGxpc3QgaXMgZGlzcGxheWVkKVxuICAgICAgICBsYXQgPSBsYXQgLSAwLjAwMTtcbiAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubGF0ID0gbGF0O1xuICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sbmcgPSByZXBvcnQubG9uO1xuICAgICAgICBtYXAuc2V0VmlldyhuZXcgTC5MYXRMbmcobGF0LCByZXBvcnQubG9uKSwgMTYpO1xuICAgICAgICAkc2NvcGUub2ZmbGluZVJlcG9ydHNNYXJrZXJzW3JlcG9ydElkXS5vcGVuUG9wdXAoKTtcbiAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgJHNjb3BlLmFkZF9vZmZsaW5lX3JlcG9ydF9kaXYgPSBmdW5jdGlvbihyZXBvcnQpe1xuICAgICAgdmFyIGRpdiA9ICc8ZGl2IGlkPVwicmVwb3J0LWNvbnRhaW5lci0nICsgcmVwb3J0Ll9pZCArICdcIiBuZy1jbGljaz1cImdvVG9PZmZsaW5lUmVwb3J0KFxcJycrcmVwb3J0Ll9pZCsnXFwnKVwiIGNsYXNzPVwicmVwb3J0LWluc2lkZS1saXN0LW9mZmxpbmVcIj4nO1xuICAgICAgZGl2ID0gZGl2ICsgJzxkaXYgY2xhc3M9XCJyZXBvcnQtaW4tbGlzdC1pY29uLW9mZmxpbmVcIj48L2Rpdj4nO1xuICAgICAgZGl2ID0gZGl2ICsgJzxkaXYgY2xhc3M9XCJyZXBvcnQtaW4tbGlzdC1pbmZvXCI+JztcbiAgICAgIGRpdiA9IGRpdiArICc8cCBpZD1cInJlcG9ydC10aXRsZS0nK3JlcG9ydC5faWQrJ1wiIGNsYXNzPVwicmVwb3J0LWluLWxpc3QtdGl0bGVcIj4nK3JlcG9ydC50aXRsZSsnPC9wPic7XG4gICAgICBkaXYgPSBkaXYgKyAnPHAgaWQ9XCJyZXBvcnQtY2F0ZWdvcnktJytyZXBvcnQuX2lkKydcIiBjbGFzcz1cInJlcG9ydC1pbi1saXN0LWNhdGVnb3J5XCI+JytyZXBvcnQuY2F0ZWdvcnkrJzwvcD4nO1xuICAgICAgZGl2ID0gZGl2ICsgJzxwIGlkPVwicmVwb3J0LWRhdGUtJytyZXBvcnQuX2lkKydcIiBjbGFzcz1cInJlcG9ydC1pbi1saXN0LWRhdGVcIj4nK3JlcG9ydC5kYXRlKyc8L3A+JztcbiAgICAgIGRpdiA9IGRpdiArICc8cCBpZD1cInJlcG9ydC1kYXRlLScrcmVwb3J0Ll9pZCsnXCIgY2xhc3M9XCJyZXBvcnQtaW4tbGlzdC1hY3Rpb25zXCI+JysnPGEgbmctY2xpY2s9XCJlZGl0T2ZmbGluZVJlcG9ydChcXCcnK3JlcG9ydC5faWQrJ1xcJylcIj5FZGl0YXI8L2E+JysnJm5ic3A7IDxhIG5nLWNsaWNrPVwiZGVsZXRlT2ZmbGluZVJlcG9ydChcXCcnK3JlcG9ydC5faWQrJ1xcJylcIj5FbGltaW5hcjwvYT48L3A+JztcbiAgICAgIGRpdiA9IGRpdiArICc8ZGl2IGNsYXNzPVwicmVwb3J0LW1pbmktaWNvbnNcIj4nO1xuICAgICAgaWYocmVwb3J0LmZpbGUgIT0gbnVsbCAmJiByZXBvcnQuZmlsZSAhPSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgZGl2ID0gZGl2ICsgJzxpbWcgY2xhc3M9XCJyZXBvcnQtbWluaS1pY29uXCIgc3JjPVwiLi9pbWcvaWNvbi1jYW1lcmEucG5nXCIgLz4nO1xuICAgICAgfVxuICAgICAgZGl2ID0gZGl2ICsgJzxpbWcgY2xhc3M9XCJyZXBvcnQtbWluaS1pY29uXCIgc3JjPVwiLi9pbWcvaWNvbi10YWdzLnBuZ1wiIC8+JztcbiAgICAgIC8vVE9ETzogQWRkIGFjdGlvbnMgZGl2IHdpdGggXCJFZGl0XCIsIFwiRGVsZXRlXCJcbiAgICAgIGRpdiA9IGRpdiArICc8L2Rpdj48L2Rpdj48L2Rpdj4nO1xuICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG5cbiAgICAkc2NvcGUuaGVscCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICRzY29wZS5zZXRfYWN0aXZlX29wdGlvbignYnV0dG9uLWZhcScpO1xuICAgICAgICAkc2NvcGUuaGlkZV9zcGVjaWFsX2RpdnMoKTtcbiAgICAgICAgRmFxU2VydmljZS5hbGwoKS5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgICAgICAkc2NvcGUuZmFxID0gJHNjZS50cnVzdEFzSHRtbChyZXNwb25zZSk7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9mYXEuaHRtbCcsIHtcbiAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICBoYXJkd2FyZUJhY2tCdXR0b25DbG9zZTogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCcsXG4gICAgICAgICAgICAvL2ZvY3VzRmlyc3RJbnB1dDogdHJ1ZVxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnI2ZhcS1jb250YWluZXItZGl2JyApICk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBpbGVkID0gJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKSgkc2NvcGUpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICB9ZWxzZXtcbiAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJTaW4gY29uZXhpw7NuIGEgaW50ZXJuZXRcIixcIlBhcmEgdmVyIGxhIGF5dWRhIGRlYmUgZXN0YXIgY29uZWN0YWRvIGEgaW50ZXJuZXRcIik7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAkc2NvcGUuc2Nyb2xsTWUgPSBmdW5jdGlvbihhbmNob3JfaWQpe1xuICAgICAgJGxvY2F0aW9uLmhhc2goYW5jaG9yX2lkKTtcbiAgICAgIHZhciBoYW5kbGUgID0gJGlvbmljU2Nyb2xsRGVsZWdhdGUuJGdldEJ5SGFuZGxlKCdjb250ZW50Jyk7XG4gICAgICBoYW5kbGUuYW5jaG9yU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmNsb3NlX2ZhcV9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnNldF9hY3RpdmVfb3B0aW9uID0gZnVuY3Rpb24oYnV0dG9uaWQpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uLXJlcG9ydFwiKS5jbGFzc05hbWUgPSBcIm9wdGlvbi1pbmFjdGl2ZVwiO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b24tbGlzdC1yZXBvcnRzXCIpLmNsYXNzTmFtZSA9IFwib3B0aW9uLWluYWN0aXZlXCI7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbi1mYXFcIikuY2xhc3NOYW1lID0gXCJvcHRpb24taW5hY3RpdmVcIjtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uLWZpbmQtbWVcIikuY2xhc3NOYW1lID0gXCJvcHRpb24taW5hY3RpdmVcIjtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ1dHRvbmlkKS5jbGFzc05hbWUgPSBcIm9wdGlvbi1hY3RpdmVcIjtcbiAgICB9XG5cbiAgICAkc2NvcGUuaGlkZV9zcGVjaWFsX2RpdnMgPSBmdW5jdGlvbigpe1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXBvcnQtbGlzdC1zY3JvbGxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvZmZsaW5lLXJlcG9ydC1saXN0LWNvbnRhaW5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwX2Nyb3NzaGFpcicpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXBfY3Jvc3NoYWlyX2J1dHRvbicpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG5cbiAgICAkc2NvcGUudmlld1JlcG9ydERldGFpbHMgPSBmdW5jdGlvbihpZCl7XG4gICAgICAkc2NvcGUucmVwb3J0X2RldGFpbF9pZCA9IGlkO1xuICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICRzY29wZS5oaWRlX3NwZWNpYWxfZGl2cygpO1xuICAgICAgICBSZXBvcnRTZXJ2aWNlLmdldEJ5SWQoaWQpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICRzY29wZS5yZXBvcnRfZGV0YWlsID0gJHNjZS50cnVzdEFzSHRtbChyZXNwLmRhdGEucmVwbGFjZShcIm92ZXJmbG93OmF1dG87XCIsXCJcIikucmVwbGFjZSgnc3JjPVwiLycsJ3NyYz1cIicrQ29uZmlnU2VydmljZS5iYXNlVVJMKS5yZXBsYWNlKCd1cmwoLycsJ3VybCgnK0NvbmZpZ1NlcnZpY2UuYmFzZVVSTCtDb25maWdTZXJ2aWNlLmJhc2VDb2JyYW5kK1wiL1wiKS5yZXBsYWNlKCd1cmwoLycsJ3VybCgnK0NvbmZpZ1NlcnZpY2UuYmFzZVVSTCtDb25maWdTZXJ2aWNlLmJhc2VDb2JyYW5kK1wiL1wiKSk7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAkc2NvcGUuY29tbWVudCA9IHtcbiAgICAgICAgICAgIHN1Ym1pdF91cGRhdGU6IDEsXG4gICAgICAgICAgICBpZDogJHNjb3BlLnJlcG9ydF9kZXRhaWxfaWQsXG4gICAgICAgICAgICBtYXlfc2hvd19uYW1lOiB0cnVlLFxuICAgICAgICAgICAgYWRkX2FsZXJ0OiB0cnVlLFxuICAgICAgICAgICAgZml4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgdXBkYXRlOiBcIlwiLFxuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIGZvcm1fcnpudnk6IG51bGwsXG4gICAgICAgICAgICBwaG90bzogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgICAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgndGVtcGxhdGVzL3JlcG9ydC1kZXRhaWwuaHRtbCcsIHtcbiAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICAvL2hhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgICBNb2RhbFNlcnZpY2UuYWN0aXZlTW9kYWwgPSBtb2RhbDtcbiAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsLnNob3coKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCggZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJyNyZXBvcnQtZGV0YWlsLWNvbnRhaW5lci1kaXYnICkgKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjb21waWxlZCA9ICRjb21waWxlKGVsZW1lbnQuY29udGVudHMoKSkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgIGlmKFVzZXJTZXJ2aWNlLmlzTG9nZ2VkKCkpe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbW1lbnRfY29udGFpbmVyXCIpLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29tbWVudC5uYW1lID0gVXNlclNlcnZpY2UubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbW1lbnQuZm9ybV9yem52eSA9IFVzZXJTZXJ2aWNlLmVtYWlsO1xuICAgICAgICAgICAgICAgICAgICBpZihVc2VyU2VydmljZS5mcm9tX2JvZHkhPW51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBsb24gPSAkc2NvcGUuZmVhdHVyZVJlcG9ydHNbaWRdLmZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdCA9ICRzY29wZS5mZWF0dXJlUmVwb3J0c1tpZF0uZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICBQTUJTZXJ2aWNlLmdldEFyZWFzKGxvbixsYXQpLnRoZW4oZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqc29uT2JqZWN0ID0gcmVzcC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQm9keUFkbWluID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGpzb25PYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWFJZCA9IHByb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmVhUHJvcHMgPSBqc29uT2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhcmVhUHJvcHMudHlwZT09XCJDSVVcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoVXNlclNlcnZpY2UuZnJvbV9ib2R5PT1hcmVhSWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQm9keUFkbWluID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb21tZW50Lm5ld19jYXRlZ29yeSA9ICRzY29wZS5mZWF0dXJlUmVwb3J0c1tpZF0uZmVhdHVyZS5wcm9wZXJ0aWVzLmNhdGVnb3J5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbW1lbnQuc3RhdGUgPSAkc2NvcGUuZmVhdHVyZVJlcG9ydHNbaWRdLmZlYXR1cmUucHJvcGVydGllcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhdGVnb3JpZXNTZXJ2aWNlLmFsbEZyb21Cb2R5QXJlYShhcmVhSWQpLnRoZW4oZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcmVhT2JqZWN0ID0gcmVzcC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsQ2F0ZWdvcmllc0Zyb21Cb3lBcmVhID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4IGluIGpzb25BcmVhT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbENhdGVnb3JpZXNGcm9tQm95QXJlYS5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3X2NhdGVnb3J5X3NlbGVjdFwiKS52YWx1ZT0kc2NvcGUuY29tbWVudC5uZXdfY2F0ZWdvcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0JvZHlBZG1pbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tbWVudF9jb250YWluZXJcIikuc3R5bGUuZGlzcGxheT1cImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21tZW50X2NvbnRhaW5lclwiKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICBFcnJvclNlcnZpY2Uuc2hvd19lcnJvcl9tZXNzYWdlX3BvcHVwKFwiRVJST1IgQUwgQ0FSR0FSIERBVE9TIERFTCBSRVBPUlRFOiBcIiArIHJlc3Auc3RhdHVzVGV4dClcbiAgICAgICAgfSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJTaW4gY29uZXhpw7NuIGEgaW50ZXJuZXRcIixcIlBhcmEgdmVyIGxvcyBkZXRhbGxlcyBkZWwgcmVwb3J0ZSwgZGViZSBlc3RhciBjb25lY3RhZG8gYSBpbnRlcm5ldC5cIik7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAkc2NvcGUuY2xvc2VfcmVwb3J0X2RldGFpbF9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgICAkc2NvcGUucmVwb3J0X2RldGFpbF9pZCA9IG51bGw7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXIgbWFwIG9uIHVzZXIncyBjdXJyZW50IHBvc2l0aW9uXG4gICAgICovXG4gICAgJHNjb3BlLmxvY2F0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAkY29yZG92YUdlb2xvY2F0aW9uXG4gICAgICAgIC5nZXRDdXJyZW50UG9zaXRpb24oKVxuICAgICAgICAudGhlbihmdW5jdGlvbihwb3NpdGlvbikge1xuICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxhdCA9IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZTtcbiAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sbmcgPSBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlO1xuICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLnpvb20gPSAxNTtcblxuICAgICAgICAgICRzY29wZS5tYXAubWFya2Vycy5ub3cgPSB7XG4gICAgICAgICAgICBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgICAgIGxuZzogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiWW91IEFyZSBIZXJlXCIsXG4gICAgICAgICAgICBmb2N1czogdHJ1ZSxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2VcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIC8vIGVycm9yXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkxvY2F0aW9uIGVycm9yIVwiKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuXG4gICAgLyokc2NvcGUuZ2V0UmVwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICB2YXIgYmJveCA9IG1hcC5nZXRCb3VuZHMoKTtcbiAgICAgICAgLy9Db25zb2xlLmxvZyhiYm94KTtcblxuICAgICAgICBQTUJTZXJ2aWNlLmFyb3VuZChiYm94KS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJwaW4gXCIgKyBpICsgXCI9XCIgKyBkYXRhW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTsqL1xuXG4gICAgJHNjb3BlLmFkZE1hcENvbnRyb2xzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXBfY3Jvc3NoYWlyJykuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXBfY3Jvc3NoYWlyX2J1dHRvbicpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICB9O1xuXG4gICAgJHNjb3BlLnN0YXJ0UmVwb3J0RnJvbUNyb3NzaGFpcnMgPSBmdW5jdGlvbigpe1xuICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcbiAgICAgICAgdmFyIGxhdGxvbiA9IG1hcC5nZXRDZW50ZXIoKTtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5zYXZlX25ld19yZXBvcnRfcG9zaXRpb24obGF0bG9uLmxhdCxsYXRsb24ubG5nKTtcbiAgICAgICAgJHNjb3BlLm5ld19yZXBvcnQoMSk7XG4gICAgICAgIC8vY29uc29sZS5sb2cobGF0bG9uKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5nZXRPbmx5Q2F0ZWdvcnlJY29uVVJMID0gZnVuY3Rpb24odXJsKXtcbiAgICAgIHZhciBuZXdfdXJsID0gdXJsLnJlcGxhY2UoXCItcHJvY2Vzb1wiLFwiXCIpO1xuICAgICAgbmV3X3VybCA9IG5ld191cmwucmVwbGFjZShcIi1yZXN1ZWx0b1wiLFwiXCIpO1xuICAgICAgcmV0dXJuIG5ld191cmw7XG4gICAgfTtcblxuICAgICRzY29wZS5oaWRlT2ZmU2NyZWVuUGlucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcbiAgICAgICAgdmFyIG1hcEJvdW5kcyA9IG1hcC5nZXRCb3VuZHMoKTtcbiAgICAgICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKCRzY29wZS5yZXBvcnRzQnlTdGF0ZSk7XG4gICAgICAgICRzY29wZS5yZXBvcnRzVmlzaWJsZSA9IFtdO1xuICAgICAgICBrZXlzQXJyYXkuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAkc2NvcGUucmVwb3J0c0J5U3RhdGVbaXRlbV0uZm9yRWFjaChmdW5jdGlvbihsYXllcixrZXkpe1xuICAgICAgICAgICAgdmFyIHNob3VsZEJlVmlzaWJsZSA9IG1hcEJvdW5kcy5jb250YWlucyhsYXllci5nZXRMYXRMbmcoKSk7XG4gICAgICAgICAgICBpZiAoIXNob3VsZEJlVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIG1hcC5yZW1vdmVMYXllcihsYXllcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZEJlVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIC8qaWYoJHNjb3BlLnNlbGVjdGVkX3Jlc2lkdW8pe1xuICAgICAgICAgICAgICAgICAgdmFyIHByb2dyYW1hc19zdHIgPSAkc2NvcGUuc2VsZWN0ZWRfcmVzaWR1by5wcm9wZXJ0aWVzLlByb2dyYW1hcztcbiAgICAgICAgICAgICAgICAgIHZhciBwcm9ncmFtYXNJZHMgPSBwcm9ncmFtYXNfc3RyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgIHZhciBpZCA9IGxheWVyLmZlYXR1cmUucHJvcGVydGllcy5Qcm9ncmFtYVN1YlByb2dJRDtcbiAgICAgICAgICAgICAgICAgIGlmKHByb2dyYW1hc0lkcy5pbmRleE9mKGlkKTwwKXtcbiAgICAgICAgICAgICAgICAgICAgbWFwLnJlbW92ZUxheWVyKGxheWVyKTtcbiAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBtYXAuYWRkTGF5ZXIobGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgbWFwLmFkZExheWVyKGxheWVyKTtcbiAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgICAgICBtYXAuYWRkTGF5ZXIobGF5ZXIpO1xuICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnRzVmlzaWJsZS5wdXNoKGxheWVyLmZlYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnJlbW92ZUFsbFBpbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24obWFwKSB7XG4gICAgICAgIHZhciBtYXBCb3VuZHMgPSBtYXAuZ2V0Qm91bmRzKCk7XG4gICAgICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cygkc2NvcGUucmVwb3J0c0J5U3RhdGUpO1xuICAgICAgICAkc2NvcGUucmVwb3J0c1Zpc2libGUgPSBbXTtcbiAgICAgICAga2V5c0FycmF5LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgJHNjb3BlLnJlcG9ydHNCeVN0YXRlW2l0ZW1dLmZvckVhY2goZnVuY3Rpb24obGF5ZXIsa2V5KXtcbiAgICAgICAgICAgIG1hcC5yZW1vdmVMYXllcihsYXllcik7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkc2NvcGUubG9hZFBpbnNMYXllciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKSl7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLnJlbW92ZUFsbFBpbnMoKTtcbiAgICAgICAgJHNjb3BlLnJlcG9ydHNCeVN0YXRlID0ge307XG4gICAgICAgIFJlcG9ydFNlcnZpY2UuZ2V0QWxsKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICB2YXIgcGluc0FycmF5ID0gcmVzcG9uc2UuZGF0YS5mZWF0dXJlcztcbiAgICAgICAgICAkc2NvcGUucmVwb3J0cyA9IHJlc3BvbnNlLmRhdGEuZmVhdHVyZXM7XG4gICAgICAgICAgcGluc0FycmF5LmZvckVhY2goZnVuY3Rpb24oZmVhdHVyZSl7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIHZhciBsb24gPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdO1xuICAgICAgICAgICAgICB2YXIgbGF0ID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXTtcbiAgICAgICAgICAgICAgdmFyIGljb24gPSBDb25maWdTZXJ2aWNlLmJhc2VVUkwgKyBmZWF0dXJlLnByb3BlcnRpZXMucGluX3VybDtcbiAgICAgICAgICAgICAgdmFyIG1hcmtlckljb24gPSBMLmljb24oe1xuICAgICAgICAgICAgICAgIGljb25Vcmw6IGljb24sXG4gICAgICAgICAgICAgICAgaWNvblNpemU6IFsyOSwgMzRdLFxuICAgICAgICAgICAgICAgIGljb25BbmNob3I6IFsxNCwgMzRdLFxuICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTQsIC04XVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmFyIGxheWVyID0gTC5tYXJrZXIoW2xhdCwgbG9uXSwge2ljb246IG1hcmtlckljb259KTtcbiAgICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICRzY29wZS5mZWF0dXJlUmVwb3J0c1tsYXllci5mZWF0dXJlLnByb3BlcnRpZXMuaWRdID0gbGF5ZXI7XG4gICAgICAgICAgICAgIGlmKCEkc2NvcGUucmVwb3J0c0J5U3RhdGVbXCJzdGF0ZS1cIiArIGZlYXR1cmUucHJvcGVydGllcy5zdGF0ZV0pe1xuICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnRzQnlTdGF0ZVtcInN0YXRlLVwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLnN0YXRlXT1bXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0c0J5U3RhdGVbXCJzdGF0ZS1cIiArIGZlYXR1cmUucHJvcGVydGllcy5zdGF0ZV0ucHVzaChsYXllcik7XG4gICAgICAgICAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICByZXBvcnRJZCA9IGZlYXR1cmUucHJvcGVydGllcy5pZDtcbiAgICAgICAgICAgICAgICBkZXNjcmlwY2lvbiA9IGZlYXR1cmUucHJvcGVydGllcy50aXRsZTtcbiAgICAgICAgICAgICAgICBodG1sID0gJzxhIGNsYXNzPVwidGV4dCByZXBvcnQtbGlua1wiIG5nLWNsaWNrPVwidmlld1JlcG9ydERldGFpbHMoJyArIHJlcG9ydElkICsgJylcIj48cD4nICsgZGVzY3JpcGNpb24gKyAnPC9wPjwvYT4nO1xuICAgICAgICAgICAgICAgIHZhciBjb21waWxlZCA9ICRjb21waWxlKGh0bWwpKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgbGF5ZXIuYmluZFBvcHVwKGNvbXBpbGVkWzBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgJHNjb3BlLmhpZGVPZmZTY3JlZW5QaW5zKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgJHNjb3BlLmFkZFJlcG9ydHNMYXllciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYoJHNjb3BlLmpzb25MYXllciE9bnVsbCl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBiYXNlVVJMID0gQ29uZmlnU2VydmljZS5iYXNlVVJMO1xuICAgICAgICBidWlsZFBvcHVwID0gZnVuY3Rpb24oZGF0YSwgbWFya2VyKSB7XG4gICAgICAgICAgdmFyIHJlcG9ydElkID0gZGF0YVszXSxcbiAgICAgICAgICAgIGRlc2NyaXBjaW9uID0gZGF0YVs0XTtcblxuICAgICAgICAgIHZhciBodG1sID0gJzxhIGNsYXNzPVwidGV4dCByZXBvcnQtbGlua1wiIG5nLWNsaWNrPVwidmlld1JlcG9ydERldGFpbHMoJyArIHJlcG9ydElkICsgJylcIj48cD4nICsgZGVzY3JpcGNpb24gKyAnPC9wPjwvYT4nO1xuICAgICAgICAgIHJldHVybiBodG1sO1xuXG5cbiAgICAgICAgfSxcblxuICAgICAgICBvbkVhY2hGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICAvLyBkb2VzIHRoaXMgZmVhdHVyZSBoYXZlIGEgcHJvcGVydHkgbmFtZWQgcG9wdXBDb250ZW50P1xuICAgICAgICAgIHZhciBodG1sLCByZXBvcnRJZCwgZGVzY3JpcGNpb247XG4gICAgICAgICAgaWYgKGZlYXR1cmUucHJvcGVydGllcykge1xuICAgICAgICAgICAgcmVwb3J0SWQgPSBmZWF0dXJlLnByb3BlcnRpZXMuaWQ7XG4gICAgICAgICAgICBkZXNjcmlwY2lvbiA9IGZlYXR1cmUucHJvcGVydGllcy50aXRsZTtcbiAgICAgICAgICAgIGh0bWwgPSAnPGEgY2xhc3M9XCJ0ZXh0IHJlcG9ydC1saW5rXCIgbmctY2xpY2s9XCJ2aWV3UmVwb3J0RGV0YWlscygnICsgcmVwb3J0SWQgKyAnKVwiPjxwPicgKyBkZXNjcmlwY2lvbiArICc8L3A+PC9hPic7XG4gICAgICAgICAgICB2YXIgY29tcGlsZWQgPSAkY29tcGlsZShodG1sKSgkc2NvcGUpO1xuICAgICAgICAgICAgbGF5ZXIuYmluZFBvcHVwKGNvbXBpbGVkWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbCA9IG5ldyBMLkxheWVySlNPTih7XG4gICAgICAgICAgdXJsOiBiYXNlVVJMICsgXCIvYWpheF9nZW8/YmJveD17YmJveH1cIiAvKlwiYWpheF9nZW8/YmJveD17YmJveH1cIiovICxcbiAgICAgICAgICBsb2NBc0dlb0pTT046IHRydWUgLypsb2NBc0FycmF5OnRydWUqLyxcbiAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBvbkVhY2hGZWF0dXJlXG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5qc29uTGF5ZXIgPSBsO1xuXG4gICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICBtYXAuYWRkTGF5ZXIobCk7XG4gICAgICB9KTtcblxuXG4gICAgICBsLm9uKCdkYXRhbG9hZGVkJywgZnVuY3Rpb24oZSkgeyAvL3Nob3cgbG9hZGVkIGRhdGEhXG4gICAgICAgICRzY29wZS5yZXBvcnRzID0gZS5kYXRhLmZlYXR1cmVzO1xuICAgICAgfSk7XG5cblxuICAgICAgbC5vbignbGF5ZXJhZGQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUubGF5ZXIuZWFjaExheWVyKGZ1bmN0aW9uKF9sYXllcikge1xuICAgICAgICAgIHZhciBtYXJrZXJJY29uID0gTC5pY29uKHtcbiAgICAgICAgICAgIGljb25Vcmw6IGJhc2VVUkwgKyBcIi9cIiArIF9sYXllci5mZWF0dXJlLnByb3BlcnRpZXMucGluX3VybCxcbiAgICAgICAgICAgIGljb25TaXplOiBbMjksIDM0XSxcbiAgICAgICAgICAgIGljb25BbmNob3I6IFsxNCwgMzRdLFxuICAgICAgICAgICAgcG9wdXBBbmNob3I6IFswLCAtOF1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfbGF5ZXIuc2V0SWNvbihtYXJrZXJJY29uKTtcbiAgICAgICAgICBpZiAoJHNjb3BlLmZlYXR1cmVSZXBvcnRzW19sYXllci5mZWF0dXJlLnByb3BlcnRpZXMuaWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRzY29wZS5mZWF0dXJlUmVwb3J0c1tfbGF5ZXIuZmVhdHVyZS5wcm9wZXJ0aWVzLmlkXSA9IF9sYXllcjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcblxuICAgIH07XG5cbiAgICAkc2NvcGUuZ29Ub1JlcG9ydCA9IGZ1bmN0aW9uKHJlcG9ydCkge1xuXG4gICAgICB2YXIgcmVwb3J0X2RpdnNfYWN0aXZlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJlcG9ydC1pbnNpZGUtbGlzdC1hY3RpdmVcIik7XG4gICAgICBpZihyZXBvcnRfZGl2c19hY3RpdmUubGVuZ3RoID4gMCl7XG4gICAgICAgIHJlcG9ydF9kaXZzX2FjdGl2ZVswXS5jbGFzc05hbWUgPSBcInJlcG9ydC1pbnNpZGUtbGlzdFwiO1xuICAgICAgfVxuICAgICAgdmFyIHJlcG9ydF9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlcG9ydC1jb250YWluZXItXCIrcmVwb3J0LnByb3BlcnRpZXMuaWQpO1xuICAgICAgcmVwb3J0X2Rpdi5jbGFzc05hbWUgPSBcInJlcG9ydC1pbnNpZGUtbGlzdC1hY3RpdmVcIjtcblxuXG4gICAgICB2YXIgbGF5ZXIgPSAkc2NvcGUuZmVhdHVyZVJlcG9ydHNbcmVwb3J0LnByb3BlcnRpZXMuaWRdO1xuICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcbiAgICAgICAgdmFyIGNvb3JkcyA9IGxheWVyLmdldExhdExuZygpO1xuICAgICAgICB2YXIgbGF0ID0gY29vcmRzLmxhdDtcbiAgICAgICAgLy9Nb3ZlIGEgbGl0dGxlIHRoZSBtYXAgY2VudGVyIGJlY2F1c2UgdGhlIG1hcCB2aWV3IGlzIHNtYWxsZXIgKHJlcG9ydCBsaXN0IGlzIGRpc3BsYXllZClcbiAgICAgICAgbGF0ID0gbGF0IC0gMC4wMDA2O1xuICAgICAgICBtYXAuc2V0VmlldyhuZXcgTC5MYXRMbmcobGF0LCBjb29yZHMubG5nKSwgMTgpO1xuICAgICAgICBsYXllci5vcGVuUG9wdXAoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBTdWdnZXN0aW9uXG4gICAgJHNjb3BlLm1vZGVsID0gW107XG4gICAgJHNjb3BlLmV4dGVybmFsTW9kZWwgPSBbXTtcbiAgICAkc2NvcGUuc2VsZWN0ZWRJdGVtcyA9IFtdO1xuICAgICRzY29wZS5wcmVzZWxlY3RlZFNlYXJjaEl0ZW1zID0gW107XG4gICAgJHNjb3BlLmNsaWNrZWRWYWx1ZU1vZGVsID0gXCJcIjtcbiAgICAkc2NvcGUucmVtb3ZlZFZhbHVlTW9kZWwgPSBcIlwiO1xuXG4gICAgJHNjb3BlLmdldFRlc3RJdGVtcyA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICB2YXIgdG9SZXR1cm4gPSBbXSxcbiAgICAgICAgb2JqO1xuICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgIG9iaiA9IHtcbiAgICAgICAgICBpdGVtczogW3tcbiAgICAgICAgICAgIGlkOiBcIjFcIixcbiAgICAgICAgICAgIG5hbWU6IHF1ZXJ5ICsgXCIxXCIsXG4gICAgICAgICAgICB2aWV3OiBcInZpZXc6IFwiICsgcXVlcnkgKyBcIjFcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGlkOiBcIjJcIixcbiAgICAgICAgICAgIG5hbWU6IHF1ZXJ5ICsgXCIyXCIsXG4gICAgICAgICAgICB2aWV3OiBcInZpZXc6IFwiICsgcXVlcnkgKyBcIjJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGlkOiBcIjNcIixcbiAgICAgICAgICAgIG5hbWU6IHF1ZXJ5ICsgXCIzXCIsXG4gICAgICAgICAgICB2aWV3OiBcInZpZXc6IFwiICsgcXVlcnkgKyBcIjNcIlxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICAgIHRvUmV0dXJuID0gb2JqLml0ZW1zO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH07XG5cblxuICAgICRzY29wZS5pdGVtc1JlbW92ZWQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJHNjb3BlLnJlbW92ZWRWYWx1ZU1vZGVsID0gY2FsbGJhY2s7XG4gICAgfTtcblxuICAgICRzY29wZS51c2VyX29wdGlvbnMgPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIG1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpO1xuICAgICAgaWYobWVudS5zdHlsZS5kaXNwbGF5PT1cImJsb2NrXCIpe1xuICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIH1lbHNle1xuICAgICAgICB2YXIgbmFtZSA9IFVzZXJTZXJ2aWNlLm5hbWU7XG4gICAgICAgIGlmKG5hbWU9PW51bGwpe1xuICAgICAgICAgIC8vTm8gZXN0YSBsb2d1ZWFkb1xuICAgICAgICAgICRzY29wZS5zaG93X2Fub255bW91c19tZW51KCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIC8vRXN0w6EgbG9ndWVhZG9cbiAgICAgICAgICAkc2NvcGUuc2hvd191c2VyX21lbnUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICRzY29wZS5zaG93X2Fub255bW91c19tZW51ID0gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBtZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VyLW9wdGlvbnMtbWVudVwiKTtcbiAgICAgIHZhciBodG1sID0gXCI8ZGl2IGlkPSdhdXRoX29wdGlvbnMnPjxkaXYgY2xhc3M9J25vbmF1dGgtbGluaycgbmctY2xpY2s9J3Nob3dfbG9naW5fbW9kYWwoKSc+SW5pY2lhciBzZXNpw7NuPC9kaXY+XCI7XG4gICAgICBodG1sID0gaHRtbCArIFwiPGRpdiBjbGFzcz0nbm9uYXV0aC1saW5rJyBuZy1jbGljaz0nc2hvd19zaWduX3VwX21vZGFsKCknPlJlZ2lzdHJhcnNlPC9kaXY+PC9kaXY+XCI7XG4gICAgICBtZW51LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAkY29tcGlsZShtZW51KSgkc2NvcGUpOyAvLzwtLS0tIHJlY29tcGlsYXRpb25cbiAgICAgIG1lbnUuc3R5bGUuaGVpZ2h0ID0gJzEyMHB4JztcbiAgICAgIG1lbnUuc3R5bGUud2lkdGggPSAnMTUwcHgnO1xuICAgICAgbWVudS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cblxuICAgICRzY29wZS5zaG93X3VzZXJfbWVudSA9IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlci1vcHRpb25zLW1lbnVcIik7XG4gICAgICB2YXIgaHRtbCA9IFVzZXJTZXJ2aWNlLm5hbWUgKyBcIjxkaXYgaWQ9J2F1dGhfb3B0aW9ucyc+PGRpdiBjbGFzcz0ndXNlci1sb2dnZWQtbGluaycgbmctY2xpY2s9J3Nob3dfZWRpdF9wcm9maWxlX21vZGFsKCknPk1pIHBlcmZpbDwvZGl2PlwiO1xuICAgICAgaHRtbCA9IGh0bWwgKyBcIjxkaXYgY2xhc3M9J3VzZXItbG9nZ2VkLWxpbmsnIG5nLWNsaWNrPSdjaGFuZ2VfcGFzc3dvcmQoKSc+Q2FtYmlhciBjb250cmFzZcOxYTwvZGl2PlwiO1xuICAgICAgaHRtbCA9IGh0bWwgKyBcIjxkaXYgY2xhc3M9J3VzZXItbG9nZ2VkLWxpbmsnIG5nLWNsaWNrPSdsaXN0X29mZmxpbmVfcmVwb3J0c19tZW51KCknPlJlcG9ydGVzIHBlbmRpZW50ZXM8L2Rpdj5cIjtcbiAgICAgIGh0bWwgPSBodG1sICsgXCI8ZGl2IGNsYXNzPSd1c2VyLWxvZ2dlZC1saW5rJyBuZy1jbGljaz0nc2lnbl9vdXQoKSc+Q2VycmFyIHNlc2nDs248L2Rpdj48L2Rpdj5cIjtcbiAgICAgIG1lbnUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICRjb21waWxlKG1lbnUpKCRzY29wZSk7IC8vPC0tLS0gcmVjb21waWxhdGlvblxuICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSAnMjIwcHgnO1xuICAgICAgbWVudS5zdHlsZS53aWR0aCA9ICcyMDBweCc7XG4gICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfTtcblxuICAgICRzY29wZS5mb3Jnb3RfcGFzc3dvcmQgPSBmdW5jdGlvbigpe1xuICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgICAgJHNjb3BlLm5vbmF1dGggPSBuZXcgQXJyYXkoKTtcbiAgICAgICRzY29wZS5ub25hdXRoLmVtYWlsID0gXCJcIjtcbiAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgndGVtcGxhdGVzL2ZvcmdvdF9wYXNzd29yZC5odG1sJywge1xuICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgIGhhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7XG4gICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbCA9IG1vZGFsO1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RfYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsLnNob3coKTtcbiAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmZvcmdvdF9wYXNzd29yZF9vayA9IGZ1bmN0aW9uKCl7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiRW1haWxcIixcImVtYWlsXCIsJHNjb3BlLm5vbmF1dGguZW1haWwpKTtcbiAgICAgIGlmKEVycm9yU2VydmljZS5jaGVja19maWVsZHMoZmllbGRzLFwiZXJyb3JfY29udGFpbmVyXCIpKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIEF1dGhTZXJ2aWNlLnBhc3N3b3JkX3JlY292ZXJ5KCRzY29wZS5ub25hdXRoLmVtYWlsKS50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICBpZihyZXNwLmRhdGEubWVzc2FnZT09XCJFbWFpbCBzdWNjZXNzZnVseSBzZW5kZWRcIil7XG4gICAgICAgICAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RfYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydChcIkluc3RydWNjaW9uZXMgZW52aWFkYXMgY29uIMOpeGl0b1wiLFwiU2UgaGFuIGVudmlhZG8gaW50cnVjY2lvbmVzIHBhcmEgcmVzdGFibGVjZXIgdHUgY29udHJhc2XDsWEgYWwgY29ycmVvIHByb3BvcmNpb25hZG8gYW50ZXJpb3JtZW50ZS5cIik7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIEVycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2UoXCJlcnJvcl9jb250YWluZXJcIixyZXNwLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1lbHNle1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLmNoYW5nZV9wYXNzd29yZCA9IGZ1bmN0aW9uKCl7XG4gICAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgICAkc2NvcGUubm9uYXV0aCA9IG5ldyBBcnJheSgpO1xuICAgICAgJHNjb3BlLm5vbmF1dGgub2xkUGFzc3dvcmQgPSBcIlwiO1xuICAgICAgJHNjb3BlLm5vbmF1dGgubmV3UGFzc3dvcmQgPSBcIlwiO1xuICAgICAgJHNjb3BlLm5vbmF1dGguY29uZmlybVBhc3N3b3JkID0gXCJcIjtcbiAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgndGVtcGxhdGVzL2NoYW5nZV9wYXNzd29yZC5odG1sJywge1xuICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgIGhhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7XG4gICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbCA9IG1vZGFsO1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RfYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsLnNob3coKTtcbiAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNoYW5nZV9wYXNzd29yZF9vayA9IGZ1bmN0aW9uKCl7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAvL2ZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJFbWFpbFwiLFwiZW1haWxcIiwkc2NvcGUubm9uYXV0aC5lbWFpbCkpO1xuICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkNvbnRyYXNlw7FhIGFjdHVhbFwiLFwibm90TnVsbFwiLCRzY29wZS5ub25hdXRoLm9sZFBhc3N3b3JkKSk7XG4gICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiTnVldmEgY29udHJhc2XDsWFcIixcIm5vdE51bGxcIiwkc2NvcGUubm9uYXV0aC5uZXdQYXNzd29yZCkpO1xuICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkNvbmZpcm1hciBudWV2YSBjb250cmFzZcOxYVwiLFwibm90TnVsbFwiLCRzY29wZS5ub25hdXRoLmNvbmZpcm1QYXNzd29yZCkpO1xuICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheV93aXRoX3R3b0ZpZWxkcyhcIk51ZXZhIGNvbnRyYXNlw7FhIHkgQ29uZmlybWFyIGNvbnRyYXNlw7FhXCIsXCJlcXVhbHNUb1wiLCRzY29wZS5ub25hdXRoLm5ld1Bhc3N3b3JkLCRzY29wZS5ub25hdXRoLmNvbmZpcm1QYXNzd29yZCkpO1xuICAgICAgaWYoRXJyb3JTZXJ2aWNlLmNoZWNrX2ZpZWxkcyhmaWVsZHMsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICBBdXRoU2VydmljZS5wYXNzd29yZF9jaGFuZ2UoVXNlclNlcnZpY2UuZW1haWwsJHNjb3BlLm5vbmF1dGgub2xkUGFzc3dvcmQsJHNjb3BlLm5vbmF1dGgubmV3UGFzc3dvcmQsJHNjb3BlLm5vbmF1dGguY29uZmlybVBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICBpZihyZXNwLmRhdGEubWVzc2FnZT09XCJQYXNzd29yZCBzdWNjZXNzZnVseSBjaGFuZ2VkXCIpe1xuICAgICAgICAgICAgVXNlclNlcnZpY2Uuc2F2ZV91c2VyX2RhdGEoVXNlclNlcnZpY2UubmFtZSwgVXNlclNlcnZpY2UuZW1haWwsICRzY29wZS5ub25hdXRoLm5ld1Bhc3N3b3JkLCBVc2VyU2VydmljZS5pZGVudGl0eV9kb2N1bWVudCwgVXNlclNlcnZpY2UucGhvbmUsIFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsKTtcbiAgICAgICAgICAgIERCU2VydmljZS5zYXZlVXNlcihVc2VyU2VydmljZS5uYW1lLFVzZXJTZXJ2aWNlLmVtYWlsLFVzZXJTZXJ2aWNlLnBhc3N3b3JkLFVzZXJTZXJ2aWNlLmlkZW50aXR5X2RvY3VtZW50LFVzZXJTZXJ2aWNlLnBob25lLFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsKTtcbiAgICAgICAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIEVycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2UoXCJlcnJvcl9jb250YWluZXJcIixcIlNlIGhhIHByb2R1Y2lkbyB1biBlcnJvciBhbCBjYW1iaWFyIHN1IGNsYXZlLCBwb3IgZmF2b3IgaW50ZW50ZSBtw6FzIHRhcmRlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkgPSBmdW5jdGlvbihuYW1lLHR5cGUsdmFsdWUpe1xuICAgICAgdmFyIGZpZWxkID0gbmV3IEFycmF5KCk7XG4gICAgICBmaWVsZC5uYW1lID0gbmFtZTtcbiAgICAgIGZpZWxkLnR5cGUgPSB0eXBlO1xuICAgICAgZmllbGQudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHJldHVybiBmaWVsZDtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheV93aXRoX3R3b0ZpZWxkcyA9IGZ1bmN0aW9uKG5hbWUsdHlwZSx2YWx1ZSxzZWNvbmRWYWx1ZSl7XG4gICAgICB2YXIgZmllbGQgPSBuZXcgQXJyYXkoKTtcbiAgICAgIGZpZWxkLm5hbWUgPSBuYW1lO1xuICAgICAgZmllbGQudHlwZSA9IHR5cGU7XG4gICAgICBmaWVsZC52YWx1ZSA9IHZhbHVlO1xuICAgICAgZmllbGQuc2Vjb25kVmFsdWUgPSBzZWNvbmRWYWx1ZTtcbiAgICAgIHJldHVybiBmaWVsZDtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmZpeF9mYl9pbWFnZV9saW5rID0gZnVuY3Rpb24odXJsKXtcbiAgICAgIGlmKHVybC5pbmRleE9mKFwiaHR0cDovL2dyYXBoLmZhY2Vib29rLmNvbVwiKSA+PSAwKXtcbiAgICAgICAgdmFyIHBhcnRzID0gdXJsLnNwbGl0KFwiaHR0cDovL2dyYXBoLmZhY2Vib29rLmNvbVwiKTtcbiAgICAgICAgdmFyIG5ld1VybCA9IFwiaHR0cDovL2dyYXBoLmZhY2Vib29rLmNvbVwiK3BhcnRzWzFdO1xuICAgICAgICByZXR1cm4gbmV3VXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVybDtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnNpZ25faW4gPSBmdW5jdGlvbihlbWFpbCwgcGFzc3dvcmQpe1xuICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJFbWFpbFwiLFwiZW1haWxcIixlbWFpbCkpO1xuICAgICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiQ29udHJhc2XDsWFcIixcIm5vdE51bGxcIixwYXNzd29yZCkpO1xuICAgICAgICBpZihFcnJvclNlcnZpY2UuY2hlY2tfZmllbGRzKGZpZWxkcyxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgQXV0aFNlcnZpY2Uuc2lnbl9pbihwYXNzd29yZCwgZW1haWwpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmh0dHBfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bChyZXNwLFwiZXJyb3JfY29udGFpbmVyXCIpKXtcbiAgICAgICAgICAgICAgcmVzcC5kYXRhLnBpY3R1cmVfdXJsID0gJHNjb3BlLmZpeF9mYl9pbWFnZV9saW5rKHJlc3AuZGF0YS5waWN0dXJlX3VybCk7XG4gICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnNhdmVfdXNlcl9kYXRhKHJlc3AuZGF0YS5uYW1lLCBlbWFpbCwgcGFzc3dvcmQsIHJlc3AuZGF0YS5pZGVudGl0eV9kb2N1bWVudCwgcmVzcC5kYXRhLnBob25lLCByZXNwLmRhdGEucGljdHVyZV91cmwpO1xuICAgICAgICAgICAgICBEQlNlcnZpY2Uuc2F2ZVVzZXIocmVzcC5kYXRhLm5hbWUsZW1haWwscGFzc3dvcmQscmVzcC5kYXRhLmlkZW50aXR5X2RvY3VtZW50LHJlc3AuZGF0YS5waG9uZSxyZXNwLmRhdGEucGljdHVyZV91cmwpO1xuICAgICAgICAgICAgICBpZihyZXNwLmRhdGEuZnJvbV9ib2R5KXtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5mcm9tX2JvZHkgPSByZXNwLmRhdGEuZnJvbV9ib2R5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vJHNjb3BlLnNldF91c2VyX3BpY3R1cmUoMSk7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VfbG9naW5fbW9kYWwoKTtcbiAgICAgICAgICAgICAgLy8kc2NvcGUuY2hlY2tfdXNlcl9sb2dnZWQoKTtcbiAgICAgICAgICAgICAgJHNjb3BlLnNldF91c2VyX3BpY3R1cmUoMSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgLy9hbGVydChcIkVycm9yIGVuIHNpZ25faW5cIik7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIEVycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2UoXCJlcnJvcl9jb250YWluZXJcIixyZXNwLnN0YXR1c1RleHQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuXG4gICAgICB9ZWxzZXtcbiAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJTaW4gY29uZXhpw7NuIGEgaW50ZXJuZXRcIixcIlBhcmEgaW5pY2lhciBzZXNpw7NuIGRlYmUgZXN0YXIgY29uZWN0YWRvIGEgaW50ZXJuZXRcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLnNpZ25faW5fYWpheCA9IGZ1bmN0aW9uKGVtYWlsLCBwYXNzd29yZCl7XG4gICAgICBBdXRoU2VydmljZS5zaWduX2luKHBhc3N3b3JkLCBlbWFpbCkudGhlbihmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIGlmKEVycm9yU2VydmljZS5odHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheChyZXNwKSl7XG4gICAgICAgICAgcmVzcC5kYXRhLnBpY3R1cmVfdXJsID0gJHNjb3BlLmZpeF9mYl9pbWFnZV9saW5rKHJlc3AuZGF0YS5waWN0dXJlX3VybCk7XG4gICAgICAgICAgVXNlclNlcnZpY2Uuc2F2ZV91c2VyX2RhdGEocmVzcC5kYXRhLm5hbWUsIGVtYWlsLCBwYXNzd29yZCwgcmVzcC5kYXRhLmlkZW50aXR5X2RvY3VtZW50LCByZXNwLmRhdGEucGhvbmUsIHJlc3AuZGF0YS5waWN0dXJlX3VybCk7XG4gICAgICAgICAgREJTZXJ2aWNlLnNhdmVVc2VyKHJlc3AuZGF0YS5uYW1lLGVtYWlsLHBhc3N3b3JkLHJlc3AuZGF0YS5pZGVudGl0eV9kb2N1bWVudCxyZXNwLmRhdGEucGhvbmUscmVzcC5kYXRhLnBpY3R1cmVfdXJsKTtcbiAgICAgICAgICBpZihyZXNwLmRhdGEuZnJvbV9ib2R5KXtcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmZyb21fYm9keSA9IHJlc3AuZGF0YS5mcm9tX2JvZHk7XG4gICAgICAgICAgfVxuICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDEpO1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICB9LCBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgLy9FcnJvclNlcnZpY2Uuc2hvd19lcnJvcl9tZXNzYWdlX3BvcHVwKHJlc3Auc3RhdHVzVGV4dCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnNpZ25fb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgIFVzZXJTZXJ2aWNlLmVyYXNlX3VzZXJfZGF0YSgpO1xuICAgICAgREJTZXJ2aWNlLmVyYXNlVXNlcigpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDApO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VyLW9wdGlvbnMtbWVudVwiKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO1xuICAgIH1cblxuICAgICRzY29wZS5zaG93X2VkaXRfcHJvZmlsZV9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvL0NhcmdhciBlbCBtb2RhbCBjb24gbGEgaW5mbyBkZWwgdXN1YXJpbyBsb2d1ZWFkbyB5IGNvbiBlbCBzdWJtaXQgYSBlZGl0X3Byb2ZpbGVfb2tcbiAgICAgICRzY29wZS5wcm9maWxlID0gbmV3IEFycmF5KCk7XG4gICAgICAkc2NvcGUucHJvZmlsZS5lbWFpbCA9IFVzZXJTZXJ2aWNlLmVtYWlsO1xuICAgICAgJHNjb3BlLnByb2ZpbGUucGFzc3dvcmQgPSBcIlwiO1xuICAgICAgJHNjb3BlLnByb2ZpbGUuZnVsbG5hbWUgPSBVc2VyU2VydmljZS5uYW1lO1xuICAgICAgJHNjb3BlLnByb2ZpbGUubmV3X2VtYWlsID0gVXNlclNlcnZpY2UuZW1haWw7XG4gICAgICAkc2NvcGUucHJvZmlsZS5pZF9kb2MgPSBVc2VyU2VydmljZS5pZGVudGl0eV9kb2N1bWVudDtcbiAgICAgICRzY29wZS5wcm9maWxlLnRlbGVwaG9uZSA9IFVzZXJTZXJ2aWNlLnBob25lO1xuICAgICAgJHNjb3BlLnByb2ZpbGUucGljdHVyZV91cmwgPSBudWxsO1xuICAgICAgaWYoVXNlclNlcnZpY2UucGljdHVyZV91cmwhPW51bGwpe1xuICAgICAgICAkc2NvcGUuYWN0dWFsX3Bob3RvID0gVXNlclNlcnZpY2UucGljdHVyZV91cmw7XG4gICAgICAgIGlmKCRzY29wZS5hY3R1YWxfcGhvdG89PVwidXJsKC4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nKVwiKXtcbiAgICAgICAgICAkc2NvcGUuYWN0dWFsX3Bob3RvID0gXCIuL2ltZy9pY29uLXVzZXItYW5vbnltb3VzLnBuZ1wiO1xuICAgICAgICB9XG4gICAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCd0ZW1wbGF0ZXMvZWRpdF9wcm9maWxlX3dpdGhfcGhvdG8uaHRtbCcsIHtcbiAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICBoYXJkd2FyZUJhY2tCdXR0b25DbG9zZTogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCcsXG4gICAgICAgICAgICAvL2ZvY3VzRmlyc3RJbnB1dDogdHJ1ZVxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VyLW9wdGlvbnMtbWVudVwiKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO1xuICAgICAgICAgICAgICBNb2RhbFNlcnZpY2UuYWN0aXZlTW9kYWwgPSBtb2RhbDtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgJHNjb3BlLmFjdHVhbF9waG90byA9IG51bGw7XG4gICAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCd0ZW1wbGF0ZXMvZWRpdF9wcm9maWxlLmh0bWwnLCB7XG4gICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgaGFyZHdhcmVCYWNrQnV0dG9uQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnLFxuICAgICAgICAgICAgLy9mb2N1c0ZpcnN0SW5wdXQ6IHRydWVcbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG1vZGFsKSB7XG4gICAgICAgICAgICAgICRzY29wZS5oaWRlX3NwZWNpYWxfZGl2cygpO1xuICAgICAgICAgICAgICBNb2RhbFNlcnZpY2UuYWN0aXZlTW9kYWwgPSBtb2RhbDtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmNsb3NlX2VkaXRfcHJvZmlsZV9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvL0NhcmdhciBlbCBtb2RhbCBjb24gbGEgaW5mbyBkZWwgdXN1YXJpbyBsb2d1ZWFkbyB5IGNvbiBlbCBzdWJtaXQgYSB1cGRhdGVfdXNlclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgIH1cblxuICAgICRzY29wZS5lZGl0X3Byb2ZpbGVfb2sgPSBmdW5jdGlvbigpe1xuICAgICAgJHNjb3BlLmVkaXRfcHJvZmlsZShVc2VyU2VydmljZS5lbWFpbCxVc2VyU2VydmljZS5wYXNzd29yZCwkc2NvcGUucHJvZmlsZS5mdWxsbmFtZSwkc2NvcGUucHJvZmlsZS5uZXdfZW1haWwsJHNjb3BlLnByb2ZpbGUuaWRfZG9jLCRzY29wZS5wcm9maWxlLnRlbGVwaG9uZSwkc2NvcGUucHJvZmlsZS5waWN0dXJlX3VybCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmVkaXRfcHJvZmlsZSA9IGZ1bmN0aW9uKGVtYWlsLHBhc3N3b3JkLCBmdWxsbmFtZSwgbmV3X2VtYWlsLCBpZF9kb2MsIHVzZXJfcGhvbmUsIHVzZXJfcGljdHVyZV91cmwpe1xuICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDb3JyZW8gZWxlY3Ryw7NuaWNvXCIsXCJlbWFpbFwiLG5ld19lbWFpbCkpO1xuICAgICAgICAvL2ZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDb250cmFzZcOxYVwiLFwibm90TnVsbFwiLHBhc3N3b3JkKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDw6lkdWxhIGRlIElkZW50aWRhZFwiLFwiaWRkb2NfdXlcIixpZF9kb2MpKTtcbiAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIk5vbWJyZSB5IGFwZWxsaWRvXCIsXCJ0d29fd29yZHNcIixmdWxsbmFtZSkpO1xuICAgICAgICBpZihFcnJvclNlcnZpY2UuY2hlY2tfZmllbGRzKGZpZWxkcyxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgdmFyIGVkaXRfcmVxdWVzdCA9IEF1dGhTZXJ2aWNlLmVkaXRfdXNlcihlbWFpbCxwYXNzd29yZCwgZnVsbG5hbWUsIG5ld19lbWFpbCwgaWRfZG9jLCB1c2VyX3Bob25lLCB1c2VyX3BpY3R1cmVfdXJsKTtcbiAgICAgICAgICBpZih1c2VyX3BpY3R1cmVfdXJsPT1udWxsIHx8IHVzZXJfcGljdHVyZV91cmw9PVwiXCIpe1xuICAgICAgICAgICAgZWRpdF9yZXF1ZXN0LnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLGNvbmZpZyl7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VudF9sYWJlbFwiKS5pbm5lckhUTUwgPSBcIkVudmlhZG86IDEwMCVcIjtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmh0dHBfZGF0YV9yZXNwb25zZV9pc19zdWNjZXNzZnVsKGRhdGEsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnNhdmVfdXNlcl9kYXRhKGRhdGEubmFtZSwgZGF0YS5lbWFpbCwgcGFzc3dvcmQsIGRhdGEuaWRlbnRpdHlfZG9jdW1lbnQsIGRhdGEucGhvbmUsIGRhdGEucGljdHVyZV91cmwpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZV9lZGl0X3Byb2ZpbGVfbW9kYWwoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tfdXNlcl9sb2dnZWQoKTtcbiAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLGNvbmZpZyl7XG4gICAgICAgICAgICAgIEVycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2UoXCJlcnJvcl9jb250YWluZXJcIixzdGF0dXMpO1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBlZGl0X3JlcXVlc3QudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC5yZXNwb25zZSk7XG4gICAgICAgICAgICAgIGlmKEVycm9yU2VydmljZS5odHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bChkYXRhLFwiZXJyb3JfY29udGFpbmVyXCIpKXtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5zYXZlX3VzZXJfZGF0YShkYXRhLm5hbWUsIGRhdGEuZW1haWwsIHBhc3N3b3JkLCBkYXRhLmlkZW50aXR5X2RvY3VtZW50LCBkYXRhLnBob25lLCBkYXRhLnBpY3R1cmVfdXJsKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VfZWRpdF9wcm9maWxlX21vZGFsKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrX3VzZXJfbG9nZ2VkKCk7XG4gICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICB2YXIgYWxlcnQgPSBcIkPDs2RpZ286IFwiICsgZXJyb3IuY29kZTtcbiAgICAgICAgICAgICAgYWxlcnQgPSBhbGVydCArIFwiIE9yaWdlbjogXCIgKyBlcnJvci5zb3VyY2U7XG4gICAgICAgICAgICAgIGFsZXJ0ID0gYWxlcnQgKyBcIiBEZXN0aW5vOiBcIiArIGVycm9yLnRhcmdldDtcbiAgICAgICAgICAgICAgYWxlcnQgPSBhbGVydCArIFwiIGh0dHBfc3RhdHVzOiBcIiArIGVycm9yLmh0dHBfc3RhdHVzO1xuICAgICAgICAgICAgICBhbGVydCA9IGFsZXJ0ICsgXCIgQm9keTogXCIgKyBlcnJvci5ib2R5O1xuICAgICAgICAgICAgICBhbGVydCA9IGFsZXJ0ICsgXCIgRXhjZXB0aW9uOiBcIiArIGVycm9yLmV4Y2VwdGlvbjtcbiAgICAgICAgICAgICAgRXJyb3JTZXJ2aWNlLnNob3dfZXJyb3JfbWVzc2FnZShcImVycm9yX2NvbnRhaW5lclwiLFwiSHVibyB1biBlcnJvciBlbiBlbCBlbnbDrW86IFwiICsgYWxlcnQpO1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUudXBsb2FkUHJvZ3Jlc3MgPSAocHJvZ3Jlc3MubG9hZGVkIC8gcHJvZ3Jlc3MudG90YWwpICogMTAwO1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZW50X2xhYmVsXCIpLmlubmVySFRNTCA9IFwiRW52aWFkbzogXCIgKyBNYXRoLnJvdW5kKCRzY29wZS51cGxvYWRQcm9ncmVzcykgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydChcIlNpbiBjb25leGnDs24gYSBpbnRlcm5ldFwiLFwiUGFyYSBlZGl0YXIgc3UgcGVyZmlsIGRlYmUgZXN0YXIgY29uZWN0YWRvIGEgaW50ZXJuZXRcIik7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAkc2NvcGUuc2hvd19sb2dpbl9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvL0NhcmdhciBlbCBtb2RhbCBjb24gZWwgZm9ybSBkZSBsb2dpbiB5IGFoaSBsbGFtYSBhbCBzaWduX2luXG4gICAgICAkc2NvcGUubm9uYXV0aCA9IG5ldyBBcnJheSgpO1xuICAgICAgJHNjb3BlLm5vbmF1dGguZW1haWwgPSBcIlwiO1xuICAgICAgJHNjb3BlLm5vbmF1dGgucGFzc3dvcmQgPSBcIlwiO1xuICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCd0ZW1wbGF0ZXMvbG9nX2luLmh0bWwnLCB7XG4gICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICBoYXJkd2FyZUJhY2tCdXR0b25DbG9zZTogZmFsc2UsXG4gICAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnLFxuICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICRzY29wZS5oaWRlX3NwZWNpYWxfZGl2cygpO1xuICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RfYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5sb2dpbl9vayA9IGZ1bmN0aW9uKCl7XG4gICAgICAkc2NvcGUuc2lnbl9pbigkc2NvcGUubm9uYXV0aC5lbWFpbCwkc2NvcGUubm9uYXV0aC5wYXNzd29yZCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmNsb3NlX2xvZ2luX21vZGFsID0gZnVuY3Rpb24oKXtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICB9XG5cblxuXG4gICAgJHNjb3BlLnNob3dfc2lnbl91cF9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvL2NhcmdhciBlbCBtb2RhbCBjb24gZWwgZm9ybSBkZSBzaWduX3VwIHkgZGUgYWhpIGxsYW1hciBhbCBzaWduX3VwXG4gICAgICAkc2NvcGUubmV3dXNlciA9IG5ldyBBcnJheSgpO1xuICAgICAgJHNjb3BlLm5ld3VzZXIuZW1haWwgPSBcIlwiO1xuICAgICAgJHNjb3BlLm5ld3VzZXIucGFzc3dvcmQgPSBcIlwiO1xuICAgICAgJHNjb3BlLm5ld3VzZXIuZnVsbG5hbWUgPSBcIlwiO1xuICAgICAgJHNjb3BlLm5ld3VzZXIuaWRfZG9jID0gXCJcIjtcbiAgICAgICRzY29wZS5uZXd1c2VyLnRlbGVwaG9uZSA9IFwiXCI7XG4gICAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9zaWduX3VwLmh0bWwnLCB7XG4gICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICBoYXJkd2FyZUJhY2tCdXR0b25DbG9zZTogZmFsc2UsXG4gICAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnLFxuICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICRzY29wZS5oaWRlX3NwZWNpYWxfZGl2cygpO1xuICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RfYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5jbG9zZV9zaWduX3VwX21vZGFsID0gZnVuY3Rpb24oKXtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuc2lnbl91cCA9IGZ1bmN0aW9uKGVtYWlsLGZ1bGxuYW1lLHBhc3N3b3JkLCBpZF9kb2MsIHVzZXJfcGhvbmUpe1xuICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDb3JyZW8gZWxlY3Ryw7NuaWNvXCIsXCJlbWFpbFwiLGVtYWlsKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDb250cmFzZcOxYVwiLFwibm90TnVsbFwiLHBhc3N3b3JkKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDw6lkdWxhIGRlIElkZW50aWRhZFwiLFwiaWRkb2NfdXlcIixpZF9kb2MpKTtcbiAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIk5vbWJyZSB5IGFwZWxsaWRvXCIsXCJ0d29fd29yZHNcIixmdWxsbmFtZSkpO1xuICAgICAgICBpZihFcnJvclNlcnZpY2UuY2hlY2tfZmllbGRzKGZpZWxkcyxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgQXV0aFNlcnZpY2UuY3JlYXRlX3VzZXIoZW1haWwsZnVsbG5hbWUscGFzc3dvcmQsIGlkX2RvYywgdXNlcl9waG9uZSkudGhlbihmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgICAgICBpZihFcnJvclNlcnZpY2UuaHR0cF9yZXNwb25zZV9pc19zdWNjZXNzZnVsKHJlc3AsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICAgICAgICBVc2VyU2VydmljZS5zYXZlX3VzZXJfZGF0YShmdWxsbmFtZSwgZW1haWwsIHBhc3N3b3JkLCBpZF9kb2MsIHVzZXJfcGhvbmUsbnVsbCk7XG4gICAgICAgICAgICAgIC8vJHNjb3BlLnNldF91c2VyX3BpY3R1cmUoMSk7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAkc2NvcGUuY2xvc2Vfc2lnbl91cF9tb2RhbCgpO1xuICAgICAgICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgICAgIHRpdGxlOiBcIlVzdWFyaW8gY3JlYWRvIGNvbiDDqXhpdG9cIixcbiAgICAgICAgICAgICAgIHRlbXBsYXRlOiByZXNwLmRhdGEubWVzc2FnZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYWxlcnRQb3B1cC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgLy8kc2NvcGUuY2hlY2tfdXNlcl9sb2dnZWQoKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIEVycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2UoXCJlcnJvcl9jb250YWluZXJcIixyZXNwLnN0YXR1c1RleHQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgIFBvcFVwU2VydmljZS5zaG93X2FsZXJ0KFwiU2luIGNvbmV4acOzbiBhIGludGVybmV0XCIsXCJQYXJhIGluaWNpYXIgcmVnaXN0cmFyc2UgZGViZSBlc3RhciBjb25lY3RhZG8gYSBpbnRlcm5ldFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUuc2lnbl91cF9vayA9IGZ1bmN0aW9uKCl7XG4gICAgICAkc2NvcGUuc2lnbl91cCgkc2NvcGUubmV3dXNlci5lbWFpbCwkc2NvcGUubmV3dXNlci5mdWxsbmFtZSwkc2NvcGUubmV3dXNlci5wYXNzd29yZCwkc2NvcGUubmV3dXNlci5pZF9kb2MsJHNjb3BlLm5ld3VzZXIudGVsZXBob25lKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuY2hlY2tfdXNlcl9sb2dnZWQgPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIG5hbWUgPSBVc2VyU2VydmljZS5uYW1lO1xuICAgICAgaWYobmFtZT09bnVsbCl7XG4gICAgICAgICAgLy9TaSBIYXkgdW4gdXN1YXJpbyBndWFyZGFkb1xuICAgICAgICAgIHZhciB1c2VyID0gREJTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgICB1c2VyLnRoZW4oZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgaWYoZG9jLm5hbWUhPW51bGwgJiYgZG9jLm5hbWUhPVwiXCIgJiYgZG9jLm5hbWUhPVwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICAkc2NvcGUuc2lnbl9pbl9hamF4KGRvYy5lbWFpbCwgZG9jLnBhc3N3b3JkKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAkc2NvcGUuc2V0X3VzZXJfcGljdHVyZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2V0X3VzZXJfcGljdHVyZSgwKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL0VzdMOhIGxvZ3VlYWRvXG4gICAgICAgIGlmKFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsPT1udWxsIHx8IFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsPT1cIlwiKXtcbiAgICAgICAgICAvL0VsIHVzdWFyaW8gbm8gdGllbmUgZm90byBkZWZpbmlkYVxuICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDApO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAvL0VsIHVzdWFyaW8gdGllbmUgZm90b1xuICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLnNldF9vZmZsaW5lX3VzZXIgPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIG5hbWUgPSBVc2VyU2VydmljZS5uYW1lO1xuICAgICAgaWYobmFtZT09bnVsbCl7XG4gICAgICAgICAgLy9TaSBIYXkgdW4gdXN1YXJpbyBndWFyZGFkb1xuICAgICAgICAgIHZhciB1c2VyID0gREJTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgICB1c2VyLnRoZW4oZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgaWYoZG9jLm5hbWUhPW51bGwgJiYgZG9jLm5hbWUhPVwiXCIgJiYgZG9jLm5hbWUhPVwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICAvLyRzY29wZS5zaWduX2luX2FqYXgoZG9jLmVtYWlsLCBkb2MucGFzc3dvcmQpO1xuICAgICAgICAgICAgICBVc2VyU2VydmljZS5zYXZlX3VzZXJfZGF0YShkb2MubmFtZSwgZG9jLmVtYWlsLCBkb2MucGFzc3dvcmQsIGRvYy5pZGVudGl0eV9kb2N1bWVudCwgZG9jLnBob25lLCBkb2MucGljdHVyZV91cmwpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDApO1xuICAgICAgICAgIH0pO1xuICAgICAgfWVsc2V7XG4gICAgICAgIC8vRXN0w6EgbG9ndWVhZG9cbiAgICAgICAgaWYoVXNlclNlcnZpY2UucGljdHVyZV91cmw9PW51bGwgfHwgVXNlclNlcnZpY2UucGljdHVyZV91cmw9PVwiXCIpe1xuICAgICAgICAgIC8vRWwgdXN1YXJpbyBubyB0aWVuZSBmb3RvIGRlZmluaWRhXG4gICAgICAgICAgJHNjb3BlLnNldF91c2VyX3BpY3R1cmUoMCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIC8vRWwgdXN1YXJpbyB0aWVuZSBmb3RvXG4gICAgICAgICAgJHNjb3BlLnNldF91c2VyX3BpY3R1cmUoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgJHNjb3BlLnNldF91c2VyX3BpY3R1cmUgPSBmdW5jdGlvbihoYXNQaG90byl7XG4gICAgICB2YXIgcGljdHVyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlcl9waWN0dXJlXCIpO1xuICAgICAgaWYoaGFzUGhvdG89PTApe1xuICAgICAgICAvL3BpY3R1cmUuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoLi9pbWcvaWNvbi11c2VyLWFub255bW91cy5wbmcpXCI7XG4gICAgICAgICRzY29wZS51c2VyX2NhY2hlZF9pbWFnZT1cIi4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nXCI7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgaWYoVXNlclNlcnZpY2UucGljdHVyZV91cmwhPW51bGwgJiYgVXNlclNlcnZpY2UucGljdHVyZV91cmwhPVwiXCIpe1xuICAgICAgICAgIC8vYWxlcnQoVXNlclNlcnZpY2UucGljdHVyZV91cmwpO1xuICAgICAgICAgICRzY29wZS51c2VyX2NhY2hlZF9pbWFnZT1Vc2VyU2VydmljZS5waWN0dXJlX3VybDtcbiAgICAgICAgICAvL3BpY3R1cmUuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoXCIgKyBVc2VyU2VydmljZS5waWN0dXJlX3VybCArIFwiKVwiO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAvL3BpY3R1cmUuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoLi9pbWcvaWNvbi11c2VyLWFub255bW91cy5wbmcpXCI7XG4gICAgICAgICAgJHNjb3BlLnVzZXJfY2FjaGVkX2ltYWdlPVwiLi9pbWcvaWNvbi11c2VyLWFub255bW91cy5wbmdcIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgJHNjb3BlLmZpbmRfbWUgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuc2V0X2FjdGl2ZV9vcHRpb24oXCJidXR0b24tZmluZC1tZVwiKTtcbiAgICAgICAgJHNjb3BlLmhpZGVfc3BlY2lhbF9kaXZzKCk7XG4gICAgICAgIHZhciBwb3NPcHRpb25zID0ge3RpbWVvdXQ6IDEwMDAwLCBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWV9O1xuICAgICAgICAkY29yZG92YUdlb2xvY2F0aW9uXG4gICAgICAgICAgLmdldEN1cnJlbnRQb3NpdGlvbihwb3NPcHRpb25zKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxhdCAgPSBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubG5nID0gcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZTtcbiAgICAgICAgICAgICAgICBMb2NhdGlvbnNTZXJ2aWNlLnNhdmVfbmV3X3JlcG9ydF9wb3NpdGlvbihwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUscG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLnpvb20gPSAxODtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLnpvb20gPSAxNjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5tYXJrZXJzLm5vdyA9IHtcbiAgICAgICAgICAgICAgICAgIGxhdDpwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICBsbmc6cG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiPHAgYWxpZ249J2NlbnRlcic+VGUgZW5jdWVudHJhcyBhcXXDrSA8YnIvPiA8YSBuZy1jbGljaz0nbmV3X3JlcG9ydCgxKTsnPkluaWNpYXIgcmVwb3J0ZSBlbiB0dSBwb3NpY2nDs24gYWN0dWFsPC9hPjwvcD5cIixcbiAgICAgICAgICAgICAgICAgIGZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGdldE1lc3NhZ2VTY29wZTogZnVuY3Rpb24oKSB7IHJldHVybiAkc2NvcGU7IH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vJHNjb3BlLm1hcC5tYXJrZXJzLm5vdy5vcGVuUG9wdXAoKTtcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiTG9jYXRpb24gZXJyb3IhXCIpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAvL0Vycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2VfcG9wdXAoXCJObyBoZW1vcyBwb2RpZG8gZ2VvbG9jYWxpemFybG8uIMK/VGFsIHZleiBvbHZpZMOzIGhhYmlsaXRhciBsb3Mgc2VydmljaW9zIGRlIGxvY2FsaXphY2nDs24gZW4gc3UgZGlzcG9zaXRpdm8/XCIpXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW5Db3VuY2lsU2VsZWN0b3IoKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9O1xuXG4gICAgICB2YXIgTG9jYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCAhKHRoaXMgaW5zdGFuY2VvZiBMb2NhdGlvbikgKSByZXR1cm4gbmV3IExvY2F0aW9uKCk7XG4gICAgICAgIHRoaXMubGF0ICA9IFwiXCI7XG4gICAgICAgIHRoaXMubG5nICA9IFwiXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XG4gICAgICB9O1xuXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgdXNlciBsb25nLXByZXNzaW5nIG9uIG1hcCB0byBhZGQgbmV3IGxvY2F0aW9uXG4gICAgICAgKi9cbiAgICAgICRzY29wZS4kb24oJ2xlYWZsZXREaXJlY3RpdmVNYXAuY29udGV4dG1lbnUnLCBmdW5jdGlvbihldmVudCwgbG9jYXRpb25FdmVudCl7XG4gICAgICAgICRzY29wZS5oaWRlX3NwZWNpYWxfZGl2cygpO1xuICAgICAgICBjb25zb2xlLmxvZyhsb2NhdGlvbkV2ZW50LmxlYWZsZXRFdmVudC5sYXRsbmcubGF0KTtcbiAgICAgICAgY29uc29sZS5sb2cobG9jYXRpb25FdmVudC5sZWFmbGV0RXZlbnQubGF0bG5nLmxuZyk7XG4gICAgICAgIExvY2F0aW9uc1NlcnZpY2Uuc2F2ZV9uZXdfcmVwb3J0X3Bvc2l0aW9uKGxvY2F0aW9uRXZlbnQubGVhZmxldEV2ZW50LmxhdGxuZy5sYXQsbG9jYXRpb25FdmVudC5sZWFmbGV0RXZlbnQubGF0bG5nLmxuZyk7XG4gICAgICAgICRzY29wZS5uZXdfcmVwb3J0KDEpO1xuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS5zZWxlY3RfaW1tID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJHNjb3BlLmNsb3NlX2NvdW5jaWxfbW9kYWwoKTtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5zZWxlY3RDb3VuY2lsKFwiMjg5XCIpO1xuICAgICAgICBNYXBTZXJ2aWNlLmNlbnRlck1hcE9uQ29vcmRzKC0zNC45MDExMTMsIC01Ni4xNjQ1MzEsIDE0KTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLnNlbGVjdF9pZHIgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuY2xvc2VfY291bmNpbF9tb2RhbCgpO1xuICAgICAgICBMb2NhdGlvbnNTZXJ2aWNlLnNlbGVjdENvdW5jaWwoXCIyNTVcIik7XG4gICAgICAgIE1hcFNlcnZpY2UuY2VudGVyTWFwT25Db29yZHMoLTMwLjg5OTc0NjksIC01NS41NDM0Njg2LCAxNCk7XG4gICAgICB9XG5cbiAgICAgICRzY29wZS5zZWxlY3RfaXJuID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJHNjb3BlLmNsb3NlX2NvdW5jaWxfbW9kYWwoKTtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5zZWxlY3RDb3VuY2lsKFwiMzYwXCIpO1xuICAgICAgICBNYXBTZXJ2aWNlLmNlbnRlck1hcE9uQ29vcmRzKC0zMy4xMjQ5NzIsIC01OC4zMDM3MzYsIDE0KTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLm9wZW5Db3VuY2lsU2VsZWN0b3IgPSBmdW5jdGlvbigpe1xuICAgICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9jb3VuY2lsX3NlbGVjdG9yX3dpdGhfYmFja19idXR0b24uaHRtbCcsIHtcbiAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgIGhhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCcsXG4gICAgICAgICAgLy9mb2N1c0ZpcnN0SW5wdXQ6IHRydWVcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICBMb2NhdGlvbnNTZXJ2aWNlLmNvdW5jaWxfbW9kYWwuc2hvdygpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgICRzY29wZS5jbG9zZV9jb3VuY2lsX21vZGFsID0gZnVuY3Rpb24oKXtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsLmhpZGUoKTtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gIH1cbl0pO1xuIiwicG1iX2ltLmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1BNQkN0cmwnLFxuWyckc2NvcGUnLFxuJyRzdGF0ZScsXG4nbGVhZmxldERhdGEnLFxuJ1BNQlNlcnZpY2UnLFxuJ1JlcG9ydFNlcnZpY2UnLFxuJ2xvY2F0aW9uQVBJJyxcbidNYXBTZXJ2aWNlJyxcbidfJyxcbidMb2FkZXInLFxuJ0xvY2F0aW9uc1NlcnZpY2UnLFxuJyRpb25pY01vZGFsJyxcbmZ1bmN0aW9uKCRzY29wZSxcbiAgJHN0YXRlLFxuICBsZWFmbGV0RGF0YSxcbiAgUE1CU2VydmljZSxcbiAgUmVwb3J0U2VydmljZSxcbiAgbG9jYXRpb25BUEksXG4gIE1hcFNlcnZpY2UsXG4gIF8sXG4gIExvYWRlcixcbiAgTG9jYXRpb25zU2VydmljZSxcbiAgJGlvbmljTW9kYWwpIHtcblxuXG4gICRzY29wZS5yZXBvcnRCdXR0b24gPSB7XG4gICAgdGV4dDogXCJSZXBvcnRhclwiLFxuICAgIHN0YXRlOiBcInVuQ29uZmlybWVkXCJcbiAgfTtcblxuICAvLyRzY29wZS4kb24oJyRpb25pY1ZpZXcuYWZ0ZXJFbnRlcicsIGZ1bmN0aW9uKCl7IC8vVGhpcyBpcyBmaXJlZCB0d2ljZSBpbiBhIHJvd1xuICAkc2NvcGUuJG9uKFwiJGlvbmljVmlldy5hZnRlckVudGVyXCIsIGZ1bmN0aW9uKCkge1xuICAgIC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB2YXIgbWFwID0gbGVhZmxldERhdGEuZ2V0TWFwKCk7XG4gICAgaWYoTG9jYXRpb25zU2VydmljZS5uZXdfcmVwb3J0X2xhdCE9XCJcIil7XG4gICAgICBNYXBTZXJ2aWNlLmNlbnRlck1hcE9uQ29vcmRzKExvY2F0aW9uc1NlcnZpY2UubmV3X3JlcG9ydF9sYXQsIExvY2F0aW9uc1NlcnZpY2UubmV3X3JlcG9ydF9sbmcsIDE2KTtcbiAgICB9ZWxzZSBpZihMb2NhdGlvbnNTZXJ2aWNlLmluaXRpYWxfbGF0IT1cIlwiKXtcbiAgICAgIE1hcFNlcnZpY2UuY2VudGVyTWFwT25Db29yZHMoTG9jYXRpb25zU2VydmljZS5pbml0aWFsX2xhdCwgTG9jYXRpb25zU2VydmljZS5pbml0aWFsX2xuZywgMTYpO1xuICAgIH1lbHNle1xuICAgICAgLy9NYXBTZXJ2aWNlLmNlbnRlck1hcE9uQ29vcmRzKC0zNC45MDExMTMsIC01Ni4xNjQ1MzEsIDE0KTtcbiAgICAgICRzY29wZS5vcGVuQ291bmNpbFNlbGVjdG9yKCk7XG4gICAgfVxuICB9KTtcblxuICAkc2NvcGUuc2VsZWN0X2ltbSA9IGZ1bmN0aW9uKCl7XG4gICAgJHNjb3BlLmNsb3NlX2NvdW5jaWxfbW9kYWwoKTtcbiAgICBMb2NhdGlvbnNTZXJ2aWNlLnNlbGVjdENvdW5jaWwoXCIyODlcIik7XG4gICAgTWFwU2VydmljZS5jZW50ZXJNYXBPbkNvb3JkcygtMzQuOTAxMTEzLCAtNTYuMTY0NTMxLCAxNCk7XG4gIH1cblxuICAkc2NvcGUuc2VsZWN0X2lkciA9IGZ1bmN0aW9uKCl7XG4gICAgJHNjb3BlLmNsb3NlX2NvdW5jaWxfbW9kYWwoKTtcbiAgICBMb2NhdGlvbnNTZXJ2aWNlLnNlbGVjdENvdW5jaWwoXCIyNTVcIik7XG4gICAgTWFwU2VydmljZS5jZW50ZXJNYXBPbkNvb3JkcygtMzAuODk5NzQ2OSwgLTU1LjU0MzQ2ODYsIDE0KTtcbiAgfVxuXG4gICRzY29wZS5zZWxlY3RfaXJuID0gZnVuY3Rpb24oKXtcbiAgICAkc2NvcGUuY2xvc2VfY291bmNpbF9tb2RhbCgpO1xuICAgIExvY2F0aW9uc1NlcnZpY2Uuc2VsZWN0Q291bmNpbChcIjM2MFwiKTtcbiAgICBNYXBTZXJ2aWNlLmNlbnRlck1hcE9uQ29vcmRzKC0zMy4xMjQ5NzIsIC01OC4zMDM3MzYsIDE0KTtcbiAgfVxuXG4gICRzY29wZS5vcGVuQ291bmNpbFNlbGVjdG9yID0gZnVuY3Rpb24oKXtcbiAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9jb3VuY2lsX3NlbGVjdG9yX3dpdGhfYmFja19idXR0b24uaHRtbCcsIHtcbiAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICBoYXJkd2FyZUJhY2tCdXR0b25DbG9zZTogZmFsc2UsXG4gICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCcsXG4gICAgICAvL2ZvY3VzRmlyc3RJbnB1dDogdHJ1ZVxuICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsID0gbW9kYWw7XG4gICAgICAgIExvY2F0aW9uc1NlcnZpY2UuY291bmNpbF9tb2RhbC5zaG93KCkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gIH1cblxuICAkc2NvcGUuY2xvc2VfY291bmNpbF9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsLmhpZGUoKTtcbiAgICBMb2NhdGlvbnNTZXJ2aWNlLmNvdW5jaWxfbW9kYWwucmVtb3ZlKCk7XG4gIH1cblxuXG4gIC8qKi9cblxuICAkc2NvcGUuc2VhcmNoTW9kZSA9IFwiY2FsbGUubHVnYXJcIjtcbiAgJHNjb3BlLmxvY2F0aW9uID17Y2FsbGU6bnVsbCxlc3F1aW5hOm51bGwsbHVnYXI6bnVsbH07XG5cblxuICAvL0F1dG8gY29tcGxldGVcblxuXG4gIHZhciBsb2NhdGlvbkdlb21QYXJhbXMgPXt0aXBvOm51bGwscGF0aFBhcmFtczpbXX07XG4gICRzY29wZS4kb24oXCIkc3RhdGVDaGFuZ2VTdWNjZXNzXCIsIGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5pb25BdXRvY29tcGxldGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJpb24tYXV0b2NvbXBsZXRlXCIpKTtcbiAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KCRzY29wZS5pb25BdXRvY29tcGxldGVFbGVtZW50KSk7XG4gICAgJHNjb3BlLmlvbkF1dG9jb21wbGV0ZUVsZW1lbnQuYmluZCgndG91Y2hlbmQgY2xpY2sgZm9jdXMnLCAkc2NvcGUub25DbGljayk7XG4gIH0pO1xuXG5cbiAgJHNjb3BlLmluaXRSZXBvcnQgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBfcGluLCBfcGluSWNvbiA9IEwuaWNvbih7XG4gICAgICBpY29uVXJsOiAnaW1nL3BpbkB4Mi5wbmcnLFxuICAgICAgaWNvblNpemU6IFs3MCwgMTEwXSwgLy8gc2l6ZSBvZiB0aGUgaWNvblxuICAgICAgaWNvbkFuY2hvcjogWy0xOCwgNTVdLCAvLyBwb2ludCBvZiB0aGUgaWNvbiB3aGljaCB3aWxsIGNvcnJlc3BvbmQgdG8gbWFya2VyJ3MgbG9jYXRpb25cbiAgICB9KTtcblxuICAgIGlmICgkc2NvcGUucmVwb3J0QnV0dG9uLnN0YXRlID09IFwidW5Db25maXJtZWRcIikge1xuXG4gICAgICAkc2NvcGUucmVwb3J0QnV0dG9uLnRleHQgPSBcIkNvbmZpcm1hclwiO1xuICAgICAgJHNjb3BlLnJlcG9ydEJ1dHRvbi5zdGF0ZSA9IFwiYWJvdXQyQ29uZmlybVwiO1xuXG5cbiAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24obWFwKSB7XG4gICAgICAgIF9waW4gPSBuZXcgTC5tYXJrZXIobWFwLmdldENlbnRlcigpLCB7XG4gICAgICAgICAgaWNvbjogX3Bpbkljb24sXG4gICAgICAgICAgY2xpY2thYmxlOiBmYWxzZVxuICAgICAgICB9KS5hZGRUbyhtYXApO1xuXG4gICAgICAgIFJlcG9ydFNlcnZpY2UuX25ldygpO1xuICAgICAgICBSZXBvcnRTZXJ2aWNlLmN1cnJlbnQuc2V0TGF0TG5nKG1hcC5nZXRDZW50ZXIoKSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmN1cnJlbnRSZXBvcnQpKTtcblxuICAgICAgICAkc2NvcGUuaW9uQXV0b2NvbXBsZXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaW9uLWF1dG9jb21wbGV0ZVwiKSk7XG4gICAgICAgICRzY29wZS5pb25BdXRvY29tcGxldGVFbGVtZW50LmJpbmQoJ3RvdWNoZW5kIGNsaWNrIGZvY3VzJywgJHNjb3BlLm9uQ2xpY2spO1xuXG5cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiY3VycmVudFJlcG9ydCA9XCIgKyBKU09OLnN0cmluZ2lmeSgkc2NvcGUuY3VycmVudFJlcG9ydCkpO1xuICAgIH1cblxuICB9O1xuXG4gICRzY29wZS5pc051bWVyaWMgPSBmdW5jdGlvbihuKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbiAgfTtcblxuICAkc2NvcGUuc2VhcmNoTG9jYXRpb24gPSBmdW5jdGlvbihxdWVyeSkge1xuICAgIHZhciBwcm9taXNlU2VhcmNoO1xuICAgIGlmIChxdWVyeSAmJiBxdWVyeS5sZW5ndGg+PTIpIHtcbiAgICAgIGlmICgkc2NvcGUuc2VhcmNoTW9kZSA9PSBcImNhbGxlLmx1Z2FyXCIpIHtcbiAgICAgICAgcHJvbWlzZVNlYXJjaCA9IGxvY2F0aW9uQVBJLnNlYXJjaExvY2F0aW9uQnlTdHIocXVlcnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImJ1c2NhbmRvIGNhbGxlL1wiKyRzY29wZS5zZWxlY3RlZEl0ZW0uY29kaWdvK1wiZXNxdWluYSA9IFwiICsgcXVlcnkpO1xuICAgICAgICBpZigkc2NvcGUuaXNOdW1lcmljKHF1ZXJ5LnRyaW0oKSkpe1xuICAgICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICAgIHZhciBpdGVtID0ge1wiZGVzY1RpcG9cIjpcIk5VTUVST1wiLFwiYWRkcmVzc1wiOnF1ZXJ5LFwibGF0XCI6cXVlcnl9O1xuICAgICAgICAgIGl0ZW1zWzBdID0gaXRlbTtcbiAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHByb21pc2VTZWFyY2ggPSBsb2NhdGlvbkFQSS5zZWFyY2hFc3F1aW5hQnlTdHIoe1xuICAgICAgICAgICAgY2FsbGU6ICRzY29wZS5zZWxlY3RlZEl0ZW0ubGF0LFxuICAgICAgICAgICAgZXNxdWluYTogcXVlcnlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHByb21pc2VTZWFyY2g7XG4gICAgfWVsc2V7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUub25DbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgJHNjb3BlLmlvbkF1dG9jb21wbGV0ZUVsZW1lbnQuY29udHJvbGxlcignaW9uQXV0b2NvbXBsZXRlJykuc2hvd01vZGFsKCk7XG5cbiAgfTtcblxuICAkc2NvcGUuaXRlbXNDbGlja2VkID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICAgICRzY29wZS5jbGlja2VkVmFsdWVNb2RlbCA9IGNhbGxiYWNrO1xuICAgIC8vJHNjb3BlLnNlbGVjdGVkSXRlbSA9IGNhbGxiYWNrLnNlbGVjdGVkSXRlbXNbMF07XG4gICAgJHNjb3BlLnNlbGVjdGVkSXRlbSA9IGNhbGxiYWNrLml0ZW07XG4gICAgJHNjb3BlLmlvbkF1dG9jb21wbGV0ZUVsZW1lbnRTZWFyY2ggPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImlvbi1hdXRvY29tcGxldGUtc2VhcmNoXCIpKTtcbiAgICBpZiAoJHNjb3BlLnNlYXJjaE1vZGUgPT0gXCJlc3F1aW5hLm51bWVyb1wiKSB7XG4gICAgICBsb2NhdGlvbkdlb21QYXJhbXMucGF0aFBhcmFtcyA9IFtdO1xuICAgICAgJHNjb3BlLmxvY2F0aW9uLmVzcXVpbmE9ICRzY29wZS5zZWxlY3RlZEl0ZW07XG4gICAgICBsb2NhdGlvbkdlb21QYXJhbXMucGF0aFBhcmFtcy5wdXNoKCRzY29wZS5sb2NhdGlvbi5jYWxsZS5sYXQpO1xuICAgICAgbG9jYXRpb25HZW9tUGFyYW1zLnBhdGhQYXJhbXMucHVzaCgkc2NvcGUubG9jYXRpb24uZXNxdWluYS5sYXQpO1xuICAgICAgdmFyIHN0cl90aXBvID0gXCJcIjtcbiAgICAgIHZhciB0aXBvID0gXCJcIjtcbiAgICAgIGlmKCRzY29wZS5pc051bWVyaWMoJHNjb3BlLnNlbGVjdGVkSXRlbS5hZGRyZXNzKSl7XG4gICAgICAgIC8vU2VsZWNjaW9uw7MgdW4gbsO6bWVybyBkZSBwdWVydGFcbiAgICAgICAgbG9jYXRpb25HZW9tUGFyYW1zLnRpcG89XCJESVJFQ0NJT05cIjtcbiAgICAgICAgdGlwbyA9IFwiZG9vclwiO1xuICAgICAgfWVsc2V7XG4gICAgICAgIC8vc2VsZWNjaW9ubyB1bmEgZXNxdWluYVxuICAgICAgICBsb2NhdGlvbkdlb21QYXJhbXMudGlwbz1cIkVTUVVJTkFcIjsvLyRzY29wZS5zZWxlY3RlZEl0ZW0uZGVzY1RpcG87XG4gICAgICAgIHN0cl90aXBvID0gXCJlc3F1aW5hXCI7XG4gICAgICAgIHRpcG8gPSBcImNvcm5lclwiO1xuICAgICAgfVxuICAgICAgLy9sb2NhdGlvbkFQSS5nZXRMb2NhdGlvbkdlb20obG9jYXRpb25HZW9tUGFyYW1zKS50aGVuKGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIGxvY2F0aW9uQVBJLmdldExvY2F0aW9uR2VvbVBNQigkc2NvcGUubG9jYXRpb24uY2FsbGUubGF0LCRzY29wZS5sb2NhdGlvbi5lc3F1aW5hLmxhdCx0aXBvKS50aGVuKGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgdmFyIG5hbWUgPSAkc2NvcGUubG9jYXRpb24uY2FsbGUuYWRkcmVzcyArIFwiIFwiICsgc3RyX3RpcG8gKyBcIiBcIiArICRzY29wZS5zZWxlY3RlZEl0ZW0uYWRkcmVzcztcbiAgICAgICAgTWFwU2VydmljZS5nb1RvUGxhY2UobmFtZSwgcmVzdWx0LmRhdGEubGF0aXR1ZGUscmVzdWx0LmRhdGEubG9uZ2l0dWRlLCRzY29wZSk7XG4gICAgICAgICRzY29wZS5zZWFyY2hNb2RlID0gXCJjYWxsZS5sdWdhclwiO1xuICAgICAgICAkc2NvcGUuaW9uQXV0b2NvbXBsZXRlRWxlbWVudFNlYXJjaC5hdHRyKFwicGxhY2Vob2xkZXJcIiwgXCJCdXNjYXIgY2FsbGVcIik7XG4gICAgICAgICRzY29wZS5leHRlcm5hbE1vZGVsID0gW107XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLmxvY2F0aW9uLmNhbGxlPSAkc2NvcGUuc2VsZWN0ZWRJdGVtO1xuICAgICAgJHNjb3BlLnNlYXJjaE1vZGUgPSBcImVzcXVpbmEubnVtZXJvXCI7XG4gICAgICAkc2NvcGUuaW9uQXV0b2NvbXBsZXRlRWxlbWVudFNlYXJjaC5hdHRyKFwicGxhY2Vob2xkZXJcIiwgXCJFc3F1aW5hIG8gbsO6bWVyb1wiKTtcbiAgICAgICRzY29wZS5pb25BdXRvY29tcGxldGVFbGVtZW50LmNvbnRyb2xsZXIoJ2lvbkF1dG9jb21wbGV0ZScpLnNob3dNb2RhbCgpO1xuICAgICAgJHNjb3BlLnByZXNlbGVjdGVkU2VhcmNoSXRlbXMgPSBbXTtcbiAgICAgIC8qaWYgKCRzY29wZS5zZWxlY3RlZEl0ZW0uZGVzY1RpcG8gPT09IFwiVklBXCIpIHtcbiAgICAgICAgJHNjb3BlLmxvY2F0aW9uLmNhbGxlPSAkc2NvcGUuc2VsZWN0ZWRJdGVtO1xuICAgICAgICAkc2NvcGUuc2VhcmNoTW9kZSA9IFwiZXNxdWluYS5udW1lcm9cIjtcbiAgICAgICAgJHNjb3BlLmlvbkF1dG9jb21wbGV0ZUVsZW1lbnRTZWFyY2guYXR0cihcInBsYWNlaG9sZGVyXCIsIFwiRXNxdWluYSBvIG7Dum1lcm9cIik7XG4gICAgICAgICRzY29wZS5pb25BdXRvY29tcGxldGVFbGVtZW50LmNvbnRyb2xsZXIoJ2lvbkF1dG9jb21wbGV0ZScpLnNob3dNb2RhbCgpO1xuXG4gICAgICB9ZWxzZXtcbiAgICAgICAgLy9nb3RvIHBsYWNlIGVuIGVsIG1hcGFcbiAgICAgICAgJHNjb3BlLmxvY2F0aW9uLmx1Z2FyPSAkc2NvcGUuc2VsZWN0ZWRJdGVtO1xuICAgICAgICBsb2NhdGlvbkdlb21QYXJhbXMudGlwbz0kc2NvcGUuc2VsZWN0ZWRJdGVtLmRlc2NTdWJ0aXBvO1xuICAgICAgICBsb2NhdGlvbkdlb21QYXJhbXMucGF0aFBhcmFtcy5wdXNoKCRzY29wZS5sb2NhdGlvbi5sdWdhci5jb2RpZ28pO1xuICAgICAgICBsb2NhdGlvbkFQSS5nZXRMb2NhdGlvbkdlb20obG9jYXRpb25HZW9tUGFyYW1zKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgIE1hcFNlcnZpY2UuZ29Ub1BsYWNlKGFuZ3VsYXIuZXh0ZW5kKHtub21icmU6JHNjb3BlLnNlbGVjdGVkSXRlbS5ub21icmV9LHJlc3VsdCkpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICB9Ki9cbiAgICB9XG5cbiAgfTtcblxuICAkc2NvcGUuaXRlbXNDYW5jZWxlZD0gZnVuY3Rpb24oX2l0ZW0pe1xuICAgIHZhciBudW1QdWVydGEgPSBwYXJzZUludChfaXRlbS5zZWFyY2hRdWVyeSk7XG4gICAgaWYoTnVtYmVyLmlzSW50ZWdlcihudW1QdWVydGEpKXtcbiAgICAgIC8vY29uc29sZS5sb2coXCJJUyBudW1iZXJcIik7XG4gICAgICBsb2NhdGlvbkdlb21QYXJhbXMudGlwbz1cIkRJUkVDQ0lPTlwiOy8vJHNjb3BlLnNlbGVjdGVkSXRlbS5kZXNjVGlwbztcbiAgICAgIGxvY2F0aW9uR2VvbVBhcmFtcy5wYXRoUGFyYW1zLnB1c2goJHNjb3BlLmxvY2F0aW9uLmNhbGxlLmNvZGlnbyk7XG4gICAgICBsb2NhdGlvbkdlb21QYXJhbXMucGF0aFBhcmFtcy5wdXNoKG51bVB1ZXJ0YSk7XG4gICAgICBsb2NhdGlvbkFQSS5nZXRMb2NhdGlvbkdlb20obG9jYXRpb25HZW9tUGFyYW1zKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICBNYXBTZXJ2aWNlLmdvVG9QbGFjZShhbmd1bGFyLmV4dGVuZCh7bm9tYnJlOiRzY29wZS5zZWxlY3RlZEl0ZW0ubm9tYnJlICsgXCIgXCIgKyBudW1QdWVydGEgfSxyZXN1bHQpLCRzY29wZSk7XG4gICAgICAkc2NvcGUuc2VhcmNoTW9kZSA9IFwiY2FsbGUubHVnYXJcIjtcblxuICAgIH0sZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgLy9jb25zb2xlLmxvZyhcIkVycm9yIG9idGVuaWVuZG8gbGEgZGlyZWNjaW9uIFwiKyBKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICAgICAgTG9hZGVyLnNob3dBbGVydChcIkVycm9yXCIsXCJObyBleGlzdGUgZXNhIGRpcmVjY2lvblwiKS50aGVuKGZ1bmN0aW9uKHJlcyl7XG4gICAgICAgICAgJHNjb3BlLmlvbkF1dG9jb21wbGV0ZUVsZW1lbnQuY29udHJvbGxlcignaW9uQXV0b2NvbXBsZXRlJykuc2hvd01vZGFsKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgfTtcbn1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdBdXRoU2VydmljZScsIFsnJGh0dHAnLCAnJGNvcmRvdmFGaWxlVHJhbnNmZXInLCAnQ29uZmlnU2VydmljZScsIGZ1bmN0aW9uKCRodHRwLCAkY29yZG92YUZpbGVUcmFuc2ZlciwgQ29uZmlnU2VydmljZSkge1xuXG4gIHZhciBiYXNlVVJMID0gQ29uZmlnU2VydmljZS5iYXNlVVJMICsgXCIvYXV0aC9hamF4L1wiO1xuXG4gIHJldHVybiB7XG4gICAgc2lnbl9pbjogZnVuY3Rpb24gKHBhc3N3b3JkLCBlbWFpbCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldChiYXNlVVJMICsgXCJzaWduX2luXCIsIHsgd2l0aENyZWRlbnRpYWxzOiB0cnVlLCBwYXJhbXM6IHsgcGFzc3dvcmRfc2lnbl9pbjogcGFzc3dvcmQsIGVtYWlsOiBlbWFpbCB9IH0pO1xuICAgIH0sXG5cbiAgICBzaWduX291dDogZnVuY3Rpb24gKHBhc3N3b3JkLCBlbWFpbCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldChiYXNlVVJMICsgXCJzaWduX291dFwiLCB7IHdpdGhDcmVkZW50aWFsczogdHJ1ZSwgcGFyYW1zOiB7IHBhc3N3b3JkX3NpZ25faW46IHBhc3N3b3JkLCBlbWFpbDogZW1haWwgfSB9KTtcbiAgICB9LFxuXG4gICAgY3JlYXRlX3VzZXI6IGZ1bmN0aW9uIChlbWFpbCxmdWxsbmFtZSxwYXNzd29yZCwgaWRfZG9jLCB1c2VyX3Bob25lKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkwgKyBcImNyZWF0ZV91c2VyXCIsIHsgd2l0aENyZWRlbnRpYWxzOiB0cnVlLCBwYXJhbXM6IHsgZm9ybV9lbWFpbDogZW1haWwsIG5hbWU6IGZ1bGxuYW1lLCBwYXNzd29yZF9yZWdpc3RlcjogcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGVudGl0eV9kb2N1bWVudDogaWRfZG9jLCBwaG9uZTogdXNlcl9waG9uZSB9IH0pO1xuICAgIH0sXG5cbiAgICBwYXNzd29yZF9yZWNvdmVyeTogZnVuY3Rpb24gKGVtYWlsKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkwgKyBcImZvcmdvdF9wYXNzd29yZFwiLCB7IHBhcmFtczogeyBsb2dpbl9lbWFpbDogZW1haWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHBhc3N3b3JkX2NoYW5nZTogZnVuY3Rpb24gKGVtYWlsLG9sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkLGNvbmZpcm1QYXNzd29yZCkge1xuXG4gICAgICB2YXIgYm9keSA9ICdlbWFpbD0nK2VtYWlsKycmcGFzc3dvcmRfc2lnbl9pbj0nK29sZFBhc3N3b3JkKycmbmV3X3Bhc3N3b3JkPScrbmV3UGFzc3dvcmQrJyZjb25maXJtPScrY29uZmlybVBhc3N3b3JkO1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoYmFzZVVSTCArICdjaGFuZ2VfcGFzc3dvcmQnLCBib2R5LHtoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnfX0pO1xuXG4gICAgfSxcblxuXG4gICAgZWRpdF91c2VyOiBmdW5jdGlvbiAoZW1haWwscGFzc3dvcmQsIGZ1bGxuYW1lLCBuZXdfZW1haWwsIGlkX2RvYywgdXNlcl9waG9uZSwgdXNlcl9waWN0dXJlX3VybCkge1xuICAgICAgaWYgKHVzZXJfcGljdHVyZV91cmwhPW51bGwgJiYgdXNlcl9waWN0dXJlX3VybCE9XCJcIikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgIGZpbGVLZXk6IFwicGhvdG9cIixcbiAgICAgICAgIC8vZmlsZU5hbWU6IGZpbGVuYW1lLFxuICAgICAgICAgLy9jaHVua2VkTW9kZTogZmFsc2UsXG4gICAgICAgICAvL21pbWVUeXBlOiBcImltYWdlL2pwZ1wiLFxuICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlLFxuICAgICAgICAgcGFyYW1zIDogeyAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfc2lnbl9pbjogcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICBuYW1lOiBmdWxsbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgIG5ld19lbWFpbDogbmV3X2VtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgaWRlbnRpdHlfZG9jdW1lbnQ6IGlkX2RvYyxcbiAgICAgICAgICAgICAgICAgICAgIHBob25lOiB1c2VyX3Bob25lXG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdHJ1c3RBbGxIb3N0cyA9IHRydWU7XG4gICAgICAgIHJldHVybiAkY29yZG92YUZpbGVUcmFuc2Zlci51cGxvYWQoYmFzZVVSTCArIFwiZWRpdF91c2VyXCIsIHVzZXJfcGljdHVyZV91cmwsIG9wdGlvbnMsIHRydXN0QWxsSG9zdHMpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZVVSTCArIFwiZWRpdF91c2VyXCIsIHsgd2l0aENyZWRlbnRpYWxzOiB0cnVlLCBwYXJhbXM6IHsgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfc2lnbl9pbjogcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBmdWxsbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19lbWFpbDogbmV3X2VtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpdHlfZG9jdW1lbnQ6IGlkX2RvYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob25lOiB1c2VyX3Bob25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gIH07XG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnQ2F0ZWdvcmllc1NlcnZpY2UnLCBbJyRodHRwJywnTG9jYXRpb25zU2VydmljZScsICdDb25maWdTZXJ2aWNlJywgJ0RCU2VydmljZScsIGZ1bmN0aW9uKCRodHRwLExvY2F0aW9uc1NlcnZpY2UsIENvbmZpZ1NlcnZpY2UsIERCU2VydmljZSkge1xuXG4gIHZhciBiYXNlVVJMID0gQ29uZmlnU2VydmljZS5iYXNlVVJMICsgXCIvcmVwb3J0L25ldy9hamF4XCI7XG4gIHZhciBiYXNlVVJMZnJvbUFQSSA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTCArIFwiL2FwaS9jYXRlZ29yaWVzL1wiO1xuXG4gIHJldHVybiB7XG4gICAgYWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkwsIHsgcGFyYW1zOiB7IGxhdDogTG9jYXRpb25zU2VydmljZS5uZXdfcmVwb3J0X2xhdCwgbG9uOiBMb2NhdGlvbnNTZXJ2aWNlLm5ld19yZXBvcnRfbG5nLCBmb3JtYXQ6IFwianNvblwiIH0gfSlcbiAgICB9LFxuXG4gICAgYWxsRnJvbUJvZHlBcmVhOiBmdW5jdGlvbiAoYXJlYUlkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkxmcm9tQVBJLCB7IHBhcmFtczogeyBhcGlfa2V5OiBcIjEyMzRcIiwgYXJlYTogYXJlYUlkIH0gfSlcbiAgICB9LFxuXG4gICAgZ2V0Q2FjaGVkQ2F0ZWdvcmllczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIERCU2VydmljZS5nZXRDYXRlZ29yaWVzKCk7XG4gICAgfVxuICB9O1xufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0NvbmZpZ1NlcnZpY2UnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcblxuICB2YXIgQ29uZmlnT2JqID0ge307XG4gIC8vQ29uZmlnT2JqLmJhc2VVUkwgPSBcImh0dHBzOi8vcG1iZGV2LmRldmVsb3BtZW50LmRhdGF1eS5vcmdcIjtcbiAgQ29uZmlnT2JqLmJhc2VVUkwgPSBcIi9kYXRhXCI7XG4gIGlmKGlvbmljLlBsYXRmb3JtLmlzV2ViVmlldygpKXtcbiAgICBDb25maWdPYmouYmFzZVVSTCA9IFwiaHR0cHM6Ly9wb3JtaWJhcnJpb2FwcC5mcmV5amEuZGF0YXV5Lm9yZ1wiO1xuICB9XG5cbiAgQ29uZmlnT2JqLmJhc2VDb2JyYW5kID0gXCIvY29icmFuZHMvcG9ybWliYXJyaW9cIjtcblxuICByZXR1cm4gQ29uZmlnT2JqO1xuXG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnQ29ubmVjdGl2aXR5U2VydmljZScsIFsnJGNvcmRvdmFOZXR3b3JrJywgZnVuY3Rpb24oJGNvcmRvdmFOZXR3b3JrKXtcblxuICByZXR1cm4ge1xuICAgIGlzT25saW5lOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBpZihpb25pYy5QbGF0Zm9ybS5pc1dlYlZpZXcoKSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuICRjb3Jkb3ZhTmV0d29yay5pc09ubGluZSgpO1xuICAgICAgICAgfVxuICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm9uTGluZTtcbiAgICAgICAgLy9yZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc09mZmxpbmU6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZihpb25pYy5QbGF0Zm9ybS5pc1dlYlZpZXcoKSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuICEkY29yZG92YU5ldHdvcmsuaXNPbmxpbmUoKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAhbmF2aWdhdG9yLm9uTGluZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dKVxuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0RCU2VydmljZScsIFsnJHEnLCBmdW5jdGlvbigkcSkge1xuICAgdmFyIF9kYjtcblxuICAgcmV0dXJuIHtcbiAgICAgICBpbml0REI6IGluaXREQixcbiAgICAgICBzYXZlVXNlcjogc2F2ZVVzZXIsXG4gICAgICAgZ2V0VXNlcjogZ2V0VXNlcixcbiAgICAgICBlcmFzZVVzZXI6IGVyYXNlVXNlcixcbiAgICAgICBzYXZlUmVwb3J0OiBzYXZlUmVwb3J0LFxuICAgICAgIGdldFJlcG9ydDogZ2V0UmVwb3J0LFxuICAgICAgIGdldEFsbFJlcG9ydHM6IGdldEFsbFJlcG9ydHMsXG4gICAgICAgdXBkYXRlUmVwb3J0OiB1cGRhdGVSZXBvcnQsXG4gICAgICAgZGVsZXRlUmVwb3J0OiBkZWxldGVSZXBvcnQsXG4gICAgICAgZGVsZXRlR2l2ZW5SZXBvcnQ6IGRlbGV0ZUdpdmVuUmVwb3J0LFxuICAgICAgIGdldENhdGVnb3JpZXM6IGdldENhdGVnb3JpZXMsXG4gICAgICAgc2F2ZUNhdGVnb3JpZXM6IHNhdmVDYXRlZ29yaWVzXG4gICB9O1xuXG4gICBmdW5jdGlvbiBzYXZlVXNlcih1c2VyX25hbWUsIHVzZXJfZW1haWwsIHVzZXJfcGFzc3dvcmQsIHVzZXJfaWRfZG9jLCB1c2VyX3Bob25lLCB1c2VyX3BpY3R1cmVfdXJsKSB7XG4gICAgICAgICB2YXIgdXNlciA9IHtcbiAgICAgICAgICAgIF9pZDogJ3VzZXItbG9nZ2VkJyxcbiAgICAgICAgICAgIG5hbWU6IHVzZXJfbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiB1c2VyX2VtYWlsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHVzZXJfcGFzc3dvcmQsXG4gICAgICAgICAgICBpZGVudGl0eV9kb2N1bWVudDogdXNlcl9pZF9kb2MsXG4gICAgICAgICAgICBwaG9uZTogdXNlcl9waG9uZSxcbiAgICAgICAgICAgIHBpY3R1cmVfdXJsOiB1c2VyX3BpY3R1cmVfdXJsXG4gICAgICAgICB9O1xuICAgICAgICAgZ2V0VXNlcigpLnRoZW4oZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICB1c2VyLl9yZXYgPSBkb2MuX3JldjtcbiAgICAgICAgICAgcmV0dXJuICRxLndoZW4oX2RiLnB1dCh1c2VyKSk7XG4gICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgIHJldHVybiAkcS53aGVuKF9kYi5wdXQodXNlcikpO1xuICAgICAgICAgfSlcbiAgIH07XG5cbiAgZnVuY3Rpb24gZ2V0VXNlcigpIHtcbiAgICAgcmV0dXJuICRxLndoZW4oX2RiLmdldCgndXNlci1sb2dnZWQnKSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZXJhc2VVc2VyKCkge1xuICAgICRxLndoZW4oX2RiLmdldCgndXNlci1sb2dnZWQnKSkudGhlbihmdW5jdGlvbihkb2MpIHtcbiAgICAgIHJldHVybiAkcS53aGVuKF9kYi5yZW1vdmUoZG9jKSk7XG4gICAgfSk7XG4gIH1cblxuICAgZnVuY3Rpb24gaW5pdERCKCkge1xuICAgICAgIC8vIENyZWF0ZXMgdGhlIGRhdGFiYXNlIG9yIG9wZW5zIGlmIGl0IGFscmVhZHkgZXhpc3RzXG4gICAgICAgLy9Qb3VjaERCLnBsdWdpbihyZXF1aXJlKCdwb3VjaGRiLWFkYXB0ZXItY29yZG92YS1zcWxpdGUnKSk7XG4gICAgICAgX2RiID0gbmV3IFBvdWNoREIoJ215ZGIuZGInLCB7YWRhcHRlcjogJ2NvcmRvdmEtc3FsaXRlJywgaW9zRGF0YWJhc2VMb2NhdGlvbjogJ0xpYnJhcnknfSk7XG4gICAgICAgcmV0dXJuIF9kYjtcbiAgIH07XG5cbiAgIGZ1bmN0aW9uIHNhdmVSZXBvcnQocmVwb3J0KSB7XG4gICAgICAvL25ld19yZXBvcnRfaWQgPSBcInJlcG9ydF9cIiArIHBvdWNoQ29sbGF0ZS50b0luZGV4YWJsZVN0cmluZyhbcmVwb3J0XSk7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICB2YXIgbmV3X3JlcG9ydF9pZCA9IFwicmVwb3J0X1wiICsgZGF0ZS5nZXRGdWxsWWVhcigpICsgKGRhdGUuZ2V0TW9udGgoKSArIDEpICsgZGF0ZS5nZXREYXRlKCkgKyBkYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgcmVwb3J0Ll9pZCA9IG5ld19yZXBvcnRfaWQ7XG4gICAgICByZXR1cm4gJHEud2hlbihfZGIucHV0KHJlcG9ydCkpO1xuICAgfTtcblxuICAgZnVuY3Rpb24gdXBkYXRlUmVwb3J0KHJlcG9ydCkge1xuICAgICByZXR1cm4gJHEud2hlbihfZGIucHV0KHJlcG9ydCkpO1xuICB9O1xuXG4gICBmdW5jdGlvbiBnZXRDYXRlZ29yaWVzKCkge1xuICAgICByZXR1cm4gJHEud2hlbihfZGIuZ2V0KCdjYXRlZ29yaWVzLWxpc3QnKSk7XG4gICB9O1xuXG4gICBmdW5jdGlvbiBzYXZlQ2F0ZWdvcmllcyhjYXRlZ29yaWVzKSB7XG4gICAgIGdldENhdGVnb3JpZXMoKS50aGVuKGZ1bmN0aW9uIChkb2MpIHtcbiAgICAgICBjYXRlZ29yaWVzLl9yZXYgPSBkb2MuX3JldjtcbiAgICAgICByZXR1cm4gJHEud2hlbihfZGIucHV0KGNhdGVnb3JpZXMpKTtcbiAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgIGNhdGVnb3JpZXMuX2lkID0gXCJjYXRlZ29yaWVzLWxpc3RcIjtcbiAgICAgICByZXR1cm4gJHEud2hlbihfZGIucHV0KGNhdGVnb3JpZXMpKTtcbiAgICAgfSlcbiAgIH07XG5cbiAgZnVuY3Rpb24gZ2V0UmVwb3J0KHJlcG9ydElkKSB7XG4gICAgIHJldHVybiAkcS53aGVuKF9kYi5nZXQocmVwb3J0SWQpKTtcbiAgfTtcblxuICAgZnVuY3Rpb24gZ2V0QWxsUmVwb3J0cygpIHtcbiAgICAgcmV0dXJuICRxLndoZW4oX2RiLmFsbERvY3Moe1xuICAgICAgaW5jbHVkZV9kb2NzOiB0cnVlLFxuICAgICAgYXR0YWNobWVudHM6IGZhbHNlLFxuICAgICAgc3RhcnRrZXk6ICdyZXBvcnQnLFxuICAgICAgZW5ka2V5OiAncmVwb3J0XydcbiAgICAgfSkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRlbGV0ZVJlcG9ydChyZXBvcnRfaWQpIHtcbiAgICAkcS53aGVuKGRiLmdldChyZXBvcnRfaWQpKS50aGVuKGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuICRxLndoZW4oX2RiLnJlbW92ZShkb2MpKTtcbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBkZWxldGVHaXZlblJlcG9ydChyZXBvcnQpIHtcbiAgICByZXR1cm4gJHEud2hlbihfZGIucmVtb3ZlKHJlcG9ydCkpO1xuICB9O1xuXG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnRXJyb3JTZXJ2aWNlJywgWyckaHR0cCcsJyRpb25pY1BvcHVwJywgJ1ZhbGlkYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHAsJGlvbmljUG9wdXAsVmFsaWRhdGlvblNlcnZpY2UpIHtcblxuICByZXR1cm4ge1xuICAgIGh0dHBfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bDogZnVuY3Rpb24gKGpzb25SZXN1bHQsIGVycm9yQ29udGFpbmVySWQpIHtcbiAgICAgIHZhciBlcnJvckRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVycm9yQ29udGFpbmVySWQpO1xuICAgICAgaWYoanNvblJlc3VsdC5kYXRhLnJlc3VsdD09MCl7XG4gICAgICAgIGVycm9yRGl2LmlubmVySFRNTD1cIjxoMz5cIiArIGpzb25SZXN1bHQuZGF0YS5tZXNzYWdlICsgXCI8L2gzPlwiO1xuICAgICAgICBlcnJvckRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgZXJyb3JEaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaHR0cF9yZXNwb25zZV9pc19zdWNjZXNzZnVsX2FqYXg6IGZ1bmN0aW9uIChqc29uUmVzdWx0KSB7XG4gICAgICBpZihqc29uUmVzdWx0LmRhdGEucmVzdWx0PT0wKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBodHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfcG9wdXA6IGZ1bmN0aW9uIChqc29uUmVzdWx0KSB7XG4gICAgICBpZihqc29uUmVzdWx0LmRhdGEucmVzdWx0PT0wKXtcbiAgICAgICAgdmFyIGFsZXJ0UG9wdXAgPSAkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgICB0aXRsZTogXCJFcnJvclwiLFxuICAgICAgICAgdGVtcGxhdGU6IGpzb25SZXN1bHQuZGF0YS5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBhbGVydFBvcHVwLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBodHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bDogZnVuY3Rpb24gKGRhdGEsIGVycm9yQ29udGFpbmVySWQpIHtcbiAgICAgIHZhciBlcnJvckRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVycm9yQ29udGFpbmVySWQpO1xuICAgICAgaWYoZGF0YS5yZXN1bHQ9PTApe1xuICAgICAgICBlcnJvckRpdi5pbm5lckhUTUw9XCI8aDM+XCIgKyBkYXRhLm1lc3NhZ2UgKyBcIjwvaDM+XCI7XG4gICAgICAgIGVycm9yRGl2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1lbHNle1xuICAgICAgICBlcnJvckRpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBodHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bF9hamF4OiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYoZGF0YS5yZXN1bHQ9PTApe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNob3dfZXJyb3JfbWVzc2FnZTogZnVuY3Rpb24gKGVycm9yQ29udGFpbmVySWQsIG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIGVycm9yRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZXJyb3JDb250YWluZXJJZCk7XG4gICAgICAgIGVycm9yRGl2LmlubmVySFRNTD1cIjxoMz5cIiArIG1lc3NhZ2UgKyBcIjwvaDM+XCI7XG4gICAgICAgIGVycm9yRGl2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgc2hvd19lcnJvcl9tZXNzYWdlX3BvcHVwOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgIHRpdGxlOiBcIkVycm9yXCIsXG4gICAgICAgICB0ZW1wbGF0ZTogbWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgICAgYWxlcnRQb3B1cC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2hlY2tfZmllbGRzOiBmdW5jdGlvbiAoZmllbGRzLCBlcnJvckNvbnRhaW5lcklkKSB7XG4gICAgICB2YXIgZXJyb3JzID0gXCJcIjtcbiAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgIGlmKGZpZWxkLnR5cGU9PVwibm90TnVsbFwiKXtcbiAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfbm90X2VtcHR5KGZpZWxkLnZhbHVlKSl7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgKyAnPGgzPi0gRWwgY2FtcG8gXCInICsgZmllbGQubmFtZSArICdcIiBubyBwdWVkZSBlc3RhciB2YWPDrW8uPC9oMz4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihmaWVsZC50eXBlPT1cImVtYWlsXCIpe1xuICAgICAgICAgIGlmKCFWYWxpZGF0aW9uU2VydmljZS52YWxpZGF0ZV9lbWFpbChmaWVsZC52YWx1ZSkpe1xuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICsgJzxoMz4tIEVsIGNhbXBvIFwiJyArIGZpZWxkLm5hbWUgKyAnXCIgbm8gZXMgdW5hIGRpcmVjY2nDs24gZGUgY29ycmVvIHbDoWxpZGEuPC9oMz4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihmaWVsZC50eXBlPT1cImlkZG9jX3V5XCIpe1xuICAgICAgICAgIGlmKCFWYWxpZGF0aW9uU2VydmljZS52YWxpZGF0ZV9pZGRvY191eShmaWVsZC52YWx1ZSkpe1xuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICsgJzxoMz4tIEVsIGNhbXBvIFwiJyArIGZpZWxkLm5hbWUgKyAnXCIgbm8gZXMgdW5hIGPDqWR1bGEgdXJ1Z3VheWEgdsOhbGlkYS48L2gzPic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGZpZWxkLnR5cGU9PVwidHdvX3dvcmRzXCIpe1xuICAgICAgICAgIGlmKCFWYWxpZGF0aW9uU2VydmljZS52YWxpZGF0ZV90d29fd29yZHMoZmllbGQudmFsdWUpKXtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyArICc8aDM+LSBFbCBjYW1wbyBcIicgKyBmaWVsZC5uYW1lICsgJ1wiIGRlYmUgY29udGVuZXIgYWwgbWVub3MgZG9zIHBhbGFicmFzLjwvaDM+JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoZmllbGQudHlwZT09XCJlcXVhbHNUb1wiKXtcbiAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfZXF1YWxzVG8oZmllbGQudmFsdWUsIGZpZWxkLnNlY29uZFZhbHVlKSl7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgKyAnPGgzPi0gTG9zIGNhbXBvcyBcIicgKyBmaWVsZC5uYW1lICsgJ1wiIG5vIGNvaW5jaWRlbi48L2gzPic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmKGVycm9ycyA9PVwiXCIpe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1lbHNle1xuICAgICAgICB2YXIgZXJyb3JEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlcnJvckNvbnRhaW5lcklkKTtcbiAgICAgICAgZXJyb3JEaXYuaW5uZXJIVE1MPSBlcnJvcnM7XG4gICAgICAgIGVycm9yRGl2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cblxuICB9O1xufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0ZhcVNlcnZpY2UnLCBbJyRodHRwJywgJ0NvbmZpZ1NlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwgQ29uZmlnU2VydmljZSkge1xuXG4gIHZhciBiYXNlVVJMID0gQ29uZmlnU2VydmljZS5iYXNlVVJMICsgXCIvZmFxXCI7XG5cbiAgcmV0dXJuIHtcbiAgICBhbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZVVSTCwgeyBwYXJhbXM6IHsgYWpheDogXCIxXCIgfSB9KTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnTG9hZGVyJywgWyckaW9uaWNMb2FkaW5nJywgJyR0aW1lb3V0JywnJGlvbmljUG9wdXAnLGZ1bmN0aW9uKCRpb25pY0xvYWRpbmcsJHRpbWVvdXQsJGlvbmljUG9wdXApIHtcblxuICB2YXIgTE9BREVSQVBJID0ge1xuXG4gICAgc2hvd0xvYWRpbmc6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHRleHQgPSB0ZXh0IHx8ICdMb2FkaW5nLi4uJztcbiAgICAgICRpb25pY0xvYWRpbmcuc2hvdyh7XG4gICAgICAgIHRlbXBsYXRlOiB0ZXh0XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgaGlkZUxvYWRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgfSxcblxuICAgIHRvZ2dsZUxvYWRpbmdXaXRoTWVzc2FnZTogZnVuY3Rpb24odGV4dCwgdGltZW91dCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBzZWxmLnNob3dMb2FkaW5nKHRleHQpO1xuXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5oaWRlTG9hZGluZygpO1xuICAgICAgfSwgdGltZW91dCB8fCAzMDAwKTtcbiAgICB9LFxuXG4gICAgY29uZmlybVBvcHVwOmZ1bmN0aW9uKHRpdGxlLHRleHQpe1xuICAgICAgdmFyIGNvbmZpcm1Qb3B1cCA9ICRpb25pY1BvcHVwLmNvbmZpcm0oe1xuICAgICB0aXRsZTogdGl0bGUsXG4gICAgIHRlbXBsYXRlOiB0ZXh0XG4gICB9KTtcbiAgIHJldHVybiBjb25maXJtUG9wdXA7XG4gfSxcblxuXG4gICAgc2hvd0FsZXJ0OmZ1bmN0aW9uKF90aXRsZSxfdGVtcGxhdGUpIHtcbiAgICAgIHZhciBhbGVydFBvcHVwID0gJGlvbmljUG9wdXAuYWxlcnQoe1xuICAgICAgICB0aXRsZTogX3RpdGxlLFxuICAgICAgICB0ZW1wbGF0ZTogX3RlbXBsYXRlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhbGVydFBvcHVwO1xuIH1cblxuICB9O1xuICByZXR1cm4gTE9BREVSQVBJO1xufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0xvY2F0aW9uc1NlcnZpY2UnLCBbIGZ1bmN0aW9uKCkge1xuXG4gIHZhciBsb2NhdGlvbnNPYmogPSB7fTtcbiAgbG9jYXRpb25zT2JqLmluaXRpYWxfbGF0ID0gXCJcIjtcbiAgbG9jYXRpb25zT2JqLmluaXRpYWxfbG5nID0gXCJcIjtcbiAgbG9jYXRpb25zT2JqLm5ld19yZXBvcnRfbGF0ID0gXCJcIjtcbiAgbG9jYXRpb25zT2JqLm5ld19yZXBvcnRfbG5nID0gXCJcIjtcbiAgbG9jYXRpb25zT2JqLmNvdW5jaWxfbW9kYWwgPSBudWxsO1xuICBsb2NhdGlvbnNPYmouc2VsZWN0ZWRfY291bmNpbCA9IG51bGw7XG5cbiAgbG9jYXRpb25zT2JqLnNlbGVjdENvdW5jaWwgPSBmdW5jdGlvbihjb3VuY2lsTmFtZSkge1xuICAgIGxvY2F0aW9uc09iai5zZWxlY3RlZF9jb3VuY2lsID0gIGNvdW5jaWxOYW1lO1xuICB9XG5cbiAgbG9jYXRpb25zT2JqLnNhdmVfaW5pdGlhbF9wb3NpdGlvbiA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgbG9jYXRpb25zT2JqLmluaXRpYWxfbGF0ID0gIHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZTtcbiAgICBsb2NhdGlvbnNPYmouaW5pdGlhbF9sbmcgPSAgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZTtcbiAgfVxuXG4gIGxvY2F0aW9uc09iai5zYXZlX25ld19yZXBvcnRfcG9zaXRpb24gPSBmdW5jdGlvbihsYXQsbG5nKXtcbiAgICBsb2NhdGlvbnNPYmoubmV3X3JlcG9ydF9sYXQgPSBsYXQ7XG4gICAgbG9jYXRpb25zT2JqLm5ld19yZXBvcnRfbG5nID0gbG5nO1xuICAgIGxvY2F0aW9uc09iai5pbml0aWFsX2xhdCA9ICBsYXQ7XG4gICAgbG9jYXRpb25zT2JqLmluaXRpYWxfbG5nID0gIGxuZztcbiAgfVxuXG4gIGxvY2F0aW9uc09iai5zYXZlZExvY2F0aW9ucyA9IFtdO1xuXG4gIHJldHVybiBsb2NhdGlvbnNPYmo7XG5cbn1dKTtcbiIsIiAvL3BtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdNYXBTZXJ2aWNlJywgWyBmdW5jdGlvbigpIHtcbiBwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnTWFwU2VydmljZScsIFsnbGVhZmxldERhdGEnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbihsZWFmbGV0RGF0YSwgJGNvbXBpbGUpIHtcblxuICAgLy9EZWZpbmljaW9uIGRlIGxhIHByb3llY2NjaW9uIFVUTSAyMSBzXG4gICBwcm9qNC5kZWZzKCdFUFNHOjMyNzIxJywgJytwcm9qPXV0bSArem9uZT0yMSArc291dGggK2VsbHBzPVdHUzg0ICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmcycpO1xuXG5cbiAgIHZhciBtYXBTZXJ2aWNlID0ge307XG5cbiAgIG1hcFNlcnZpY2UuZ29Ub1BsYWNlID0gZnVuY3Rpb24obmFtZSxsYXQsbG9uLHNjb3BlKSB7XG4gICAgdmFyIF9nZW9Kc29uID0ge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICAgICAgICAgICAgICBcImNyc1wiOiB7IFwidHlwZVwiOiBcIm5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6ICd1cm46b2djOmRlZjpjcnM6RVBTRzo6MzI3MjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZmVhdHVyZXNcIjogW1xuICAgICAgICAgICAgICAgIHsgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICAgICAgICAgICAgICAgIFwiZ2VvbWV0cnlcIjp7XG4gICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOlwiUG9pbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgXCJjb29yZGluYXRlc1wiOltsYXQsbG9uXVxuICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6e1xuICAgICAgICAgICAgICAgICAgICAgIFwibm9tYnJlXCI6IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcbiAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcbiAgICAgIHZhciBfbGF0bG5nO1xuICAgICAgIHZhciBsYXllciA9IEwuUHJvai5nZW9Kc29uKF9nZW9Kc29uLCB7XG4gICAgICAgICAncG9pbnRUb0xheWVyJzogZnVuY3Rpb24oZmVhdHVyZSwgbGF0bG5nKSB7XG4gICAgICAgICAgIF9sYXRsbmcgPSBsYXRsbmc7XG4gICAgICAgICAgIHZhciBodG1sUG9wVXAgPSBcIjxwIGFsaWduPSdjZW50ZXInPlwiK2ZlYXR1cmUucHJvcGVydGllcy5ub21icmUrXCIgPGJyLz4gPGEgbmctY2xpY2s9J25ld19yZXBvcnRfZnJvbV9sYXRsb24oXCIrX2xhdGxuZy5sYXQrXCIsXCIrX2xhdGxuZy5sbmcrXCIpOyc+SW5pY2lhciByZXBvcnRlIGFxdcOtPC9hPjwvcD5cIjtcbiAgICAgICAgICAgdmFyIGNvbXBpbGVkID0gJGNvbXBpbGUoaHRtbFBvcFVwKShzY29wZSk7XG4gICAgICAgICAgIHJldHVybiBMLm1hcmtlcihsYXRsbmcpLmJpbmRQb3B1cChjb21waWxlZFswXSk7XG4gICAgICAgICB9XG4gICAgICAgfSk7XG5cbiAgICAgICBsYXllci5hZGRUbyhtYXApO1xuICAgICAgIG1hcC5zZXRWaWV3KF9sYXRsbmcsIDE4KTtcbiAgICAgICBsYXllci5vcGVuUG9wdXAoKTtcbiAgICAgfSk7XG4gICB9O1xuXG4gIG1hcFNlcnZpY2UuY2VudGVyTWFwT25Db29yZHMgPSBmdW5jdGlvbihsYXQsbG5nLHpvb20pIHtcbiAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcbiAgICAgICAgbWFwLnNldFZpZXcobmV3IEwuTGF0TG5nKGxhdCwgbG5nKSx6b29tKTtcbiAgICAgICB9KTtcbiAgICAgfVxuXG4gICByZXR1cm4gbWFwU2VydmljZTtcblxuIH1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdNb2RhbFNlcnZpY2UnLCBbIGZ1bmN0aW9uKCkge1xuXG4gIHZhciBtb2RhbE9CSiA9IHt9O1xuICBtb2RhbE9CSi5hY3RpdmVNb2RhbCA9IG51bGw7XG5cbiAgbW9kYWxPQkouY2hlY2tOb01vZGFsSXNPcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgaWYobW9kYWxPQkouYWN0aXZlTW9kYWwpe1xuICAgICAgbW9kYWxPQkouYWN0aXZlTW9kYWwuaGlkZSgpO1xuICAgICAgbW9kYWxPQkouYWN0aXZlTW9kYWwucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1vZGFsT0JKO1xuXG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnUE1CU2VydmljZScsIFsnJGh0dHAnLCAnbGVhZmxldERhdGEnLCAnJGNvcmRvdmFGaWxlVHJhbnNmZXInLCAnQ29uZmlnU2VydmljZScsIGZ1bmN0aW9uKCRodHRwLCBsZWFmbGV0RGF0YSwgJGNvcmRvdmFGaWxlVHJhbnNmZXIsQ29uZmlnU2VydmljZSkge1xuXG4gIHZhciBiYXNlID0gQ29uZmlnU2VydmljZS5iYXNlVVJMO1xuXG4gIHZhciBQTUJTZXJ2aWNlID0ge1xuXG4gICAgcmVwb3J0OiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICBjb25zb2xlLmxvZyhmb3JtKTtcbiAgICAgIGlmIChmb3JtLmZpbGUpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICBmaWxlS2V5OiBcInBob3RvXCIsXG4gICAgICAgICBmaWxlTmFtZTogXCJpbWFnZS5qcGVnXCIsXG4gICAgICAgICBjaHVua2VkTW9kZTogZmFsc2UsXG4gICAgICAgICBtaW1lVHlwZTogXCJpbWFnZS9qcGVnXCIsXG4gICAgICAgICBwYXJhbXMgOiBmb3JtLFxuICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlIFxuICAgICAgICB9O1xuICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB7XG4gICAgICAgICAgQ29ubmVjdGlvbjogXCJDbG9zZVwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciB0cnVzdEFsbEhvc3RzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuICRjb3Jkb3ZhRmlsZVRyYW5zZmVyLnVwbG9hZChiYXNlICsgJy9yZXBvcnQvbmV3L21vYmlsZScsIGZvcm0uZmlsZSwgb3B0aW9ucywgdHJ1c3RBbGxIb3N0cyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldChiYXNlICsgJy9yZXBvcnQvbmV3L21vYmlsZScsIHsgcGFyYW1zOiBmb3JtIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChlbWFpbCxyZXBvcnRfaWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZSArIFwiL2FsZXJ0L3N1YnNjcmliZV9hamF4XCIsIHsgcGFyYW1zOiB7IHJ6bnZ5OiBlbWFpbCwgaWQ6IHJlcG9ydF9pZCwgdHlwZTogXCJ1cGRhdGVzXCIgfSB9KTtcbiAgICB9LFxuXG4gICAgYWJ1c2U6IGZ1bmN0aW9uIChlbWFpbCxyZXBvcnRfaWQsIG5hbWUsIHN1YmplY3QsIG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZSArIFwiL2NvbnRhY3Qvc3VibWl0X2FqYXhcIiwgeyBwYXJhbXM6IHsgZW06IGVtYWlsLCBpZDogcmVwb3J0X2lkLCBuYW1lOiBuYW1lLCBzdWJqZWN0OiBzdWJqZWN0LCBtZXNzYWdlOiBtZXNzYWdlIH0gfSk7XG4gICAgfSxcblxuICAgIGhpZGU6IGZ1bmN0aW9uIChyZXBvcnRfaWQpIHtcbiAgICAgIHZhciBkZWxldGVVUkwgPSBcIi9yZXBvcnQvZGVsZXRlX2FqYXgvXCIgKyByZXBvcnRfaWQ7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2UgKyBkZWxldGVVUkwsIHsgcGFyYW1zOiB7fSB9KTtcbiAgICB9LFxuXG4gICAgY29tbWVudDogZnVuY3Rpb24gKGNvbW1lbnQpIHtcbiAgICAgIGlmKGNvbW1lbnQuZml4ZWQ9PTApe1xuICAgICAgICBkZWxldGUgY29tbWVudC5maXhlZDtcbiAgICAgIH1cbiAgICAgIGlmKGNvbW1lbnQuc3RhdGU9PW51bGwpe1xuICAgICAgICBkZWxldGUgY29tbWVudC5zdGF0ZTtcbiAgICAgIH1cbiAgICAgIGlmKGNvbW1lbnQubmV3X2NhdGVnb3J5PT1udWxsKXtcbiAgICAgICAgZGVsZXRlIGNvbW1lbnQubmV3X2NhdGVnb3J5O1xuICAgICAgfVxuICAgICAgaWYgKGNvbW1lbnQucGhvdG8pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICBmaWxlS2V5OiBcInBob3RvXCIsXG4gICAgICAgICBmaWxlTmFtZTogXCJpbWFnZS5qcGVnXCIsXG4gICAgICAgICBjaHVua2VkTW9kZTogZmFsc2UsXG4gICAgICAgICBtaW1lVHlwZTogXCJpbWFnZS9qcGVnXCIsXG4gICAgICAgICBwYXJhbXMgOiBjb21tZW50LFxuICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICBDb25uZWN0aW9uOiBcIkNsb3NlXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRydXN0QWxsSG9zdHMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gJGNvcmRvdmFGaWxlVHJhbnNmZXIudXBsb2FkKGJhc2UgKyAnL3JlcG9ydC91cGRhdGUnLCBjb21tZW50LnBob3RvLCBvcHRpb25zLCB0cnVzdEFsbEhvc3RzKTtcbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2UgKyAnL3JlcG9ydC91cGRhdGUnLCB7IHdpdGhDcmVkZW50aWFsczogdHJ1ZSwgcGFyYW1zOiBjb21tZW50IH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgIGdldEFyZWFzOiBmdW5jdGlvbiAobG9uLGxhdCkge1xuICAgICB2YXIgbWFwaXRVUkwgPSBcImh0dHA6Ly9tYXBpdC5wb3JtaWJhcnJpby51eS9wb2ludC80MzI2L1wiK2xvbitcIixcIitsYXQrXCJcIjtcbiAgICAgcmV0dXJuICRodHRwLmdldChtYXBpdFVSTCwgeyBwYXJhbXM6IHt9IH0pO1xuICAgfSxcblxuICB9O1xuICByZXR1cm4gUE1CU2VydmljZTtcblxufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ1BvcFVwU2VydmljZScsIFsnJGlvbmljUG9wdXAnLCdWYWxpZGF0aW9uU2VydmljZScsIGZ1bmN0aW9uKCRpb25pY1BvcHVwLFZhbGlkYXRpb25TZXJ2aWNlKSB7XG5cbiAgcmV0dXJuIHtcbiAgICBzaG93X2FsZXJ0OiBmdW5jdGlvbiAoYWxlcnRfdGl0bGUsYWxlcnRfbWVzc2FnZSkge1xuICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgIHRpdGxlOiBhbGVydF90aXRsZSxcbiAgICAgICAgIHRlbXBsYXRlOiBhbGVydF9tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBhbGVydFBvcHVwLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICBjb25maXJtUG9wdXA6IGZ1bmN0aW9uKHRpdGxlLHRleHQpe1xuICAgICB2YXIgY29uZmlybVBvcHVwID0gJGlvbmljUG9wdXAuY29uZmlybSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICByZXR1cm4gY29uZmlybVBvcHVwO1xuICAgfSxcblxuICAgYXNrRm9yT25lVmFsdWVQb3BVcDogZnVuY3Rpb24oc2NvcGUsdGl0bGUsdGV4dCxmaWVsZF9uYW1lLHZhbGlkYXRpb25UeXBlKXtcbiAgICAgICRzY29wZSA9IHNjb3BlO1xuICAgICAgdmFyIG15UG9wdXAgPSAkaW9uaWNQb3B1cC5zaG93KHtcbiAgICAgIHRlbXBsYXRlOiBmaWVsZF9uYW1lICsgJzogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJvbmVfdmFsdWVfcG9wdXBcIj48ZGl2IGlkPVwiZXJyb3JfY29udGFpbmVyX2luc2lkZVwiPjwvZGl2PicsXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICBzdWJUaXRsZTogdGV4dCxcbiAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICBidXR0b25zOiBbXG4gICAgICAgIHsgdGV4dDogJ0NhbmNlbGFyJyB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogJzxiPkVudmlhcjwvYj4nLFxuICAgICAgICAgIHR5cGU6ICdidXR0b24tcG9zaXRpdmUnLFxuICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gXCJcIjtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib25lX3ZhbHVlX3BvcHVwXCIpLnZhbHVlO1xuICAgICAgICAgICAgaWYodmFsaWRhdGlvblR5cGU9PVwibm90TnVsbFwiKXtcbiAgICAgICAgICAgICAgaWYoIVZhbGlkYXRpb25TZXJ2aWNlLnZhbGlkYXRlX25vdF9lbXB0eSh2YWx1ZSkpe1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyArICc8aDM+LSBFbCBjYW1wbyBcIicgKyBmaWVsZF9uYW1lICsgJ1wiIG5vIHB1ZWRlIGVzdGFyIHZhY8Otby48L2gzPic7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHZhbGlkYXRpb25UeXBlPT1cImVtYWlsXCIpe1xuICAgICAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfZW1haWwodmFsdWUpKXtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgKyAnPGgzPi0gRWwgY2FtcG8gXCInICsgZmllbGRfbmFtZSArICdcIiBubyBlcyB1bmEgZGlyZWNjacOzbiBkZSBjb3JyZW8gdsOhbGlkYS48L2gzPic7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHZhbGlkYXRpb25UeXBlPT1cImlkZG9jX3V5XCIpe1xuICAgICAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfaWRkb2NfdXkodmFsdWUpKXtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgKyAnPGgzPi0gRWwgY2FtcG8gXCInICsgZmllbGRfbmFtZSArICdcIiBubyBlcyB1bmEgY8OpZHVsYSB1cnVndWF5YSB2w6FsaWRhLjwvaDM+JztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodmFsaWRhdGlvblR5cGU9PVwidHdvX3dvcmRzXCIpe1xuICAgICAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfdHdvX3dvcmRzKHZhbHVlKSl7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICsgJzxoMz4tIEVsIGNhbXBvIFwiJyArIGZpZWxkX25hbWUgKyAnXCIgZGViZSBjb250ZW5lciBhbCBtZW5vcyBkb3MgcGFsYWJyYXMuPC9oMz4nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihlcnJvcnMhPVwiXCIpe1xuICAgICAgICAgICAgICB2YXIgZXJyb3JEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yX2NvbnRhaW5lcl9pbnNpZGVcIik7XG4gICAgICAgICAgICAgIGVycm9yRGl2LmlubmVySFRNTD0gZXJyb3JzO1xuICAgICAgICAgICAgICBlcnJvckRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAvL2Rvbid0IGFsbG93IHRoZSB1c2VyIHRvIGNsb3NlIHVubGVzcyBoZSBlbnRlcnMgd2lmaSBwYXNzd29yZFxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gICAgcmV0dXJuIG15UG9wdXA7XG4gICB9XG5cblxuICB9O1xufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ1JlcG9ydFNlcnZpY2UnLCBbJyRodHRwJywgJ2xlYWZsZXREYXRhJywnQ29uZmlnU2VydmljZScsIGZ1bmN0aW9uKCRodHRwLCBsZWFmbGV0RGF0YSwgQ29uZmlnU2VydmljZSkge1xuXG4gIHZhciBiYXNlVVJMID0gQ29uZmlnU2VydmljZS5iYXNlVVJMICsgXCIvcmVwb3J0L2FqYXgvXCI7XG5cbiAgdmFyIHBpbnNVUkwgPSBDb25maWdTZXJ2aWNlLmJhc2VVUkwgKyBcIi9hamF4X2dlbz9iYm94PS02NS4xOTkzODcsLTQwLjkzMjE3OCwtNTAuMTY4NDg4LC0yNS44ODcwNjFcIjtcbiAgLy92YXIgcGluc1VSTCA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTCArIFwiL2FwaS9nZW9fcmVwb3J0cz9hcGlfa2V5PTEyMzRcIjtcblxuXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yLCB3aXRoIGNsYXNzIG5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIFJlcG9ydChfZGF0YSkge1xuICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMsIF9kYXRhKTtcbiAgfVxuXG4gIFJlcG9ydC5nZXRCeUlkID0gZnVuY3Rpb24oaWQpe1xuICAgIHZhciB1cmwgPSBiYXNlVVJMICsgaWQ7XG4gICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIFJlcG9ydC5nZXRBbGwgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiAkaHR0cC5nZXQocGluc1VSTCwgeyBwYXJhbXM6IHt9fSk7XG4gIH1cblxuICBSZXBvcnQuX2RlZmF1bHQgPSBmdW5jdGlvbigpe1xuICAgIHZhciBfZGF0YSA9IHtcbiAgICAgIGxhdDogMCxcbiAgICAgIGxvbjogMCxcbiAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgZGV0YWlsOiBudWxsLFxuICAgICAgbWF5X3Nob3dfbmFtZTogMSxcbiAgICAgIGNhdGVnb3J5OiBudWxsLFxuICAgICAgcGhvbmU6IG51bGwsXG4gICAgICBwYzogJycsXG4gICAgICBmaWxlOiBudWxsLFxuICAgICAgbmFtZTogbnVsbCxcbiAgICAgIGVtYWlsOiBudWxsLFxuICAgICAgc3VibWl0X3NpZ25faW46IDEsXG4gICAgICBwYXNzd29yZF9zaWduX2luOiBudWxsLFxuICAgICAgcmVtZW1iZXJfbWU6MVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBSZXBvcnQoX2RhdGEpO1xuICB9O1xuICAgIFJlcG9ydC5fYWxsID0gW107XG4gICAgUmVwb3J0LmN1cnJlbnQgPSB7fTtcbiAgICBSZXBvcnQuX25ldyA9IGZ1bmN0aW9uKCl7XG4gICAgICAvKlJlcG9ydC5jdXJyZW50ID0gUmVwb3J0Ll9kZWZhdWx0KCk7XG4gICAgICByZXR1cm4gUmVwb3J0LmN1cnJlbnQ7Ki9cbiAgICAgIHJldHVybiBSZXBvcnQuX2RlZmF1bHQoKTtcbiAgICB9O1xuXG5cblxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBtZXRob2QsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICogSW5zdGFuY2UgKCd0aGlzJykgaXMgbm90IGF2YWlsYWJsZSBpbiBzdGF0aWMgY29udGV4dFxuICAgICAqL1xuICAgIFJlcG9ydC5idWlsZCA9IGZ1bmN0aW9uKF9kYXRhKSB7XG5cbiAgICAgIHJldHVybiBuZXcgUmVwb3J0KFxuICAgICAgICBfZGF0YVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgUmVwb3J0LnByb3RvdHlwZS5zZXRMYXRMbmcgPSBmdW5jdGlvbiAobGF0bG5nKSB7XG5cbiAgICAgIHRoaXMubGF0ID0gbGF0bG5nLmxhdDtcbiAgICAgIHRoaXMubG9uID0gbGF0bG5nLmxuZztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICAgICAqL1xuICAgIHJldHVybiBSZXBvcnQ7XG5cbn1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdsb2NhdGlvbkFQSScsIFsnJGh0dHAnLCAnJHEnLCAnQXBpSW1FbmRwb2ludCcsICdBcGlEYXRhRW5kcG9pbnQnLCAnQ29uZmlnU2VydmljZScsICdMb2NhdGlvbnNTZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHAsICRxLCBBcGlJbUVuZHBvaW50LCBBcGlEYXRhRW5kcG9pbnQsIENvbmZpZ1NlcnZpY2UsIExvY2F0aW9uc1NlcnZpY2UpIHtcblxuICB2YXIgcmVzdFByZWZmaXggPSBcInViaWNhY2lvbmVzUmVzdFByb2RcIjtcblxuXG4gIHZhciBsb2NhdGlvbkFQSSA9IHt9O1xuXG4gIGxvY2F0aW9uQVBJLnNlYXJjaExvY2F0aW9uQnlTdHIgPSBmdW5jdGlvbihfbG9jYXRpb24pIHtcbiAgICAvKnJldHVybiAkaHR0cC5nZXQoQXBpSW1FbmRwb2ludC51cmwgKyAnLycgKyByZXN0UHJlZmZpeCArICcvY2FsbGVzJywge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBub21icmU6IF9sb2NhdGlvblxuICAgICAgfVxuICAgIH0pOyovXG4gICAgdmFyIGJhc2VVUkwgPSBDb25maWdTZXJ2aWNlLmJhc2VVUkwgKyBcIi9hamF4L2dlb2NvZGU/dGVybT1cIiArIExvY2F0aW9uc1NlcnZpY2Uuc2VsZWN0ZWRfY291bmNpbCArIFwiLFwiICsgX2xvY2F0aW9uO1xuICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZVVSTCwge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHBhcmFtczoge31cbiAgICB9KTtcbiAgfTtcblxuXG4gIGxvY2F0aW9uQVBJLnNlYXJjaEVzcXVpbmFCeVN0ciA9IGZ1bmN0aW9uKF9sb2NhdGlvbikge1xuICAgIC8vY29uc29sZS5sb2coXCJzZWFyY2hFc3F1aW5hQnlTdHIgPSBcIiArIEpTT04uc3RyaW5naWZ5KF9sb2NhdGlvbikpO1xuICAgIC8vcmV0dXJuICRodHRwLmdldChBcGlJbUVuZHBvaW50LnVybCArICcvJyArIHJlc3RQcmVmZml4ICsgJy9lc3F1aW5hLycgKyBfbG9jYXRpb24uY2FsbGUgKyAnLycgKyBfbG9jYXRpb24uZXNxdWluYSwge1xuICAgICAgLypyZXR1cm4gJGh0dHAuZ2V0KEFwaUltRW5kcG9pbnQudXJsICsgJy8nICsgcmVzdFByZWZmaXggKyAnL2NydWNlcy8nICsgX2xvY2F0aW9uLmNhbGxlICsgJy8nLFxuICAgICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBub21icmU6IF9sb2NhdGlvbi5lc3F1aW5hXG4gICAgICAgIH1cbiAgICAgIH0pOyovXG5cbiAgICAgIHZhciBiYXNlVVJMID0gQ29uZmlnU2VydmljZS5iYXNlVVJMICsgXCIvYWpheC9nZW9jb2RlP3Rlcm09XCIgKyBMb2NhdGlvbnNTZXJ2aWNlLnNlbGVjdGVkX2NvdW5jaWwgKyBcIixcIlxuICAgICAgICAgICAgICAgICAgICArIF9sb2NhdGlvbi5jYWxsZSArIFwiLFwiICsgX2xvY2F0aW9uLmVzcXVpbmE7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkwsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcGFyYW1zOiB7fVxuICAgICAgfSk7XG4gIH07XG5cbiAgbG9jYXRpb25BUEkuZ2V0TG9jYXRpb25HZW9tID0gZnVuY3Rpb24oX2xvY2F0aW9uKSB7XG4gICAgdmFyIHVybCA9IEFwaUltRW5kcG9pbnQudXJsICsgJy8nICsgcmVzdFByZWZmaXggKyBsb2NhdGlvbkFQSS5nZXRQYXJhbVBhdGhCeVRpcG8oX2xvY2F0aW9uLnRpcG8pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2xvY2F0aW9uLnBhdGhQYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVybCArPSAnLycgKyBfbG9jYXRpb24ucGF0aFBhcmFtc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuICRodHRwLmdldChiYXNlVVJMKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0pO1xuICB9O1xuXG4gIGxvY2F0aW9uQVBJLmdldExvY2F0aW9uR2VvbVBNQiA9IGZ1bmN0aW9uKGNhbGxlLGVzcXVpbmFfbnVtZXJvLHRpcG8pIHtcbiAgICB2YXIgYmFzZVVSTCA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTCArIFwiL2FqYXgvZ2VvY29kZT90ZXJtPVwiICsgTG9jYXRpb25zU2VydmljZS5zZWxlY3RlZF9jb3VuY2lsICsgXCIsXCJcbiAgICAgICAgICAgICAgKyBjYWxsZSArIFwiLFwiICsgZXNxdWluYV9udW1lcm8gKyBcIixcIiArIHRpcG87XG5cbiAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkwpO1xuXG4gIH07XG5cbiAgbG9jYXRpb25BUEkuZ2V0UGFyYW1QYXRoQnlUaXBvID0gZnVuY3Rpb24oX3RpcG8pIHtcblxuICAgIHZhciByZXN0R2VvRGF0YVNlcnZpY2VQYXRoID0ge1xuICAgICAgJ0VTUVVJTkEnOlwiL2VzcXVpbmFcIixcbiAgICAgICdESVJFQ0NJT04nOlwiL2RpcmVjY2lvblwiXG4gICAgfTtcblxuICAgIHJldHVybiByZXN0R2VvRGF0YVNlcnZpY2VQYXRoW190aXBvXTtcblxuXG4gIH07XG5cbiAgcmV0dXJuIGxvY2F0aW9uQVBJO1xuXG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnXycsIFtmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5fOyAvL1VuZGVyc2NvcmUgbXVzdCBhbHJlYWR5IGJlIGxvYWRlZCBvbiB0aGUgcGFnZVxufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ1VzZXJTZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG5cbiAgLy92YXIgYmFzZVVSTCA9IFwiaHR0cDovL3BtYnV5LmRldmVsb3BtZW50LmRhdGF1eS5vcmcvYXV0aC9hamF4L1wiO1xuICB2YXIgVXNlck9iaiA9IHt9O1xuICBVc2VyT2JqLm5hbWUgPSBudWxsO1xuICBVc2VyT2JqLmVtYWlsID0gbnVsbDtcbiAgVXNlck9iai5wYXNzd29yZCA9IG51bGw7XG4gIFVzZXJPYmouaWRlbnRpdHlfZG9jdW1lbnQgPSBudWxsO1xuICBVc2VyT2JqLnBob25lID0gJyc7XG4gIFVzZXJPYmoucGljdHVyZV91cmwgPSBcInVybCguL2ltZy9pY29uLXVzZXItYW5vbnltb3VzLnBuZylcIjtcbiAgVXNlck9iai5mcm9tX2JvZHkgPSBudWxsO1xuXG5cbiAgVXNlck9iai5zYXZlX3VzZXJfZGF0YSA9IGZ1bmN0aW9uICh1c2VyX25hbWUsIHVzZXJfZW1haWwsIHVzZXJfcGFzc3dvcmQsIHVzZXJfaWRfZG9jLCB1c2VyX3Bob25lLCB1c2VyX3BpY3R1cmVfdXJsKSB7XG4gICAgICBVc2VyT2JqLm5hbWUgPSB1c2VyX25hbWU7XG4gICAgICBVc2VyT2JqLmVtYWlsID0gdXNlcl9lbWFpbDtcbiAgICAgIFVzZXJPYmoucGFzc3dvcmQgPSB1c2VyX3Bhc3N3b3JkO1xuICAgICAgVXNlck9iai5pZGVudGl0eV9kb2N1bWVudCA9IHVzZXJfaWRfZG9jO1xuICAgICAgVXNlck9iai5waG9uZSA9IHVzZXJfcGhvbmU7XG4gICAgICBVc2VyT2JqLnBpY3R1cmVfdXJsID0gdXNlcl9waWN0dXJlX3VybDtcbiAgICAgIC8vU0FWRSBJTiBQT1VDSERCXG4gIH1cblxuICBVc2VyT2JqLmVyYXNlX3VzZXJfZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICBVc2VyT2JqLm5hbWUgPSBudWxsO1xuICAgIFVzZXJPYmouZW1haWwgPSBudWxsO1xuICAgIFVzZXJPYmoucGFzc3dvcmQgPSBudWxsO1xuICAgIFVzZXJPYmouaWRlbnRpdHlfZG9jdW1lbnQgPSBudWxsO1xuICAgIFVzZXJPYmoucGhvbmUgPSBudWxsO1xuICAgIFVzZXJPYmoucGljdHVyZV91cmwgPSBudWxsO1xuICAgIC8vREVMRVRFIElOIFBPVUNIREJcbiAgfVxuXG4gIFVzZXJPYmouZ2V0X3VzZXJfZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvL0xFVkFOVEEgREUgUE9VQ0hEQiBMT1MgREFUT1MgREVMIFVTVUFSSU8uIFNJIEhBWSBMT1MgUE9ORSBFTiBMQVMgVkFSSUFCTEVTIERFTCBTRVJWSUNJTy4gU0kgTk8gSEFZIFBPTkUgVE9ETyBOVUxMXG4gIH1cblxuICBVc2VyT2JqLmFkZF9waG90byA9IGZ1bmN0aW9uICh1c2VyX3BpY3R1cmVfdXJsKSB7XG4gICAgVXNlck9iai5waWN0dXJlX3VybCA9IHVzZXJfcGljdHVyZV91cmw7XG4gIH1cblxuICBVc2VyT2JqLmlzTG9nZ2VkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKFVzZXJPYmoubmFtZSE9bnVsbCAmJiBVc2VyT2JqLm5hbWUhPVwiXCIpe1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cblxuICByZXR1cm4gVXNlck9iajtcblxufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ1ZhbGlkYXRpb25TZXJ2aWNlJywgWyckaHR0cCcsJyRpb25pY1BvcHVwJywgZnVuY3Rpb24oJGh0dHAsJGlvbmljUG9wdXApIHtcblxuICByZXR1cm4ge1xuICAgIHZhbGlkYXRlX25vdF9lbXB0eTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmKHZhbHVlIT1udWxsICYmIHZhbHVlIT1cInVuZGVmaW5lZFwiICYmIHZhbHVlIT1cIlwiKXtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHZhbGlkYXRlX3R3b193b3JkczogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmKHZhbHVlIT1udWxsICYmIHZhbHVlIT1cInVuZGVmaW5lZFwiICYmIHZhbHVlIT1cIlwiKXtcbiAgICAgICAgICB2YXIgdmFsdWVzID0gdmFsdWUuc3BsaXQoJyAnKS5maWx0ZXIoZnVuY3Rpb24odil7cmV0dXJuIHYhPT0nJ30pO1xuICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAvL3R3byBvciBtb3JlIHdvcmRzXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vbm90IGVub3VnaCB3b3Jkc1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVfZXF1YWxzVG86IGZ1bmN0aW9uICh2YWx1ZSxzZWNvbmRWYWx1ZSkge1xuICAgICAgaWYodmFsdWU9PXNlY29uZFZhbHVlKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZV9lbWFpbDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmKHZhbHVlIT1udWxsICYmIHZhbHVlIT1cInVuZGVmaW5lZFwiICYmIHZhbHVlIT1cIlwiKXtcbiAgICAgICAgICB2YXIgcmUgPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbiAgICAgICAgICByZXR1cm4gcmUudGVzdCh2YWx1ZSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZV9pZGRvY191eTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZih2YWx1ZSE9bnVsbCAmJiB2YWx1ZSE9XCJ1bmRlZmluZWRcIiAmJiB2YWx1ZSE9XCJcIil7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXEQvZywgJycpO1xuICAgICAgICAgIHZhciBkaWcgPSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICB2YXIgYSA9IDA7IHZhciBpID0gMDtcbiAgICAgICAgICBpZih2YWx1ZS5sZW5ndGggPD0gNil7XG4gICAgICAgICAgICBmb3IoaSA9IHZhbHVlLmxlbmd0aDsgaSA8IDc7IGkrKyl7XG4gICAgICAgICAgICAgIHZhbHVlID0gJzAnICsgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvcihpID0gMDsgaSA8IDc7IGkrKyl7XG4gICAgICAgICAgICBhICs9IChwYXJzZUludChcIjI5ODc2MzRcIltpXSkgKiBwYXJzZUludCh2YWx1ZVtpXSkpICUgMTA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgaWYoYSUxMCA9PT0gMCl7XG4gICAgICAgICAgICByZXN1bHQgPSAwO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmVzdWx0ID0gMTAgLSBhICUgMTA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGRpZyA9PSByZXN1bHQpe1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XSk7XG4iXX0=
