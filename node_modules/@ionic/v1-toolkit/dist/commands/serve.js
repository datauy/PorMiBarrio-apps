"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_framework_1 = require("@ionic/cli-framework");
const string_1 = require("@ionic/cli-framework/utils/string");
const chalk = require("chalk");
const path = require("path");
const config_1 = require("../lib/config");
const gulp_1 = require("../lib/gulp");
const log_1 = require("../lib/log");
const serve_1 = require("../lib/serve");
class ServeCommand extends cli_framework_1.Command {
    async getMetadata() {
        return {
            name: 'serve',
            summary: '',
            inputs: [],
            options: [
                {
                    name: 'host',
                    summary: 'Host of HTTP server',
                    default: 'localhost',
                },
                {
                    name: 'port',
                    summary: 'Port of HTTP server',
                    default: '8100',
                },
                {
                    name: 'dev-port',
                    summary: 'Port of WebSocket dev server',
                    default: '53703',
                },
                {
                    name: 'livereload-port',
                    summary: 'Port of WebSocket live-reload server',
                    default: '35729',
                },
                {
                    name: 'livereload',
                    summary: 'Enable live-reload',
                    type: Boolean,
                    default: true,
                },
                {
                    name: 'consolelogs',
                    summary: 'Enable console logs to terminal',
                    type: Boolean,
                    aliases: ['c'],
                },
                {
                    name: 'engine',
                    summary: `Target engine (e.g. ${['browser', 'cordova'].map(e => chalk.green(e)).join(', ')})`,
                    default: 'browser',
                },
                {
                    name: 'platform',
                    summary: `Target platform on chosen engine (e.g. ${['ios', 'android'].map(e => chalk.green(e)).join(', ')})`,
                },
            ],
        };
    }
    async run(inputs, options) {
        var _a;
        const host = String(options['host']);
        const port = string_1.str2num(options['port']);
        const devPort = string_1.str2num(options['dev-port']);
        const livereload = options['livereload'] ? true : false;
        const livereloadPort = string_1.str2num(options['livereload-port']);
        const consolelogs = options['consolelogs'] ? true : false;
        const engine = String(options['engine']);
        const platform = options['platform'] ? String(options['platform']) : undefined;
        const url = `http://${host}:${port}`;
        if (await gulp_1.hasTask('ionic:serve:before')) {
            await gulp_1.runTask('ionic:serve:before');
        }
        const config = new config_1.Config(path.resolve(process.cwd(), (_a = process.env['IONIC_CONFIG_FILE']) !== null && _a !== void 0 ? _a : 'ionic.config.json'));
        const c = config.c;
        const wwwDir = c.documentRoot || 'www';
        const proxies = c.proxies ? c.proxies.map(p => ({ mount: p.path, ...serve_1.proxyConfigToMiddlewareConfig(p) })) : [];
        if (!c.watchPatterns || c.watchPatterns.length === 1 && c.watchPatterns[0] === 'scss/**/*') {
            config.set('watchPatterns', serve_1.WATCH_PATTERNS);
            c.watchPatterns = serve_1.WATCH_PATTERNS;
        }
        process.stdout.write(`${log_1.timestamp()} Serving directory ${chalk.bold(wwwDir)}\n`);
        await serve_1.runServer({
            host,
            port,
            engine,
            platform,
            livereload,
            consolelogs,
            devPort,
            livereloadPort,
            wwwDir,
            watchPatterns: c.watchPatterns,
            proxies,
        });
        process.stdout.write(`${log_1.timestamp()} Dev server running at ${chalk.bold(url)}\n`);
    }
}
exports.ServeCommand = ServeCommand;
