"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
exports.name = '@ionic/cli-plugin-gulp';
exports.version = '1.1.1';
const BUILD_BEFORE_HOOK = 'build:before';
const BUILD_BEFORE_TASK = `ionic:${BUILD_BEFORE_HOOK}`;
const BUILD_AFTER_HOOK = 'build:after';
const BUILD_AFTER_TASK = `ionic:${BUILD_AFTER_HOOK}`;
const WATCH_BEFORE_HOOK = 'watch:before';
const WATCH_BEFORE_TASK = `ionic:${WATCH_BEFORE_HOOK}`;
const SASS_TASK = 'sass';
let _gulpInst;
function loadGulp(env) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (_gulpInst || !env.project.directory) {
            return _gulpInst;
        }
        const project = yield env.project.load();
        const gulpFilePath = path.join(env.project.directory, project.gulpFile || 'gulpfile.js');
        const gulpPath = path.join(env.project.directory, 'node_modules', 'gulp');
        const gulpPluginUninstallArgs = yield cli_utils_1.pkgInstallPluginArgs(env, '@ionic/cli-plugin-gulp', { command: 'uninstall' });
        try {
            _gulpInst = require(gulpPath);
        }
        catch (e) {
            if (e.code !== 'MODULE_NOT_FOUND') {
                throw e;
            }
            const gulpInstallArgs = yield cli_utils_1.pkgManagerArgs(env, { pkg: 'gulp', saveDev: true, saveExact: false });
            throw new cli_utils_1.FatalException(`Gulp is not installed! You can install it locally:\n\n` +
                `    ${chalk.green(gulpInstallArgs.join(' '))}\n\n` +
                `Or, if you no longer use gulp, you can remove the CLI Gulp Plugin:\n\n` +
                `    ${chalk.green(gulpPluginUninstallArgs.join(' '))}`);
        }
        try {
            require(gulpFilePath); // requiring the gulp file sets up the gulp instance with local gulp task definitions
        }
        catch (e) {
            if (e.code !== 'MODULE_NOT_FOUND') {
                throw e;
            }
            throw new cli_utils_1.FatalException(`Gulpfile (or dependent module) not found: ${chalk.bold(cli_utils_1.prettyPath(gulpFilePath))}\n` +
                `You can set the ${chalk.bold('gulpFile')} attribute in ${chalk.bold(cli_utils_1.PROJECT_FILE)} for custom Gulpfile locations, otherwise the default Ionic Gulpfile can be downloaded from ${chalk.bold('https://github.com/ionic-team/ionic-app-base/blob/master/gulpfile.js')}\n\n` +
                `Or, if you no longer use gulp, you can remove the CLI Gulp Plugin:\n\n` +
                `    ${chalk.green(gulpPluginUninstallArgs.join(' '))}\n\n` +
                `Full error:\n\n` +
                chalk.red(e.stack ? e.stack : e));
        }
        return _gulpInst;
    });
}
function registerHooks(hooks) {
    hooks.register(exports.name, 'plugins:init', ({ env }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!env.project.directory) {
            return;
        }
        const project = yield env.project.load();
        if (!project.watchPatterns) {
            project.watchPatterns = [];
        }
        if (!project.watchPatterns.includes('scss/**/*') && (yield cli_utils_1.pathExists(path.join(env.project.directory, 'scss')))) {
            project.watchPatterns.push('scss/**/*');
        }
        env.events.on('watch:init', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const gulp = yield loadGulp(env);
            if (gulp) {
                if (!gulp.hasTask(SASS_TASK)) {
                    env.log.warn(`The ${chalk.cyan(SASS_TASK)} task not found in your Gulpfile, which is used to compile SCSS files. The default Ionic Gulpfile can be downloaded from ${chalk.bold('https://github.com/ionic-team/ionic-app-base/blob/master/gulpfile.js')}`);
                }
                if (!gulp.hasTask(BUILD_BEFORE_TASK)) {
                    env.log.debug(() => `No ${chalk.cyan(BUILD_BEFORE_TASK)} task found in Gulpfile.`);
                }
                if (!gulp.hasTask(BUILD_AFTER_TASK)) {
                    env.log.debug(() => `No ${chalk.cyan(BUILD_AFTER_TASK)} task found in Gulpfile.`);
                }
                if (!gulp.hasTask(WATCH_BEFORE_TASK)) {
                    env.log.debug(() => `No ${chalk.cyan(WATCH_BEFORE_TASK)} task found in Gulpfile.`);
                }
            }
        }));
        env.events.on('watch:change', (filePath) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const gulp = yield loadGulp(env);
            if (gulp) {
                const gulpStart = cli_utils_1.promisify(gulp.start.bind(gulp));
                if (gulp.hasTask(SASS_TASK)) {
                    if (path.extname(filePath) === '.scss') {
                        env.log.debug(() => `Invoking ${chalk.cyan(SASS_TASK)} gulp task.`);
                        try {
                            yield gulpStart(SASS_TASK);
                        }
                        catch (e) {
                            env.log.error(e);
                        }
                    }
                }
            }
        }));
    }));
    hooks.register(exports.name, BUILD_BEFORE_HOOK, ({ env }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const gulp = yield loadGulp(env);
        if (gulp) {
            const gulpStart = cli_utils_1.promisify(gulp.start.bind(gulp));
            if (gulp.hasTask(BUILD_BEFORE_TASK)) {
                env.log.debug(() => `Invoking ${chalk.cyan(BUILD_BEFORE_TASK)} gulp task.`);
                try {
                    yield gulpStart(BUILD_BEFORE_TASK);
                }
                catch (e) {
                    env.log.error(`Error occurred during ${chalk.cyan(BUILD_BEFORE_TASK)} gulp task. Use ${chalk.green('--verbose')} to show details.`);
                    throw e;
                }
            }
        }
    }));
    hooks.register(exports.name, BUILD_AFTER_HOOK, ({ env }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const gulp = yield loadGulp(env);
        if (gulp) {
            const gulpStart = cli_utils_1.promisify(gulp.start.bind(gulp));
            if (gulp.hasTask(BUILD_AFTER_TASK)) {
                env.log.debug(() => `Invoking ${chalk.cyan(BUILD_AFTER_TASK)} gulp task.`);
                try {
                    yield gulpStart(BUILD_AFTER_TASK);
                }
                catch (e) {
                    env.log.error(`Error occurred during ${chalk.cyan(BUILD_AFTER_TASK)} gulp task. Use ${chalk.green('--verbose')} to show details.`);
                    throw e;
                }
            }
        }
    }));
    hooks.register(exports.name, WATCH_BEFORE_HOOK, ({ env }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const gulp = yield loadGulp(env);
        if (gulp) {
            const gulpStart = cli_utils_1.promisify(gulp.start.bind(gulp));
            if (gulp.hasTask(WATCH_BEFORE_TASK)) {
                env.log.debug(() => `Invoking ${chalk.cyan(WATCH_BEFORE_TASK)} gulp task.`);
                try {
                    yield gulpStart(WATCH_BEFORE_TASK);
                }
                catch (e) {
                    env.log.error(`Error occurred during ${chalk.cyan(WATCH_BEFORE_TASK)} gulp task. Use ${chalk.green('--verbose')} to show details.`);
                    throw e;
                }
            }
        }
    }));
    hooks.register(exports.name, 'command:info', ({ env }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let gulpVersion = yield cli_utils_1.getCommandInfo('gulp', ['--version']);
        if (gulpVersion) {
            gulpVersion = gulpVersion.replace(/\[[\d\:]+\]\s/g, '');
            gulpVersion = gulpVersion.trim();
        }
        return [
            { type: 'global-packages', name: 'Gulp CLI', version: gulpVersion || 'not installed globally' },
            { type: 'cli-packages', name: exports.name, version: exports.version, path: path.dirname(path.dirname(__filename)) },
        ];
    }));
}
exports.registerHooks = registerHooks;
