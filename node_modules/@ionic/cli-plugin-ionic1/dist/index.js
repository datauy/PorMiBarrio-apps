"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk = require("chalk");
const path = require("path");
const cli_utils_1 = require("@ionic/cli-utils");
const index_1 = require("./serve/index");
exports.name = '@ionic/cli-plugin-ionic1';
exports.version = '2.1.1';
function registerHooks(hooks) {
    hooks.register(exports.name, 'command:docs', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        return 'https://ionicframework.com/docs/v1/';
    }));
    hooks.register(exports.name, 'command:info', ({ env }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!env.project.directory) {
            return [];
        }
        const getIonic1Version = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const ionicVersionFilePath = path.resolve(env.project.directory, 'www', 'lib', 'ionic', 'version.json'); // TODO
            try {
                const ionicVersionJson = yield cli_utils_1.fsReadJsonFile(ionicVersionFilePath);
                return ionicVersionJson['version'];
            }
            catch (e) {
                env.log.error(`Error with ${chalk.bold(ionicVersionFilePath)} file: ${e}`);
            }
        });
        const ionic1Version = yield getIonic1Version();
        return [
            { type: 'local-packages', name: 'Ionic Framework', version: ionic1Version ? `ionic1 ${ionic1Version}` : 'unknown' },
            { type: 'cli-packages', name: exports.name, version: exports.version, path: path.dirname(path.dirname(__filename)) },
        ];
    }));
    hooks.register(exports.name, 'command:serve', (args) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        return index_1.serve(args);
    }));
}
exports.registerHooks = registerHooks;
