'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _arrify = require('arrify');

var _arrify2 = _interopRequireDefault(_arrify);

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

var _vinylContentsTostring = require('vinyl-contents-tostring');

var _vinylContentsTostring2 = _interopRequireDefault(_vinylContentsTostring);

var _gulpUtil = require('gulp-util');

var _libxmljs = require('libxmljs');

var _transformers = require('./transformers');

var _const = require('./const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transform(transformations, transformer, nsUri) {
  // create through object
  return _through2.default.obj(function (file, enc, cb) {
    var _this = this;

    var newFile = file.clone();

    if (file.isNull()) {
      this.push(newFile);
      cb();
    } else {
      (0, _vinylContentsTostring2.default)(file, enc).then(function (xml) {
        return transformer(transformations, (0, _libxmljs.parseXmlString)(xml), nsUri);
      }).then(function (transformedXml) {
        if (file.isBuffer()) {
          newFile.contents = new Buffer(transformedXml);
        } else /* if (file.isStream()) */{
            // start the transformation
            newFile.contents = (0, _through2.default)();
            newFile.contents.write(transformedXml);
            newFile.contents.end();
          }

        // make sure the file goes through the next gulp plugin
        _this.push(newFile);
        cb();
      }).catch(cb);
    }
  });
}

function gulpXmlTransformer(transformations, nsUri) {
  // check options
  switch (typeof transformations === 'undefined' ? 'undefined' : _typeof(transformations)) {
    case 'function':
      return transform(transformations, _transformers.functionTransformer, nsUri);
    case 'object':
      return transform((0, _arrify2.default)(transformations), _transformers.objectTransformer, nsUri);
    case 'undefined':
      throw new _gulpUtil.PluginError(_const.PLUGIN_NAME, 'transformations option is required');
    default:
      throw new _gulpUtil.PluginError(_const.PLUGIN_NAME, 'transformations option must be a function or an object');
  }
}

module.exports = gulpXmlTransformer;