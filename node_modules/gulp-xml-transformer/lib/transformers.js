'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.functionTransformer = functionTransformer;
exports.objectTransformer = objectTransformer;

var _libxmljs = require('libxmljs');

var _libxmljs2 = _interopRequireDefault(_libxmljs);

var _arrify = require('arrify');

var _arrify2 = _interopRequireDefault(_arrify);

var _valueOrFunction = require('value-or-function');

var _valueOrFunction2 = _interopRequireDefault(_valueOrFunction);

var _gulpUtil = require('gulp-util');

var _const = require('./const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var stringOrNumber = function stringOrNumber() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return _valueOrFunction2.default.apply(undefined, [['number', 'string']].concat(args));
};

// edit XML document by user specific function
function functionTransformer(tranformation, doc) {
  return Promise.resolve(tranformation(doc, _libxmljs2.default)).then(function (newDoc) {
    return newDoc.toString();
  });
}

// edit XML document by user specific object
function objectTransformer(transformations, doc, nsUri) {
  transformations.forEach(function (transformation) {
    var elem = nsUri === undefined ? doc.get(transformation.path) : doc.get(transformation.path, nsUri);
    var _transformation$isMan = transformation.isMandatory,
        isMandatory = _transformation$isMan === undefined ? true : _transformation$isMan;


    if (!(elem instanceof _libxmljs2.default.Element)) {
      if (isMandatory) {
        throw new _gulpUtil.PluginError(_const.PLUGIN_NAME, 'Can\'t find element at "' + transformation.path + '"');
      }

      return;
    }

    if ({}.hasOwnProperty.call(transformation, 'text')) {
      elem.text(transformation.text);
    }

    var attrs = (0, _arrify2.default)(transformation.attrs || transformation.attr);
    attrs.forEach(function (attr) {
      Object.keys(attr).forEach(function (key) {
        var oldAttr = elem.attr(key);
        var oldVal = oldAttr && oldAttr.value();
        var val = stringOrNumber(attr[key], oldVal);
        elem.attr(_defineProperty({}, key, val));
      });
    });
  });

  return doc.toString();
}